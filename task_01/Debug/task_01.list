
task_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b084  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b4f8  0800b4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b4fc  0800b4fc  0001b4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800b500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00014934  24000084  0800b584  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240149b8  0800b584  000249b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022318  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e06  00000000  00000000  000423ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a20  00000000  00000000  000461d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001888  00000000  00000000  00047bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000338f7  00000000  00000000  00049478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020882  00000000  00000000  0007cd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014f1df  00000000  00000000  0009d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ec7d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072cc  00000000  00000000  001ec820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b31c 	.word	0x0800b31c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	0800b31c 	.word	0x0800b31c

080002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000380 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000302:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000304:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000306:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000308:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800030a:	d332      	bcc.n	8000372 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800030c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800030e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000310:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000312:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000314:	d314      	bcc.n	8000340 <_CheckCase2>

08000316 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000316:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000318:	19d0      	adds	r0, r2, r7
 800031a:	bf00      	nop

0800031c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800031c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000320:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000324:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000326:	d005      	beq.n	8000334 <_CSDone>
        LDRB     R3,[R1], #+1
 8000328:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800032c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000330:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000332:	d1f3      	bne.n	800031c <_LoopCopyStraight>

08000334 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000334:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000338:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800033a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800033c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800033e:	4770      	bx	lr

08000340 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000340:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000342:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000344:	d319      	bcc.n	800037a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000346:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000348:	1b12      	subs	r2, r2, r4

0800034a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800034e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000352:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000356:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000358:	d005      	beq.n	8000366 <_No2ChunkNeeded>

0800035a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800035a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800035e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000362:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000364:	d1f9      	bne.n	800035a <_LoopCopyAfterWrapAround>

08000366 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000366:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800036a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800036c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800036e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000370:	4770      	bx	lr

08000372 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000372:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000374:	3801      	subs	r0, #1
        CMP      R0,R2
 8000376:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000378:	d2cd      	bcs.n	8000316 <_Case4>

0800037a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800037a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800037c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800037e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000380:	240133d0 	.word	0x240133d0
	...

08000390 <memchr>:
 8000390:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000394:	2a10      	cmp	r2, #16
 8000396:	db2b      	blt.n	80003f0 <memchr+0x60>
 8000398:	f010 0f07 	tst.w	r0, #7
 800039c:	d008      	beq.n	80003b0 <memchr+0x20>
 800039e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a2:	3a01      	subs	r2, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d02d      	beq.n	8000404 <memchr+0x74>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	b342      	cbz	r2, 8000400 <memchr+0x70>
 80003ae:	d1f6      	bne.n	800039e <memchr+0xe>
 80003b0:	b4f0      	push	{r4, r5, r6, r7}
 80003b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ba:	f022 0407 	bic.w	r4, r2, #7
 80003be:	f07f 0700 	mvns.w	r7, #0
 80003c2:	2300      	movs	r3, #0
 80003c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003c8:	3c08      	subs	r4, #8
 80003ca:	ea85 0501 	eor.w	r5, r5, r1
 80003ce:	ea86 0601 	eor.w	r6, r6, r1
 80003d2:	fa85 f547 	uadd8	r5, r5, r7
 80003d6:	faa3 f587 	sel	r5, r3, r7
 80003da:	fa86 f647 	uadd8	r6, r6, r7
 80003de:	faa5 f687 	sel	r6, r5, r7
 80003e2:	b98e      	cbnz	r6, 8000408 <memchr+0x78>
 80003e4:	d1ee      	bne.n	80003c4 <memchr+0x34>
 80003e6:	bcf0      	pop	{r4, r5, r6, r7}
 80003e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003ec:	f002 0207 	and.w	r2, r2, #7
 80003f0:	b132      	cbz	r2, 8000400 <memchr+0x70>
 80003f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f6:	3a01      	subs	r2, #1
 80003f8:	ea83 0301 	eor.w	r3, r3, r1
 80003fc:	b113      	cbz	r3, 8000404 <memchr+0x74>
 80003fe:	d1f8      	bne.n	80003f2 <memchr+0x62>
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr
 8000404:	3801      	subs	r0, #1
 8000406:	4770      	bx	lr
 8000408:	2d00      	cmp	r5, #0
 800040a:	bf06      	itte	eq
 800040c:	4635      	moveq	r5, r6
 800040e:	3803      	subeq	r0, #3
 8000410:	3807      	subne	r0, #7
 8000412:	f015 0f01 	tst.w	r5, #1
 8000416:	d107      	bne.n	8000428 <memchr+0x98>
 8000418:	3001      	adds	r0, #1
 800041a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800041e:	bf02      	ittt	eq
 8000420:	3001      	addeq	r0, #1
 8000422:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000426:	3001      	addeq	r0, #1
 8000428:	bcf0      	pop	{r4, r5, r6, r7}
 800042a:	3801      	subs	r0, #1
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b974 	b.w	8000730 <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9d08      	ldr	r5, [sp, #32]
 8000466:	4604      	mov	r4, r0
 8000468:	468e      	mov	lr, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d14d      	bne.n	800050a <__udivmoddi4+0xaa>
 800046e:	428a      	cmp	r2, r1
 8000470:	4694      	mov	ip, r2
 8000472:	d969      	bls.n	8000548 <__udivmoddi4+0xe8>
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	b152      	cbz	r2, 8000490 <__udivmoddi4+0x30>
 800047a:	fa01 f302 	lsl.w	r3, r1, r2
 800047e:	f1c2 0120 	rsb	r1, r2, #32
 8000482:	fa20 f101 	lsr.w	r1, r0, r1
 8000486:	fa0c fc02 	lsl.w	ip, ip, r2
 800048a:	ea41 0e03 	orr.w	lr, r1, r3
 800048e:	4094      	lsls	r4, r2
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	0c21      	lsrs	r1, r4, #16
 8000496:	fbbe f6f8 	udiv	r6, lr, r8
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fb08 e316 	mls	r3, r8, r6, lr
 80004a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004a6:	fb06 f107 	mul.w	r1, r6, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d90a      	bls.n	80004c4 <__udivmoddi4+0x64>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004b6:	f080 811f 	bcs.w	80006f8 <__udivmoddi4+0x298>
 80004ba:	4299      	cmp	r1, r3
 80004bc:	f240 811c 	bls.w	80006f8 <__udivmoddi4+0x298>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3310 	mls	r3, r8, r0, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb00 f707 	mul.w	r7, r0, r7
 80004d8:	42a7      	cmp	r7, r4
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x92>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e4:	f080 810a 	bcs.w	80006fc <__udivmoddi4+0x29c>
 80004e8:	42a7      	cmp	r7, r4
 80004ea:	f240 8107 	bls.w	80006fc <__udivmoddi4+0x29c>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f6:	1be4      	subs	r4, r4, r7
 80004f8:	2600      	movs	r6, #0
 80004fa:	b11d      	cbz	r5, 8000504 <__udivmoddi4+0xa4>
 80004fc:	40d4      	lsrs	r4, r2
 80004fe:	2300      	movs	r3, #0
 8000500:	e9c5 4300 	strd	r4, r3, [r5]
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	428b      	cmp	r3, r1
 800050c:	d909      	bls.n	8000522 <__udivmoddi4+0xc2>
 800050e:	2d00      	cmp	r5, #0
 8000510:	f000 80ef 	beq.w	80006f2 <__udivmoddi4+0x292>
 8000514:	2600      	movs	r6, #0
 8000516:	e9c5 0100 	strd	r0, r1, [r5]
 800051a:	4630      	mov	r0, r6
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	fab3 f683 	clz	r6, r3
 8000526:	2e00      	cmp	r6, #0
 8000528:	d14a      	bne.n	80005c0 <__udivmoddi4+0x160>
 800052a:	428b      	cmp	r3, r1
 800052c:	d302      	bcc.n	8000534 <__udivmoddi4+0xd4>
 800052e:	4282      	cmp	r2, r0
 8000530:	f200 80f9 	bhi.w	8000726 <__udivmoddi4+0x2c6>
 8000534:	1a84      	subs	r4, r0, r2
 8000536:	eb61 0303 	sbc.w	r3, r1, r3
 800053a:	2001      	movs	r0, #1
 800053c:	469e      	mov	lr, r3
 800053e:	2d00      	cmp	r5, #0
 8000540:	d0e0      	beq.n	8000504 <__udivmoddi4+0xa4>
 8000542:	e9c5 4e00 	strd	r4, lr, [r5]
 8000546:	e7dd      	b.n	8000504 <__udivmoddi4+0xa4>
 8000548:	b902      	cbnz	r2, 800054c <__udivmoddi4+0xec>
 800054a:	deff      	udf	#255	; 0xff
 800054c:	fab2 f282 	clz	r2, r2
 8000550:	2a00      	cmp	r2, #0
 8000552:	f040 8092 	bne.w	800067a <__udivmoddi4+0x21a>
 8000556:	eba1 010c 	sub.w	r1, r1, ip
 800055a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055e:	fa1f fe8c 	uxth.w	lr, ip
 8000562:	2601      	movs	r6, #1
 8000564:	0c20      	lsrs	r0, r4, #16
 8000566:	fbb1 f3f7 	udiv	r3, r1, r7
 800056a:	fb07 1113 	mls	r1, r7, r3, r1
 800056e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000572:	fb0e f003 	mul.w	r0, lr, r3
 8000576:	4288      	cmp	r0, r1
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x12c>
 800057a:	eb1c 0101 	adds.w	r1, ip, r1
 800057e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x12a>
 8000584:	4288      	cmp	r0, r1
 8000586:	f200 80cb 	bhi.w	8000720 <__udivmoddi4+0x2c0>
 800058a:	4643      	mov	r3, r8
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f7 	udiv	r0, r1, r7
 8000594:	fb07 1110 	mls	r1, r7, r0, r1
 8000598:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800059c:	fb0e fe00 	mul.w	lr, lr, r0
 80005a0:	45a6      	cmp	lr, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x156>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005ac:	d202      	bcs.n	80005b4 <__udivmoddi4+0x154>
 80005ae:	45a6      	cmp	lr, r4
 80005b0:	f200 80bb 	bhi.w	800072a <__udivmoddi4+0x2ca>
 80005b4:	4608      	mov	r0, r1
 80005b6:	eba4 040e 	sub.w	r4, r4, lr
 80005ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005be:	e79c      	b.n	80004fa <__udivmoddi4+0x9a>
 80005c0:	f1c6 0720 	rsb	r7, r6, #32
 80005c4:	40b3      	lsls	r3, r6
 80005c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ce:	fa20 f407 	lsr.w	r4, r0, r7
 80005d2:	fa01 f306 	lsl.w	r3, r1, r6
 80005d6:	431c      	orrs	r4, r3
 80005d8:	40f9      	lsrs	r1, r7
 80005da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005de:	fa00 f306 	lsl.w	r3, r0, r6
 80005e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005e6:	0c20      	lsrs	r0, r4, #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fb09 1118 	mls	r1, r9, r8, r1
 80005f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005f4:	fb08 f00e 	mul.w	r0, r8, lr
 80005f8:	4288      	cmp	r0, r1
 80005fa:	fa02 f206 	lsl.w	r2, r2, r6
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b8>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f108 3aff 	add.w	sl, r8, #4294967295
 8000608:	f080 8088 	bcs.w	800071c <__udivmoddi4+0x2bc>
 800060c:	4288      	cmp	r0, r1
 800060e:	f240 8085 	bls.w	800071c <__udivmoddi4+0x2bc>
 8000612:	f1a8 0802 	sub.w	r8, r8, #2
 8000616:	4461      	add	r1, ip
 8000618:	1a09      	subs	r1, r1, r0
 800061a:	b2a4      	uxth	r4, r4
 800061c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000620:	fb09 1110 	mls	r1, r9, r0, r1
 8000624:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000628:	fb00 fe0e 	mul.w	lr, r0, lr
 800062c:	458e      	cmp	lr, r1
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1e2>
 8000630:	eb1c 0101 	adds.w	r1, ip, r1
 8000634:	f100 34ff 	add.w	r4, r0, #4294967295
 8000638:	d26c      	bcs.n	8000714 <__udivmoddi4+0x2b4>
 800063a:	458e      	cmp	lr, r1
 800063c:	d96a      	bls.n	8000714 <__udivmoddi4+0x2b4>
 800063e:	3802      	subs	r0, #2
 8000640:	4461      	add	r1, ip
 8000642:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000646:	fba0 9402 	umull	r9, r4, r0, r2
 800064a:	eba1 010e 	sub.w	r1, r1, lr
 800064e:	42a1      	cmp	r1, r4
 8000650:	46c8      	mov	r8, r9
 8000652:	46a6      	mov	lr, r4
 8000654:	d356      	bcc.n	8000704 <__udivmoddi4+0x2a4>
 8000656:	d053      	beq.n	8000700 <__udivmoddi4+0x2a0>
 8000658:	b15d      	cbz	r5, 8000672 <__udivmoddi4+0x212>
 800065a:	ebb3 0208 	subs.w	r2, r3, r8
 800065e:	eb61 010e 	sbc.w	r1, r1, lr
 8000662:	fa01 f707 	lsl.w	r7, r1, r7
 8000666:	fa22 f306 	lsr.w	r3, r2, r6
 800066a:	40f1      	lsrs	r1, r6
 800066c:	431f      	orrs	r7, r3
 800066e:	e9c5 7100 	strd	r7, r1, [r5]
 8000672:	2600      	movs	r6, #0
 8000674:	4631      	mov	r1, r6
 8000676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	40d8      	lsrs	r0, r3
 8000680:	fa0c fc02 	lsl.w	ip, ip, r2
 8000684:	fa21 f303 	lsr.w	r3, r1, r3
 8000688:	4091      	lsls	r1, r2
 800068a:	4301      	orrs	r1, r0
 800068c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000690:	fa1f fe8c 	uxth.w	lr, ip
 8000694:	fbb3 f0f7 	udiv	r0, r3, r7
 8000698:	fb07 3610 	mls	r6, r7, r0, r3
 800069c:	0c0b      	lsrs	r3, r1, #16
 800069e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006a2:	fb00 f60e 	mul.w	r6, r0, lr
 80006a6:	429e      	cmp	r6, r3
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d908      	bls.n	80006c0 <__udivmoddi4+0x260>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b6:	d22f      	bcs.n	8000718 <__udivmoddi4+0x2b8>
 80006b8:	429e      	cmp	r6, r3
 80006ba:	d92d      	bls.n	8000718 <__udivmoddi4+0x2b8>
 80006bc:	3802      	subs	r0, #2
 80006be:	4463      	add	r3, ip
 80006c0:	1b9b      	subs	r3, r3, r6
 80006c2:	b289      	uxth	r1, r1
 80006c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006c8:	fb07 3316 	mls	r3, r7, r6, r3
 80006cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d0:	fb06 f30e 	mul.w	r3, r6, lr
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d908      	bls.n	80006ea <__udivmoddi4+0x28a>
 80006d8:	eb1c 0101 	adds.w	r1, ip, r1
 80006dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80006e0:	d216      	bcs.n	8000710 <__udivmoddi4+0x2b0>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d914      	bls.n	8000710 <__udivmoddi4+0x2b0>
 80006e6:	3e02      	subs	r6, #2
 80006e8:	4461      	add	r1, ip
 80006ea:	1ac9      	subs	r1, r1, r3
 80006ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006f0:	e738      	b.n	8000564 <__udivmoddi4+0x104>
 80006f2:	462e      	mov	r6, r5
 80006f4:	4628      	mov	r0, r5
 80006f6:	e705      	b.n	8000504 <__udivmoddi4+0xa4>
 80006f8:	4606      	mov	r6, r0
 80006fa:	e6e3      	b.n	80004c4 <__udivmoddi4+0x64>
 80006fc:	4618      	mov	r0, r3
 80006fe:	e6f8      	b.n	80004f2 <__udivmoddi4+0x92>
 8000700:	454b      	cmp	r3, r9
 8000702:	d2a9      	bcs.n	8000658 <__udivmoddi4+0x1f8>
 8000704:	ebb9 0802 	subs.w	r8, r9, r2
 8000708:	eb64 0e0c 	sbc.w	lr, r4, ip
 800070c:	3801      	subs	r0, #1
 800070e:	e7a3      	b.n	8000658 <__udivmoddi4+0x1f8>
 8000710:	4646      	mov	r6, r8
 8000712:	e7ea      	b.n	80006ea <__udivmoddi4+0x28a>
 8000714:	4620      	mov	r0, r4
 8000716:	e794      	b.n	8000642 <__udivmoddi4+0x1e2>
 8000718:	4640      	mov	r0, r8
 800071a:	e7d1      	b.n	80006c0 <__udivmoddi4+0x260>
 800071c:	46d0      	mov	r8, sl
 800071e:	e77b      	b.n	8000618 <__udivmoddi4+0x1b8>
 8000720:	3b02      	subs	r3, #2
 8000722:	4461      	add	r1, ip
 8000724:	e732      	b.n	800058c <__udivmoddi4+0x12c>
 8000726:	4630      	mov	r0, r6
 8000728:	e709      	b.n	800053e <__udivmoddi4+0xde>
 800072a:	4464      	add	r4, ip
 800072c:	3802      	subs	r0, #2
 800072e:	e742      	b.n	80005b6 <__udivmoddi4+0x156>

08000730 <__aeabi_idiv0>:
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fc43 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f857 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f91f 	bl	8000984 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000746:	f000 f8c9 	bl	80008dc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800074a:	f000 f913 	bl	8000974 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  //Enable CYCCNT counter to create timestamp of the Segger
  DWT_CTRL |= ( 1 << 0);
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <main+0x9c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <main+0x9c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800075a:	481e      	ldr	r0, [pc, #120]	; (80007d4 <main+0xa0>)
 800075c:	f007 feac 	bl	80084b8 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000760:	f007 fcbe 	bl	80080e0 <SEGGER_SYSVIEW_Conf>


  //SEGGER_SYSVIEW_Start(); NO NEED TO START IT HAPPEND IN INIT FUNCTION
 // Segger intialization is completed

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <main+0xa4>)
 8000770:	22c8      	movs	r2, #200	; 0xc8
 8000772:	491a      	ldr	r1, [pc, #104]	; (80007dc <main+0xa8>)
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <main+0xac>)
 8000776:	f005 fdc1 	bl	80062fc <xTaskCreate>
 800077a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d00a      	beq.n	8000798 <main+0x64>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000786:	f383 8811 	msr	BASEPRI, r3
 800078a:	f3bf 8f6f 	isb	sy
 800078e:	f3bf 8f4f 	dsb	sy
 8000792:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000794:	bf00      	nop
 8000796:	e7fe      	b.n	8000796 <main+0x62>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2302      	movs	r3, #2
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <main+0xb0>)
 80007a2:	22c8      	movs	r2, #200	; 0xc8
 80007a4:	4910      	ldr	r1, [pc, #64]	; (80007e8 <main+0xb4>)
 80007a6:	4811      	ldr	r0, [pc, #68]	; (80007ec <main+0xb8>)
 80007a8:	f005 fda8 	bl	80062fc <xTaskCreate>
 80007ac:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d00a      	beq.n	80007ca <main+0x96>
        __asm volatile
 80007b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b8:	f383 8811 	msr	BASEPRI, r3
 80007bc:	f3bf 8f6f 	isb	sy
 80007c0:	f3bf 8f4f 	dsb	sy
 80007c4:	60fb      	str	r3, [r7, #12]
    }
 80007c6:	bf00      	nop
 80007c8:	e7fe      	b.n	80007c8 <main+0x94>

  //start the freertos scheduler
  vTaskStartScheduler();
 80007ca:	f005 ff11 	bl	80065f0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x9a>
 80007d0:	e0001000 	.word	0xe0001000
 80007d4:	0007a120 	.word	0x0007a120
 80007d8:	0800b334 	.word	0x0800b334
 80007dc:	0800b34c 	.word	0x0800b34c
 80007e0:	08000bb9 	.word	0x08000bb9
 80007e4:	0800b354 	.word	0x0800b354
 80007e8:	0800b36c 	.word	0x0800b36c
 80007ec:	08000bf5 	.word	0x08000bf5

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09c      	sub	sp, #112	; 0x70
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	224c      	movs	r2, #76	; 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a f902 	bl	800aa08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2220      	movs	r2, #32
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00a f8fc 	bl	800aa08 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <SystemClock_Config+0xe4>)
 8000812:	f04f 32ff 	mov.w	r2, #4294967295
 8000816:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800081a:	2004      	movs	r0, #4
 800081c:	f000 fed8 	bl	80015d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <SystemClock_Config+0xe8>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a2b      	ldr	r2, [pc, #172]	; (80008d8 <SystemClock_Config+0xe8>)
 800082a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <SystemClock_Config+0xe8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <SystemClock_Config+0xe8>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800084c:	2321      	movs	r3, #33	; 0x21
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000866:	2346      	movs	r3, #70	; 0x46
 8000868:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800086e:	2304      	movs	r3, #4
 8000870:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000876:	230c      	movs	r3, #12
 8000878:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800087a:	2300      	movs	r3, #0
 800087c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fefc 	bl	8001684 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000892:	f000 f9df 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	233f      	movs	r3, #63	; 0x3f
 8000898:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2303      	movs	r3, #3
 800089c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2107      	movs	r1, #7
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fb13 	bl	8001ee8 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008c8:	f000 f9c4 	bl	8000c54 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3770      	adds	r7, #112	; 0x70
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58024400 	.word	0x58024400
 80008d8:	58024800 	.word	0x58024800

080008dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008e2:	4a23      	ldr	r2, [pc, #140]	; (8000970 <MX_USART3_UART_Init+0x94>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART3_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000926:	f003 ff67 	bl	80047f8 <HAL_UART_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000930:	f000 f990 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000938:	f005 f86d 	bl	8005a16 <HAL_UARTEx_SetTxFifoThreshold>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000942:	f000 f987 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <MX_USART3_UART_Init+0x90>)
 800094a:	f005 f8a2 	bl	8005a92 <HAL_UARTEx_SetRxFifoThreshold>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 f97e 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_USART3_UART_Init+0x90>)
 800095a:	f005 f823 	bl	80059a4 <HAL_UARTEx_DisableFifoMode>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 f976 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	240000a0 	.word	0x240000a0
 8000970:	40004800 	.word	0x40004800

08000974 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b80      	ldr	r3, [pc, #512]	; (8000b9c <MX_GPIO_Init+0x218>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a0:	4a7e      	ldr	r2, [pc, #504]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009aa:	4b7c      	ldr	r3, [pc, #496]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	623b      	str	r3, [r7, #32]
 80009b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b8:	4b78      	ldr	r3, [pc, #480]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009be:	4a77      	ldr	r2, [pc, #476]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009c8:	4b74      	ldr	r3, [pc, #464]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	4b71      	ldr	r3, [pc, #452]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009dc:	4a6f      	ldr	r2, [pc, #444]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009e6:	4b6d      	ldr	r3, [pc, #436]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b69      	ldr	r3, [pc, #420]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fa:	4a68      	ldr	r2, [pc, #416]	; (8000b9c <MX_GPIO_Init+0x218>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a04:	4b65      	ldr	r3, [pc, #404]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b62      	ldr	r3, [pc, #392]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a18:	4a60      	ldr	r2, [pc, #384]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a22:	4b5e      	ldr	r3, [pc, #376]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a30:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a36:	4a59      	ldr	r2, [pc, #356]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a40:	4b56      	ldr	r3, [pc, #344]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a54:	4a51      	ldr	r2, [pc, #324]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a5e:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6c:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a72:	4a4a      	ldr	r2, [pc, #296]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a74:	f043 0310 	orr.w	r3, r3, #16
 8000a78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a7c:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <MX_GPIO_Init+0x218>)
 8000a7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a90:	4843      	ldr	r0, [pc, #268]	; (8000ba0 <MX_GPIO_Init+0x21c>)
 8000a92:	f000 fd83 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a9c:	4841      	ldr	r0, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x220>)
 8000a9e:	f000 fd7d 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4840      	ldr	r0, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x224>)
 8000aa8:	f000 fd78 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	483a      	ldr	r0, [pc, #232]	; (8000bac <MX_GPIO_Init+0x228>)
 8000ac2:	f000 fbbb 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0x21c>)
 8000ae0:	f000 fbac 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ae4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4829      	ldr	r0, [pc, #164]	; (8000ba4 <MX_GPIO_Init+0x220>)
 8000afe:	f000 fb9d 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <MX_GPIO_Init+0x22c>)
 8000b18:	f000 fb90 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4820      	ldr	r0, [pc, #128]	; (8000bb4 <MX_GPIO_Init+0x230>)
 8000b32:	f000 fb83 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <MX_GPIO_Init+0x230>)
 8000b54:	f000 fb72 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <MX_GPIO_Init+0x230>)
 8000b72:	f000 fb63 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b76:	2302      	movs	r3, #2
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_GPIO_Init+0x224>)
 8000b8e:	f000 fb55 	bl	800123c <HAL_GPIO_Init>

}
 8000b92:	bf00      	nop
 8000b94:	3738      	adds	r7, #56	; 0x38
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	58021400 	.word	0x58021400
 8000ba4:	58020400 	.word	0x58020400
 8000ba8:	58021000 	.word	0x58021000
 8000bac:	58020800 	.word	0x58020800
 8000bb0:	58021800 	.word	0x58021800
 8000bb4:	58020000 	.word	0x58020000

08000bb8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09c      	sub	sp, #112	; 0x70
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1){
//		printf("%s\n",(char*)parameters);
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000bc0:	f107 000c 	add.w	r0, r7, #12
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a09      	ldr	r2, [pc, #36]	; (8000bec <task1_handler+0x34>)
 8000bc8:	2164      	movs	r1, #100	; 0x64
 8000bca:	f009 ff25 	bl	800aa18 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f009 fe38 	bl	800a848 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <task1_handler+0x38>)
 8000bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	f3bf 8f4f 	dsb	sy
 8000be4:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000be8:	e7ea      	b.n	8000bc0 <task1_handler+0x8>
 8000bea:	bf00      	nop
 8000bec:	0800b374 	.word	0x0800b374
 8000bf0:	e000ed04 	.word	0xe000ed04

08000bf4 <task2_handler>:
	}
}
static void task2_handler(void* parameters){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	; 0x70
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000bfc:	f107 000c 	add.w	r0, r7, #12
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <task2_handler+0x34>)
 8000c04:	2164      	movs	r1, #100	; 0x64
 8000c06:	f009 ff07 	bl	800aa18 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f009 fe1a 	bl	800a848 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <task2_handler+0x38>)
 8000c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000c24:	e7ea      	b.n	8000bfc <task2_handler+0x8>
 8000c26:	bf00      	nop
 8000c28:	0800b374 	.word	0x0800b374
 8000c2c:	e000ed04 	.word	0xe000ed04

08000c30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d101      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c42:	f000 f9fb 	bl	800103c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40001000 	.word	0x40001000

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_MspInit+0x30>)
 8000c68:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_MspInit+0x30>)
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x30>)
 8000c78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c84:	f006 fea8 	bl	80079d8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58024400 	.word	0x58024400

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ba      	sub	sp, #232	; 0xe8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	22c0      	movs	r2, #192	; 0xc0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f009 fea7 	bl	800aa08 <memset>
  if(huart->Instance==USART3)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d146      	bne.n	8000d52 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc4:	f04f 0202 	mov.w	r2, #2
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fcd2 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ce6:	f7ff ffb5 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <HAL_UART_MspInit+0xcc>)
 8000cec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <HAL_UART_MspInit+0xcc>)
 8000cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_UART_MspInit+0xcc>)
 8000cfc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_UART_MspInit+0xcc>)
 8000d0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_UART_MspInit+0xcc>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_UART_MspInit+0xcc>)
 8000d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d40:	2307      	movs	r3, #7
 8000d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_UART_MspInit+0xd0>)
 8000d4e:	f000 fa75 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	37e8      	adds	r7, #232	; 0xe8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40004800 	.word	0x40004800
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020c00 	.word	0x58020c00

08000d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	d827      	bhi.n	8000dc6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d76:	2200      	movs	r2, #0
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	2036      	movs	r0, #54	; 0x36
 8000d7c:	f000 fa36 	bl	80011ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d80:	2036      	movs	r0, #54	; 0x36
 8000d82:	f000 fa4d 	bl	8001220 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <HAL_InitTick+0xc4>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <HAL_InitTick+0xc8>)
 8000d8e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d92:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <HAL_InitTick+0xc8>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <HAL_InitTick+0xc8>)
 8000d9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000daa:	f107 0210 	add.w	r2, r7, #16
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fc23 	bl	8002600 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d106      	bne.n	8000dd2 <HAL_InitTick+0x6a>
 8000dc4:	e001      	b.n	8000dca <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e02b      	b.n	8000e22 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dca:	f001 fbed 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8000dce:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000dd0:	e004      	b.n	8000ddc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dd2:	f001 fbe9 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_InitTick+0xcc>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	0c9b      	lsrs	r3, r3, #18
 8000de6:	3b01      	subs	r3, #1
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_InitTick+0xd0>)
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <HAL_InitTick+0xd4>)
 8000dee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_InitTick+0xd0>)
 8000df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_InitTick+0xd0>)
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_InitTick+0xd0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_InitTick+0xd0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <HAL_InitTick+0xd0>)
 8000e0c:	f003 fa1a 	bl	8004244 <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <HAL_InitTick+0xd0>)
 8000e18:	f003 fa76 	bl	8004308 <HAL_TIM_Base_Start_IT>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	e000      	b.n	8000e22 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3740      	adds	r7, #64	; 0x40
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	24000008 	.word	0x24000008
 8000e30:	58024400 	.word	0x58024400
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	24000134 	.word	0x24000134
 8000e3c:	40001000 	.word	0x40001000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM6_DAC_IRQHandler+0x10>)
 8000e72:	f003 fac1 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000134 	.word	0x24000134

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <SystemInit+0xd0>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <SystemInit+0xd0>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <SystemInit+0xd4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d807      	bhi.n	8000eb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <SystemInit+0xd4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 030f 	bic.w	r3, r3, #15
 8000ea8:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <SystemInit+0xd4>)
 8000eaa:	f043 0303 	orr.w	r3, r3, #3
 8000eae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <SystemInit+0xd8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <SystemInit+0xd8>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <SystemInit+0xd8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <SystemInit+0xd8>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <SystemInit+0xd8>)
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <SystemInit+0xdc>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <SystemInit+0xd4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <SystemInit+0xd4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 030f 	bic.w	r3, r3, #15
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <SystemInit+0xd4>)
 8000ee4:	f043 0303 	orr.w	r3, r3, #3
 8000ee8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <SystemInit+0xd8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <SystemInit+0xd8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <SystemInit+0xd8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <SystemInit+0xd8>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <SystemInit+0xe0>)
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <SystemInit+0xd8>)
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <SystemInit+0xe4>)
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <SystemInit+0xd8>)
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <SystemInit+0xe8>)
 8000f0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <SystemInit+0xd8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <SystemInit+0xd8>)
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <SystemInit+0xe8>)
 8000f18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <SystemInit+0xd8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <SystemInit+0xd8>)
 8000f22:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <SystemInit+0xe8>)
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <SystemInit+0xd8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <SystemInit+0xd8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <SystemInit+0xd8>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <SystemInit+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <SystemInit+0xec>)
 8000f40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	52002000 	.word	0x52002000
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f60:	02020200 	.word	0x02020200
 8000f64:	01ff0000 	.word	0x01ff0000
 8000f68:	01010280 	.word	0x01010280
 8000f6c:	52004000 	.word	0x52004000

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff ff84 	bl	8000e80 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f009 fcf1 	bl	800a984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fbc7 	bl	8000734 <main>
  bx  lr
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fb0:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8000fb4:	0800b500 	.word	0x0800b500
  ldr r2, =_sbss
 8000fb8:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8000fbc:	240149b8 	.word	0x240149b8

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f000 f903 	bl	80011d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fd0:	f001 f940 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_Init+0x68>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	4913      	ldr	r1, [pc, #76]	; (8001030 <HAL_Init+0x6c>)
 8000fe2:	5ccb      	ldrb	r3, [r1, r3]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_Init+0x68>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_Init+0x6c>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_Init+0x70>)
 8001006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_Init+0x74>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100e:	200f      	movs	r0, #15
 8001010:	f7ff feaa 	bl	8000d68 <HAL_InitTick>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e002      	b.n	8001024 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800101e:	f7ff fe1f 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400
 8001030:	0800b448 	.word	0x0800b448
 8001034:	24000004 	.word	0x24000004
 8001038:	24000000 	.word	0x24000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2400000c 	.word	0x2400000c
 8001060:	24000180 	.word	0x24000180

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	24000180 	.word	0x24000180

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	05fa0000 	.word	0x05fa0000

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff4c 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011fa:	f7ff ff63 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 80011fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	6978      	ldr	r0, [r7, #20]
 8001206:	f7ff ffb3 	bl	8001170 <NVIC_EncodePriority>
 800120a:	4602      	mov	r2, r0
 800120c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff82 	bl	800111c <__NVIC_SetPriority>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff56 	bl	80010e0 <__NVIC_EnableIRQ>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <HAL_GPIO_Init+0x234>)
 800124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800124e:	e194      	b.n	800157a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8186 	beq.w	8001574 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d005      	beq.n	8001280 <HAL_GPIO_Init+0x44>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d017      	beq.n	800131e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	69b9      	ldr	r1, [r7, #24]
 800136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80e0 	beq.w	8001574 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_GPIO_Init+0x238>)
 80013b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013ba:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <HAL_GPIO_Init+0x238>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_GPIO_Init+0x238>)
 80013c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_GPIO_Init+0x23c>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_GPIO_Init+0x240>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d052      	beq.n	80014a4 <HAL_GPIO_Init+0x268>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_GPIO_Init+0x244>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d031      	beq.n	800146a <HAL_GPIO_Init+0x22e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_GPIO_Init+0x248>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d02b      	beq.n	8001466 <HAL_GPIO_Init+0x22a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_GPIO_Init+0x24c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d025      	beq.n	8001462 <HAL_GPIO_Init+0x226>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_GPIO_Init+0x250>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01f      	beq.n	800145e <HAL_GPIO_Init+0x222>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_GPIO_Init+0x254>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d019      	beq.n	800145a <HAL_GPIO_Init+0x21e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <HAL_GPIO_Init+0x258>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_GPIO_Init+0x25c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_Init+0x216>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <HAL_GPIO_Init+0x260>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0x212>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_GPIO_Init+0x264>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_GPIO_Init+0x20e>
 8001446:	2309      	movs	r3, #9
 8001448:	e02d      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 800144a:	230a      	movs	r3, #10
 800144c:	e02b      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 800144e:	2308      	movs	r3, #8
 8001450:	e029      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 8001452:	2307      	movs	r3, #7
 8001454:	e027      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 8001456:	2306      	movs	r3, #6
 8001458:	e025      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 800145a:	2305      	movs	r3, #5
 800145c:	e023      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 800145e:	2304      	movs	r3, #4
 8001460:	e021      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 8001462:	2303      	movs	r3, #3
 8001464:	e01f      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 8001466:	2302      	movs	r3, #2
 8001468:	e01d      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 800146a:	2301      	movs	r3, #1
 800146c:	e01b      	b.n	80014a6 <HAL_GPIO_Init+0x26a>
 800146e:	bf00      	nop
 8001470:	58000080 	.word	0x58000080
 8001474:	58024400 	.word	0x58024400
 8001478:	58000400 	.word	0x58000400
 800147c:	58020000 	.word	0x58020000
 8001480:	58020400 	.word	0x58020400
 8001484:	58020800 	.word	0x58020800
 8001488:	58020c00 	.word	0x58020c00
 800148c:	58021000 	.word	0x58021000
 8001490:	58021400 	.word	0x58021400
 8001494:	58021800 	.word	0x58021800
 8001498:	58021c00 	.word	0x58021c00
 800149c:	58022000 	.word	0x58022000
 80014a0:	58022400 	.word	0x58022400
 80014a4:	2300      	movs	r3, #0
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	4093      	lsls	r3, r2
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b6:	4938      	ldr	r1, [pc, #224]	; (8001598 <HAL_GPIO_Init+0x35c>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	3301      	adds	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	f47f ae63 	bne.w	8001250 <HAL_GPIO_Init+0x14>
  }
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3724      	adds	r7, #36	; 0x24
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	58000400 	.word	0x58000400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015b8:	e003      	b.n	80015c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	041a      	lsls	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	619a      	str	r2, [r3, #24]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_PWREx_ConfigSupply+0xb0>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	2b06      	cmp	r3, #6
 80015e2:	d00a      	beq.n	80015fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_PWREx_ConfigSupply+0xb0>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d001      	beq.n	80015f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e040      	b.n	8001678 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e03e      	b.n	8001678 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_PWREx_ConfigSupply+0xb0>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001602:	491f      	ldr	r1, [pc, #124]	; (8001680 <HAL_PWREx_ConfigSupply+0xb0>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4313      	orrs	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800160a:	f7ff fd2b 	bl	8001064 <HAL_GetTick>
 800160e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001610:	e009      	b.n	8001626 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001612:	f7ff fd27 	bl	8001064 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001620:	d901      	bls.n	8001626 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e028      	b.n	8001678 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_PWREx_ConfigSupply+0xb0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800162e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001632:	d1ee      	bne.n	8001612 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b1e      	cmp	r3, #30
 8001638:	d008      	beq.n	800164c <HAL_PWREx_ConfigSupply+0x7c>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b2e      	cmp	r3, #46	; 0x2e
 800163e:	d005      	beq.n	800164c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b1d      	cmp	r3, #29
 8001644:	d002      	beq.n	800164c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b2d      	cmp	r3, #45	; 0x2d
 800164a:	d114      	bne.n	8001676 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800164c:	f7ff fd0a 	bl	8001064 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001652:	e009      	b.n	8001668 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001654:	f7ff fd06 	bl	8001064 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001662:	d901      	bls.n	8001668 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e007      	b.n	8001678 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_PWREx_ConfigSupply+0xb0>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d1ee      	bne.n	8001654 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024800 	.word	0x58024800

08001684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f000 bc1f 	b.w	8001ed6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80b3 	beq.w	800180c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a6:	4b95      	ldr	r3, [pc, #596]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d007      	beq.n	80016cc <HAL_RCC_OscConfig+0x48>
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	2b18      	cmp	r3, #24
 80016c0:	d112      	bne.n	80016e8 <HAL_RCC_OscConfig+0x64>
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d10d      	bne.n	80016e8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8098 	beq.w	800180a <HAL_RCC_OscConfig+0x186>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 8093 	bne.w	800180a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e3f6      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x7c>
 80016f2:	4b82      	ldr	r3, [pc, #520]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a81      	ldr	r2, [pc, #516]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e058      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0xaa>
 8001708:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a7b      	ldr	r2, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a78      	ldr	r2, [pc, #480]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800171a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b76      	ldr	r3, [pc, #472]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a75      	ldr	r2, [pc, #468]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e041      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001736:	d112      	bne.n	800175e <HAL_RCC_OscConfig+0xda>
 8001738:	4b70      	ldr	r3, [pc, #448]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a6f      	ldr	r2, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800173e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a6c      	ldr	r2, [pc, #432]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800174a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a69      	ldr	r2, [pc, #420]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e029      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001766:	d112      	bne.n	800178e <HAL_RCC_OscConfig+0x10a>
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a63      	ldr	r2, [pc, #396]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800176e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a60      	ldr	r2, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800177a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e011      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
 800178e:	4b5b      	ldr	r3, [pc, #364]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a5a      	ldr	r2, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a57      	ldr	r2, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80017ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d013      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fc53 	bl	8001064 <HAL_GetTick>
 80017be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c2:	f7ff fc4f 	bl	8001064 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b64      	cmp	r3, #100	; 0x64
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e380      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d4:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x13e>
 80017e0:	e014      	b.n	800180c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fc3f 	bl	8001064 <HAL_GetTick>
 80017e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ea:	f7ff fc3b 	bl	8001064 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e36c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x166>
 8001808:	e000      	b.n	800180c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 808c 	beq.w	8001932 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001822:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <HAL_RCC_OscConfig+0x1bc>
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	2b18      	cmp	r3, #24
 8001834:	d137      	bne.n	80018a6 <HAL_RCC_OscConfig+0x222>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d132      	bne.n	80018a6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_OscConfig+0x1d4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e33e      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 0219 	bic.w	r2, r3, #25
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4925      	ldr	r1, [pc, #148]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff fbfb 	bl	8001064 <HAL_GetTick>
 800186e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff fbf7 	bl	8001064 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e328      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	4917      	ldr	r1, [pc, #92]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a4:	e045      	b.n	8001932 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d028      	beq.n	8001900 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0219 	bic.w	r2, r3, #25
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4910      	ldr	r1, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fbd0 	bl	8001064 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fbcc 	bl	8001064 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e2fd      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	4901      	ldr	r1, [pc, #4]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e01a      	b.n	8001932 <HAL_RCC_OscConfig+0x2ae>
 80018fc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001900:	4b97      	ldr	r3, [pc, #604]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a96      	ldr	r2, [pc, #600]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fbaa 	bl	8001064 <HAL_GetTick>
 8001910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fba6 	bl	8001064 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e2d7      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001926:	4b8e      	ldr	r3, [pc, #568]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06a      	beq.n	8001a14 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193e:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001946:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001948:	4b85      	ldr	r3, [pc, #532]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d007      	beq.n	8001964 <HAL_RCC_OscConfig+0x2e0>
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b18      	cmp	r3, #24
 8001958:	d11b      	bne.n	8001992 <HAL_RCC_OscConfig+0x30e>
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d116      	bne.n	8001992 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001964:	4b7e      	ldr	r3, [pc, #504]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x2f8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b80      	cmp	r3, #128	; 0x80
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e2ac      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800197c:	4b78      	ldr	r3, [pc, #480]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4975      	ldr	r1, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 800198c:	4313      	orrs	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001990:	e040      	b.n	8001a14 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d023      	beq.n	80019e2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800199a:	4b71      	ldr	r3, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a70      	ldr	r2, [pc, #448]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff fb5d 	bl	8001064 <HAL_GetTick>
 80019aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019ae:	f7ff fb59 	bl	8001064 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e28a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019c0:	4b67      	ldr	r3, [pc, #412]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019cc:	4b64      	ldr	r3, [pc, #400]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	4961      	ldr	r1, [pc, #388]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
 80019e0:	e018      	b.n	8001a14 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019e2:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5e      	ldr	r2, [pc, #376]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 80019e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb39 	bl	8001064 <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019f6:	f7ff fb35 	bl	8001064 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e266      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a08:	4b55      	ldr	r3, [pc, #340]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d036      	beq.n	8001a8e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d019      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff fb16 	bl	8001064 <HAL_GetTick>
 8001a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fb12 	bl	8001064 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e243      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x3b8>
 8001a5a:	e018      	b.n	8001a8e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a60:	4a3f      	ldr	r2, [pc, #252]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff fafc 	bl	8001064 <HAL_GetTick>
 8001a6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff faf8 	bl	8001064 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e229      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d036      	beq.n	8001b08 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001aa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fad9 	bl	8001064 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab6:	f7ff fad5 	bl	8001064 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e206      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x432>
 8001ad4:	e018      	b.n	8001b08 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fabf 	bl	8001064 <HAL_GetTick>
 8001ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aea:	f7ff fabb 	bl	8001064 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1ec      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80af 	beq.w	8001c74 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_OscConfig+0x4e0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_RCC_OscConfig+0x4e0>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b22:	f7ff fa9f 	bl	8001064 <HAL_GetTick>
 8001b26:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7ff fa9b 	bl	8001064 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1cc      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_OscConfig+0x4e0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10b      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4e4>
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a02      	ldr	r2, [pc, #8]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	e05b      	b.n	8001c16 <HAL_RCC_OscConfig+0x592>
 8001b5e:	bf00      	nop
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58024800 	.word	0x58024800
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d112      	bne.n	8001b96 <HAL_RCC_OscConfig+0x512>
 8001b70:	4b9d      	ldr	r3, [pc, #628]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a9c      	ldr	r2, [pc, #624]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	4b9a      	ldr	r3, [pc, #616]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	4a99      	ldr	r2, [pc, #612]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b86:	6713      	str	r3, [r2, #112]	; 0x70
 8001b88:	4b97      	ldr	r3, [pc, #604]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a96      	ldr	r2, [pc, #600]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	e03f      	b.n	8001c16 <HAL_RCC_OscConfig+0x592>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d112      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x540>
 8001b9e:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a91      	ldr	r2, [pc, #580]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8001baa:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a8e      	ldr	r2, [pc, #568]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	4b8c      	ldr	r3, [pc, #560]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a8b      	ldr	r2, [pc, #556]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	e028      	b.n	8001c16 <HAL_RCC_OscConfig+0x592>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b85      	cmp	r3, #133	; 0x85
 8001bca:	d112      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x56e>
 8001bcc:	4b86      	ldr	r3, [pc, #536]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a85      	ldr	r2, [pc, #532]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	4b83      	ldr	r3, [pc, #524]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a82      	ldr	r2, [pc, #520]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a7f      	ldr	r2, [pc, #508]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	e011      	b.n	8001c16 <HAL_RCC_OscConfig+0x592>
 8001bf2:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	4a7c      	ldr	r2, [pc, #496]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfe:	4b7a      	ldr	r3, [pc, #488]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	4a79      	ldr	r2, [pc, #484]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0a:	4b77      	ldr	r3, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	4a76      	ldr	r2, [pc, #472]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d015      	beq.n	8001c4a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa21 	bl	8001064 <HAL_GetTick>
 8001c22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fa1d 	bl	8001064 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e14c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ee      	beq.n	8001c26 <HAL_RCC_OscConfig+0x5a2>
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa0b 	bl	8001064 <HAL_GetTick>
 8001c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fa07 	bl	8001064 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e136      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c68:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ee      	bne.n	8001c52 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 812b 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c86:	2b18      	cmp	r3, #24
 8001c88:	f000 80bb 	beq.w	8001e02 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	f040 8095 	bne.w	8001dc0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a53      	ldr	r2, [pc, #332]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f9df 	bl	8001064 <HAL_GetTick>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff f9db 	bl	8001064 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e10c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cbc:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ccc:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_OscConfig+0x768>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	4942      	ldr	r1, [pc, #264]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	628b      	str	r3, [r1, #40]	; 0x28
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	025b      	lsls	r3, r3, #9
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d12:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_OscConfig+0x76c>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d30:	00d2      	lsls	r2, r2, #3
 8001d32:	492d      	ldr	r1, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	f023 020c 	bic.w	r2, r3, #12
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4928      	ldr	r1, [pc, #160]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f023 0202 	bic.w	r2, r3, #2
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4924      	ldr	r1, [pc, #144]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	4a21      	ldr	r2, [pc, #132]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f964 	bl	8001064 <HAL_GetTick>
 8001d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff f960 	bl	8001064 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e091      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x71c>
 8001dbe:	e089      	b.n	8001ed4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_RCC_OscConfig+0x764>)
 8001dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f94a 	bl	8001064 <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dd2:	e00f      	b.n	8001df4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f946 	bl	8001064 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d908      	bls.n	8001df4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e077      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
 8001de6:	bf00      	nop
 8001de8:	58024400 	.word	0x58024400
 8001dec:	fffffc0c 	.word	0xfffffc0c
 8001df0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e9      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x750>
 8001e00:	e068      	b.n	8001ed4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d031      	beq.n	8001e7a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d12a      	bne.n	8001e7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d122      	bne.n	8001e7a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d11a      	bne.n	8001e7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	0a5b      	lsrs	r3, r3, #9
 8001e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d111      	bne.n	8001e7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d108      	bne.n	8001e7a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	0e1b      	lsrs	r3, r3, #24
 8001e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e02b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e88:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d01f      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ea0:	f7ff f8e0 	bl	8001064 <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff f8dc 	bl	8001064 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d0f9      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_RCC_OscConfig+0x860>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ec0:	00d2      	lsls	r2, r2, #3
 8001ec2:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_RCC_OscConfig+0x85c>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3730      	adds	r7, #48	; 0x30
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	ffff0007 	.word	0xffff0007

08001ee8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e19c      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b8a      	ldr	r3, [pc, #552]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b87      	ldr	r3, [pc, #540]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 020f 	bic.w	r2, r3, #15
 8001f12:	4985      	ldr	r1, [pc, #532]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b83      	ldr	r3, [pc, #524]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e184      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	4b7b      	ldr	r3, [pc, #492]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f48:	4b78      	ldr	r3, [pc, #480]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4975      	ldr	r1, [pc, #468]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	4b70      	ldr	r3, [pc, #448]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d908      	bls.n	8001f88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	496a      	ldr	r1, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	4b64      	ldr	r3, [pc, #400]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d908      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fa4:	4b61      	ldr	r3, [pc, #388]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	495e      	ldr	r1, [pc, #376]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d908      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fd2:	4b56      	ldr	r3, [pc, #344]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4953      	ldr	r1, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b4d      	ldr	r3, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d908      	bls.n	8002012 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b4a      	ldr	r3, [pc, #296]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f023 020f 	bic.w	r2, r3, #15
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4947      	ldr	r1, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800200e:	4313      	orrs	r3, r2
 8002010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d055      	beq.n	80020ca <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800201e:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4940      	ldr	r1, [pc, #256]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800202c:	4313      	orrs	r3, r2
 800202e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002038:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d121      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0f6      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d115      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0ea      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0de      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0d6      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f023 0207 	bic.w	r2, r3, #7
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4925      	ldr	r1, [pc, #148]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209a:	f7fe ffe3 	bl	8001064 <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a2:	f7fe ffdf 	bl	8001064 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0be      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d1eb      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d208      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f023 020f 	bic.w	r2, r3, #15
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x244>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d214      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 020f 	bic.w	r2, r3, #15
 800210e:	4906      	ldr	r1, [pc, #24]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_RCC_ClockConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e086      	b.n	8002236 <HAL_RCC_ClockConfig+0x34e>
 8002128:	52002000 	.word	0x52002000
 800212c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	4b3f      	ldr	r3, [pc, #252]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002148:	429a      	cmp	r2, r3
 800214a:	d208      	bcs.n	800215e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4939      	ldr	r1, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800215a:	4313      	orrs	r3, r2
 800215c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d010      	beq.n	800218c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002176:	429a      	cmp	r2, r3
 8002178:	d208      	bcs.n	800218c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	492e      	ldr	r1, [pc, #184]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002188:	4313      	orrs	r3, r2
 800218a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d208      	bcs.n	80021ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4922      	ldr	r1, [pc, #136]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d208      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4917      	ldr	r1, [pc, #92]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80021e8:	f000 f834 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	4912      	ldr	r1, [pc, #72]	; (8002244 <HAL_RCC_ClockConfig+0x35c>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_RCC_ClockConfig+0x358>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_RCC_ClockConfig+0x35c>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x360>)
 800221e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x364>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x368>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fd9c 	bl	8000d68 <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	58024400 	.word	0x58024400
 8002244:	0800b448 	.word	0x0800b448
 8002248:	24000004 	.word	0x24000004
 800224c:	24000000 	.word	0x24000000
 8002250:	24000008 	.word	0x24000008

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225a:	4bb3      	ldr	r3, [pc, #716]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002262:	2b18      	cmp	r3, #24
 8002264:	f200 8155 	bhi.w	8002512 <HAL_RCC_GetSysClockFreq+0x2be>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_RCC_GetSysClockFreq+0x1c>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	080022d5 	.word	0x080022d5
 8002274:	08002513 	.word	0x08002513
 8002278:	08002513 	.word	0x08002513
 800227c:	08002513 	.word	0x08002513
 8002280:	08002513 	.word	0x08002513
 8002284:	08002513 	.word	0x08002513
 8002288:	08002513 	.word	0x08002513
 800228c:	08002513 	.word	0x08002513
 8002290:	080022fb 	.word	0x080022fb
 8002294:	08002513 	.word	0x08002513
 8002298:	08002513 	.word	0x08002513
 800229c:	08002513 	.word	0x08002513
 80022a0:	08002513 	.word	0x08002513
 80022a4:	08002513 	.word	0x08002513
 80022a8:	08002513 	.word	0x08002513
 80022ac:	08002513 	.word	0x08002513
 80022b0:	08002301 	.word	0x08002301
 80022b4:	08002513 	.word	0x08002513
 80022b8:	08002513 	.word	0x08002513
 80022bc:	08002513 	.word	0x08002513
 80022c0:	08002513 	.word	0x08002513
 80022c4:	08002513 	.word	0x08002513
 80022c8:	08002513 	.word	0x08002513
 80022cc:	08002513 	.word	0x08002513
 80022d0:	08002307 	.word	0x08002307
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d4:	4b94      	ldr	r3, [pc, #592]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022e0:	4b91      	ldr	r3, [pc, #580]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	4a90      	ldr	r2, [pc, #576]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022f2:	e111      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022f4:	4b8d      	ldr	r3, [pc, #564]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022f6:	61bb      	str	r3, [r7, #24]
      break;
 80022f8:	e10e      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80022fa:	4b8d      	ldr	r3, [pc, #564]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022fc:	61bb      	str	r3, [r7, #24]
      break;
 80022fe:	e10b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002302:	61bb      	str	r3, [r7, #24]
      break;
 8002304:	e108      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002310:	4b85      	ldr	r3, [pc, #532]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800231c:	4b82      	ldr	r3, [pc, #520]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002326:	4b80      	ldr	r3, [pc, #512]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232a:	08db      	lsrs	r3, r3, #3
 800232c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80e1 	beq.w	800250c <HAL_RCC_GetSysClockFreq+0x2b8>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	f000 8083 	beq.w	8002458 <HAL_RCC_GetSysClockFreq+0x204>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f200 80a1 	bhi.w	800249c <HAL_RCC_GetSysClockFreq+0x248>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x114>
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d056      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002366:	e099      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02d      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002374:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	4a6b      	ldr	r2, [pc, #428]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800239e:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023ce:	e087      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e8>
 80023de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e2:	4b51      	ldr	r3, [pc, #324]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ea:	ee07 3a90 	vmov	s15, r3
 80023ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002412:	e065      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002436:	ed97 6a02 	vldr	s12, [r7, #8]
 800243a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 800243e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002456:	e043      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002544 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247a:	ed97 6a02 	vldr	s12, [r7, #8]
 800247e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800249a:	e021      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002540 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024be:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	0a5b      	lsrs	r3, r3, #9
 80024e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ea:	3301      	adds	r3, #1
 80024ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80024fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
 8002508:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800250a:	e005      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
      break;
 8002510:	e002      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002514:	61bb      	str	r3, [r7, #24]
      break;
 8002516:	bf00      	nop
  }

  return sysclockfreq;
 8002518:	69bb      	ldr	r3, [r7, #24]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	58024400 	.word	0x58024400
 800252c:	03d09000 	.word	0x03d09000
 8002530:	003d0900 	.word	0x003d0900
 8002534:	007a1200 	.word	0x007a1200
 8002538:	46000000 	.word	0x46000000
 800253c:	4c742400 	.word	0x4c742400
 8002540:	4a742400 	.word	0x4a742400
 8002544:	4af42400 	.word	0x4af42400

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800254e:	f7ff fe81 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_GetHCLKFreq+0x50>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490f      	ldr	r1, [pc, #60]	; (800259c <HAL_RCC_GetHCLKFreq+0x54>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_RCC_GetHCLKFreq+0x50>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_GetHCLKFreq+0x54>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002584:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58024400 	.word	0x58024400
 800259c:	0800b448 	.word	0x0800b448
 80025a0:	24000004 	.word	0x24000004
 80025a4:	24000000 	.word	0x24000000

080025a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80025ac:	f7ff ffcc 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4904      	ldr	r1, [pc, #16]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	58024400 	.word	0x58024400
 80025d0:	0800b448 	.word	0x0800b448

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80025d8:	f7ff ffb6 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024400 	.word	0x58024400
 80025fc:	0800b448 	.word	0x0800b448

08002600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	223f      	movs	r2, #63	; 0x3f
 800260e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_GetClockConfig+0x7c>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 0207 	and.w	r2, r3, #7
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_RCC_GetClockConfig+0x7c>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <HAL_RCC_GetClockConfig+0x7c>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 020f 	and.w	r2, r3, #15
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_GetClockConfig+0x7c>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_RCC_GetClockConfig+0x7c>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_GetClockConfig+0x7c>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_RCC_GetClockConfig+0x7c>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_GetClockConfig+0x80>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 020f 	and.w	r2, r3, #15
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	58024400 	.word	0x58024400
 8002680:	52002000 	.word	0x52002000

08002684 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002688:	b0c8      	sub	sp, #288	; 0x120
 800268a:	af00      	add	r7, sp, #0
 800268c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002690:	2300      	movs	r3, #0
 8002692:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002696:	2300      	movs	r3, #0
 8002698:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800269c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80026a8:	2500      	movs	r5, #0
 80026aa:	ea54 0305 	orrs.w	r3, r4, r5
 80026ae:	d049      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026ba:	d02f      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026c0:	d828      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c6:	d01a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026cc:	d822      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d6:	d007      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026d8:	e01c      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026da:	4ba7      	ldr	r3, [pc, #668]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	4aa6      	ldr	r2, [pc, #664]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026e6:	e01a      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ec:	3308      	adds	r3, #8
 80026ee:	2102      	movs	r1, #2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fc43 	bl	8003f7c <RCCEx_PLL2_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026fc:	e00f      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80026fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002702:	3328      	adds	r3, #40	; 0x28
 8002704:	2102      	movs	r1, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fcea 	bl	80040e0 <RCCEx_PLL3_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002712:	e004      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800271c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800271e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002726:	4b94      	ldr	r3, [pc, #592]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800272e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002734:	4a90      	ldr	r2, [pc, #576]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002736:	430b      	orrs	r3, r1
 8002738:	6513      	str	r3, [r2, #80]	; 0x50
 800273a:	e003      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002740:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002750:	f04f 0900 	mov.w	r9, #0
 8002754:	ea58 0309 	orrs.w	r3, r8, r9
 8002758:	d047      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800275a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	2b04      	cmp	r3, #4
 8002762:	d82a      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	08002781 	.word	0x08002781
 8002770:	0800278f 	.word	0x0800278f
 8002774:	080027a5 	.word	0x080027a5
 8002778:	080027c3 	.word	0x080027c3
 800277c:	080027c3 	.word	0x080027c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002780:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	4a7c      	ldr	r2, [pc, #496]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800278c:	e01a      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002792:	3308      	adds	r3, #8
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fbf0 	bl	8003f7c <RCCEx_PLL2_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027a2:	e00f      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a8:	3328      	adds	r3, #40	; 0x28
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fc97 	bl	80040e0 <RCCEx_PLL3_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027b8:	e004      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027c0:	e000      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d0:	f023 0107 	bic.w	r1, r3, #7
 80027d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a67      	ldr	r2, [pc, #412]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027dc:	430b      	orrs	r3, r1
 80027de:	6513      	str	r3, [r2, #80]	; 0x50
 80027e0:	e003      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80027ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80027f6:	f04f 0b00 	mov.w	fp, #0
 80027fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80027fe:	d054      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800280a:	d036      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800280c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002810:	d82f      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002816:	d032      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281c:	d829      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800281e:	2bc0      	cmp	r3, #192	; 0xc0
 8002820:	d02f      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002822:	2bc0      	cmp	r3, #192	; 0xc0
 8002824:	d825      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d018      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800282a:	2b80      	cmp	r3, #128	; 0x80
 800282c:	d821      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	d007      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002836:	e01c      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	4a4e      	ldr	r2, [pc, #312]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002844:	e01e      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284a:	3308      	adds	r3, #8
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fb94 	bl	8003f7c <RCCEx_PLL2_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800285a:	e013      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800285c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002860:	3328      	adds	r3, #40	; 0x28
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f001 fc3b 	bl	80040e0 <RCCEx_PLL3_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002870:	e008      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002878:	e004      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002884:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	4a37      	ldr	r2, [pc, #220]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800289c:	430b      	orrs	r3, r1
 800289e:	6513      	str	r3, [r2, #80]	; 0x50
 80028a0:	e003      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80028aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80028b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80028c4:	460b      	mov	r3, r1
 80028c6:	4313      	orrs	r3, r2
 80028c8:	d05c      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80028ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028d4:	d03b      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80028da:	d834      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e0:	d037      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80028e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e6:	d82e      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028ec:	d033      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80028ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028f2:	d828      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f8:	d01a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d822      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002908:	d007      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800290a:	e01c      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002918:	e01e      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800291a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800291e:	3308      	adds	r3, #8
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fb2a 	bl	8003f7c <RCCEx_PLL2_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800292e:	e013      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002934:	3328      	adds	r3, #40	; 0x28
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f001 fbd1 	bl	80040e0 <RCCEx_PLL3_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002944:	e008      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800294c:	e004      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10d      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002964:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	4a02      	ldr	r2, [pc, #8]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002970:	430b      	orrs	r3, r1
 8002972:	6513      	str	r3, [r2, #80]	; 0x50
 8002974:	e006      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002976:	bf00      	nop
 8002978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002980:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800299a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d03a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80029a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	2b30      	cmp	r3, #48	; 0x30
 80029ac:	d01f      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80029ae:	2b30      	cmp	r3, #48	; 0x30
 80029b0:	d819      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d815      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d111      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4bae      	ldr	r3, [pc, #696]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	4aad      	ldr	r2, [pc, #692]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80029ce:	e011      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029d4:	3308      	adds	r3, #8
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 facf 	bl	8003f7c <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80029e4:	e006      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80029f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029fc:	4b9f      	ldr	r3, [pc, #636]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4a9c      	ldr	r2, [pc, #624]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a10:	e003      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002a26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	d051      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a44:	d035      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a4a:	d82e      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a50:	d031      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a56:	d828      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5c:	d01a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a62:	d822      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6c:	d007      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a70:	4b82      	ldr	r3, [pc, #520]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	4a81      	ldr	r2, [pc, #516]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a82:	3308      	adds	r3, #8
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fa78 	bl	8003f7c <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a92:	e011      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a98:	3328      	adds	r3, #40	; 0x28
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fb1f 	bl	80040e0 <RCCEx_PLL3_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e006      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ac0:	4b6e      	ldr	r3, [pc, #440]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ace:	4a6b      	ldr	r2, [pc, #428]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ad4:	e003      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ada:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002af4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002af8:	460b      	mov	r3, r1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	d053      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b08:	d033      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0e:	d82c      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b14:	d02f      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b1a:	d826      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b20:	d02b      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002b22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b26:	d820      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b2c:	d012      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b32:	d81a      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d022      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d115      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b42:	3308      	adds	r3, #8
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fa18 	bl	8003f7c <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b52:	e015      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b58:	3328      	adds	r3, #40	; 0x28
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fabf 	bl	80040e0 <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b68:	e00a      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b70:	e006      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b88:	4b3c      	ldr	r3, [pc, #240]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b96:	4a39      	ldr	r2, [pc, #228]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b9c:	e003      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002bb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bbc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	d060      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002bd2:	d039      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002bd4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002bd8:	d832      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bde:	d035      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be4:	d82c      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d031      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d826      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bf6:	d02d      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002bf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bfc:	d820      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c02:	d012      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c08:	d81a      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d024      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c12:	d115      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c18:	3308      	adds	r3, #8
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f9ad 	bl	8003f7c <RCCEx_PLL2_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c28:	e017      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c2e:	3328      	adds	r3, #40	; 0x28
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fa54 	bl	80040e0 <RCCEx_PLL3_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c3e:	e00c      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c46:	e008      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c48:	bf00      	nop
 8002c4a:	e006      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c4c:	bf00      	nop
 8002c4e:	e004      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c50:	bf00      	nop
 8002c52:	e002      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10e      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c72:	4a02      	ldr	r2, [pc, #8]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6593      	str	r3, [r2, #88]	; 0x58
 8002c78:	e006      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002c7a:	bf00      	nop
 8002c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	d037      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	d816      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d018      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc4:	4bc4      	ldr	r3, [pc, #784]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	4ac3      	ldr	r2, [pc, #780]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cd0:	e00f      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f94e 	bl	8003f7c <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cfa:	4bb7      	ldr	r3, [pc, #732]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d08:	4ab3      	ldr	r2, [pc, #716]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6513      	str	r3, [r2, #80]	; 0x50
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d039      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d81c      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d85 	.word	0x08002d85
 8002d4c:	08002d59 	.word	0x08002d59
 8002d50:	08002d67 	.word	0x08002d67
 8002d54:	08002d85 	.word	0x08002d85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d58:	4b9f      	ldr	r3, [pc, #636]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a9e      	ldr	r2, [pc, #632]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d64:	e00f      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f904 	bl	8003f7c <RCCEx_PLL2_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d7a:	e004      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d82:	e000      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d8e:	4b92      	ldr	r3, [pc, #584]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	f023 0103 	bic.w	r1, r3, #3
 8002d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9c:	4a8e      	ldr	r2, [pc, #568]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da2:	e003      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002da8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f000 8099 	beq.w	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dce:	4b83      	ldr	r3, [pc, #524]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a82      	ldr	r2, [pc, #520]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dda:	f7fe f943 	bl	8001064 <HAL_GetTick>
 8002dde:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de2:	e00b      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe f93e 	bl	8001064 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d903      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dfa:	e005      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dfc:	4b77      	ldr	r3, [pc, #476]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ed      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002e08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d173      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e10:	4b71      	ldr	r3, [pc, #452]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e1c:	4053      	eors	r3, r2
 8002e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d015      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e32:	4b69      	ldr	r3, [pc, #420]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a68      	ldr	r2, [pc, #416]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3e:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e4a:	4a63      	ldr	r2, [pc, #396]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5e:	d118      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe f900 	bl	8001064 <HAL_GetTick>
 8002e64:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e68:	e00d      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe f8fb 	bl	8001064 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d903      	bls.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002e84:	e005      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e86:	4b54      	ldr	r3, [pc, #336]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0eb      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002e92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d129      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eaa:	d10e      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002eac:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ebc:	091a      	lsrs	r2, r3, #4
 8002ebe:	4b48      	ldr	r3, [pc, #288]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	4a45      	ldr	r2, [pc, #276]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6113      	str	r3, [r2, #16]
 8002ec8:	e005      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002eca:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	4a42      	ldr	r2, [pc, #264]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ed0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ed4:	6113      	str	r3, [r2, #16]
 8002ed6:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ed8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	e008      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ef2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002ef6:	e003      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002efc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f002 0301 	and.w	r3, r2, #1
 8002f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f000 8090 	beq.w	8003042 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	2b28      	cmp	r3, #40	; 0x28
 8002f2c:	d870      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08003019 	.word	0x08003019
 8002f38:	08003011 	.word	0x08003011
 8002f3c:	08003011 	.word	0x08003011
 8002f40:	08003011 	.word	0x08003011
 8002f44:	08003011 	.word	0x08003011
 8002f48:	08003011 	.word	0x08003011
 8002f4c:	08003011 	.word	0x08003011
 8002f50:	08003011 	.word	0x08003011
 8002f54:	08002fe5 	.word	0x08002fe5
 8002f58:	08003011 	.word	0x08003011
 8002f5c:	08003011 	.word	0x08003011
 8002f60:	08003011 	.word	0x08003011
 8002f64:	08003011 	.word	0x08003011
 8002f68:	08003011 	.word	0x08003011
 8002f6c:	08003011 	.word	0x08003011
 8002f70:	08003011 	.word	0x08003011
 8002f74:	08002ffb 	.word	0x08002ffb
 8002f78:	08003011 	.word	0x08003011
 8002f7c:	08003011 	.word	0x08003011
 8002f80:	08003011 	.word	0x08003011
 8002f84:	08003011 	.word	0x08003011
 8002f88:	08003011 	.word	0x08003011
 8002f8c:	08003011 	.word	0x08003011
 8002f90:	08003011 	.word	0x08003011
 8002f94:	08003019 	.word	0x08003019
 8002f98:	08003011 	.word	0x08003011
 8002f9c:	08003011 	.word	0x08003011
 8002fa0:	08003011 	.word	0x08003011
 8002fa4:	08003011 	.word	0x08003011
 8002fa8:	08003011 	.word	0x08003011
 8002fac:	08003011 	.word	0x08003011
 8002fb0:	08003011 	.word	0x08003011
 8002fb4:	08003019 	.word	0x08003019
 8002fb8:	08003011 	.word	0x08003011
 8002fbc:	08003011 	.word	0x08003011
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08003011 	.word	0x08003011
 8002fc8:	08003011 	.word	0x08003011
 8002fcc:	08003011 	.word	0x08003011
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003019 	.word	0x08003019
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	58024800 	.word	0x58024800
 8002fe0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe8:	3308      	adds	r3, #8
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 ffc5 	bl	8003f7c <RCCEx_PLL2_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ff8:	e00f      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ffe:	3328      	adds	r3, #40	; 0x28
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f001 f86c 	bl	80040e0 <RCCEx_PLL3_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800300e:	e004      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003016:	e000      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003022:	4bc0      	ldr	r3, [pc, #768]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800302a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	4abc      	ldr	r2, [pc, #752]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003034:	430b      	orrs	r3, r1
 8003036:	6553      	str	r3, [r2, #84]	; 0x54
 8003038:	e003      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800303e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f002 0302 	and.w	r3, r2, #2
 800304e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003058:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800305c:	460b      	mov	r3, r1
 800305e:	4313      	orrs	r3, r2
 8003060:	d043      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306a:	2b05      	cmp	r3, #5
 800306c:	d824      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	080030c1 	.word	0x080030c1
 8003078:	0800308d 	.word	0x0800308d
 800307c:	080030a3 	.word	0x080030a3
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030c1 	.word	0x080030c1
 8003088:	080030c1 	.word	0x080030c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800308c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003090:	3308      	adds	r3, #8
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f000 ff71 	bl	8003f7c <RCCEx_PLL2_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030a0:	e00f      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a6:	3328      	adds	r3, #40	; 0x28
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 f818 	bl	80040e0 <RCCEx_PLL3_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030b6:	e004      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80030c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030ca:	4b96      	ldr	r3, [pc, #600]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f023 0107 	bic.w	r1, r3, #7
 80030d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030da:	4a92      	ldr	r2, [pc, #584]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	6553      	str	r3, [r2, #84]	; 0x54
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f002 0304 	and.w	r3, r2, #4
 80030f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003100:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003104:	460b      	mov	r3, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	d043      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800310a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800310e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003112:	2b05      	cmp	r3, #5
 8003114:	d824      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003169 	.word	0x08003169
 8003120:	08003135 	.word	0x08003135
 8003124:	0800314b 	.word	0x0800314b
 8003128:	08003169 	.word	0x08003169
 800312c:	08003169 	.word	0x08003169
 8003130:	08003169 	.word	0x08003169
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003138:	3308      	adds	r3, #8
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f000 ff1d 	bl	8003f7c <RCCEx_PLL2_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003148:	e00f      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800314a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314e:	3328      	adds	r3, #40	; 0x28
 8003150:	2101      	movs	r1, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f000 ffc4 	bl	80040e0 <RCCEx_PLL3_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800315e:	e004      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003172:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f023 0107 	bic.w	r1, r3, #7
 800317a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003182:	4a68      	ldr	r2, [pc, #416]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003184:	430b      	orrs	r3, r1
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
 8003188:	e003      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800318e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f002 0320 	and.w	r3, r2, #32
 800319e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031ac:	460b      	mov	r3, r1
 80031ae:	4313      	orrs	r3, r2
 80031b0:	d055      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031be:	d033      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c4:	d82c      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d02f      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d826      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031d6:	d02b      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80031d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031dc:	d820      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e2:	d012      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e8:	d81a      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d022      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80031ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f2:	d115      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f8:	3308      	adds	r3, #8
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 febd 	bl	8003f7c <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003208:	e015      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800320a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320e:	3328      	adds	r3, #40	; 0x28
 8003210:	2102      	movs	r1, #2
 8003212:	4618      	mov	r0, r3
 8003214:	f000 ff64 	bl	80040e0 <RCCEx_PLL3_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800321e:	e00a      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003226:	e006      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003228:	bf00      	nop
 800322a:	e004      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800322c:	bf00      	nop
 800322e:	e002      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003230:	bf00      	nop
 8003232:	e000      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003236:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800324e:	4a35      	ldr	r2, [pc, #212]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003250:	430b      	orrs	r3, r1
 8003252:	6553      	str	r3, [r2, #84]	; 0x54
 8003254:	e003      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003274:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003278:	460b      	mov	r3, r1
 800327a:	4313      	orrs	r3, r2
 800327c:	d058      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800328a:	d033      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800328c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003290:	d82c      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003296:	d02f      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d826      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800329e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a2:	d02b      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80032a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a8:	d820      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ae:	d012      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	d81a      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d022      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d115      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c4:	3308      	adds	r3, #8
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fe57 	bl	8003f7c <RCCEx_PLL2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032d4:	e015      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032da:	3328      	adds	r3, #40	; 0x28
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fefe 	bl	80040e0 <RCCEx_PLL3_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032ea:	e00a      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032f2:	e006      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032f4:	bf00      	nop
 80032f6:	e004      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032f8:	bf00      	nop
 80032fa:	e002      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003302:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10e      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800331a:	4a02      	ldr	r2, [pc, #8]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800331c:	430b      	orrs	r3, r1
 800331e:	6593      	str	r3, [r2, #88]	; 0x58
 8003320:	e006      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003322:	bf00      	nop
 8003324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800332c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003340:	2300      	movs	r3, #0
 8003342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003346:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800334a:	460b      	mov	r3, r1
 800334c:	4313      	orrs	r3, r2
 800334e:	d055      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003354:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003358:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800335c:	d033      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800335e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003362:	d82c      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d02f      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800336a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336e:	d826      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003370:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003374:	d02b      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003376:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800337a:	d820      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800337c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003380:	d012      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003386:	d81a      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d022      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800338c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003390:	d115      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003396:	3308      	adds	r3, #8
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fdee 	bl	8003f7c <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033a6:	e015      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ac:	3328      	adds	r3, #40	; 0x28
 80033ae:	2102      	movs	r1, #2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fe95 	bl	80040e0 <RCCEx_PLL3_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033bc:	e00a      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033c4:	e006      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033c6:	bf00      	nop
 80033c8:	e004      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033ca:	bf00      	nop
 80033cc:	e002      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80033d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033dc:	4ba1      	ldr	r3, [pc, #644]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80033e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033ec:	4a9d      	ldr	r2, [pc, #628]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033ee:	430b      	orrs	r3, r1
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
 80033f2:	e003      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 0308 	and.w	r3, r2, #8
 8003408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003412:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	d01e      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800341c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800342a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342e:	3328      	adds	r3, #40	; 0x28
 8003430:	2102      	movs	r1, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fe54 	bl	80040e0 <RCCEx_PLL3_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003444:	4b87      	ldr	r3, [pc, #540]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800344c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003454:	4a83      	ldr	r2, [pc, #524]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003456:	430b      	orrs	r3, r1
 8003458:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f002 0310 	and.w	r3, r2, #16
 8003466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800346a:	2300      	movs	r3, #0
 800346c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003470:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003474:	460b      	mov	r3, r1
 8003476:	4313      	orrs	r3, r2
 8003478:	d01e      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800347a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003486:	d10c      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348c:	3328      	adds	r3, #40	; 0x28
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fe25 	bl	80040e0 <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034b2:	4a6c      	ldr	r2, [pc, #432]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80034d2:	460b      	mov	r3, r1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	d03e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034e4:	d022      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80034e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ea:	d81b      	bhi.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d00b      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80034f6:	e015      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034fc:	3308      	adds	r3, #8
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fd3b 	bl	8003f7c <RCCEx_PLL2_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800350c:	e00f      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800350e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003512:	3328      	adds	r3, #40	; 0x28
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fde2 	bl	80040e0 <RCCEx_PLL3_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003522:	e004      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800352c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003536:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800353e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003546:	4a47      	ldr	r2, [pc, #284]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6593      	str	r3, [r2, #88]	; 0x58
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003552:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003562:	67bb      	str	r3, [r7, #120]	; 0x78
 8003564:	2300      	movs	r3, #0
 8003566:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003568:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800356c:	460b      	mov	r3, r1
 800356e:	4313      	orrs	r3, r2
 8003570:	d03b      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800357e:	d01f      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003584:	d818      	bhi.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358a:	d003      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800358c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003590:	d007      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003592:	e011      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003594:	4b33      	ldr	r3, [pc, #204]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	4a32      	ldr	r2, [pc, #200]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800359a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80035a0:	e00f      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a6:	3328      	adds	r3, #40	; 0x28
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fd98 	bl	80040e0 <RCCEx_PLL3_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80035b6:	e004      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035be:	e000      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80035c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	4a22      	ldr	r2, [pc, #136]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6553      	str	r3, [r2, #84]	; 0x54
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80035f6:	673b      	str	r3, [r7, #112]	; 0x70
 80035f8:	2300      	movs	r3, #0
 80035fa:	677b      	str	r3, [r7, #116]	; 0x74
 80035fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d034      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d007      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003616:	e011      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4a11      	ldr	r2, [pc, #68]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800361e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003624:	e00e      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362a:	3308      	adds	r3, #8
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fca4 	bl	8003f7c <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800364e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	4a02      	ldr	r2, [pc, #8]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800365c:	430b      	orrs	r3, r1
 800365e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800366c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800367c:	66bb      	str	r3, [r7, #104]	; 0x68
 800367e:	2300      	movs	r3, #0
 8003680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003682:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d00c      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800368c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003690:	3328      	adds	r3, #40	; 0x28
 8003692:	2102      	movs	r1, #2
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fd23 	bl	80040e0 <RCCEx_PLL3_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80036b2:	663b      	str	r3, [r7, #96]	; 0x60
 80036b4:	2300      	movs	r3, #0
 80036b6:	667b      	str	r3, [r7, #100]	; 0x64
 80036b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80036bc:	460b      	mov	r3, r1
 80036be:	4313      	orrs	r3, r2
 80036c0:	d038      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ce:	d018      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80036d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d4:	d811      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80036d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036da:	d014      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80036dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e0:	d80b      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d011      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d106      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ec:	4bc3      	ldr	r3, [pc, #780]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4ac2      	ldr	r2, [pc, #776]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036f8:	e008      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003700:	e004      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800370a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003714:	4bb9      	ldr	r3, [pc, #740]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800371c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	4ab5      	ldr	r2, [pc, #724]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003726:	430b      	orrs	r3, r1
 8003728:	6553      	str	r3, [r2, #84]	; 0x54
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003730:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003740:	65bb      	str	r3, [r7, #88]	; 0x58
 8003742:	2300      	movs	r3, #0
 8003744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003746:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d009      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003750:	4baa      	ldr	r3, [pc, #680]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800375e:	4aa7      	ldr	r2, [pc, #668]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003770:	653b      	str	r3, [r7, #80]	; 0x50
 8003772:	2300      	movs	r3, #0
 8003774:	657b      	str	r3, [r7, #84]	; 0x54
 8003776:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003780:	4b9e      	ldr	r3, [pc, #632]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a9b      	ldr	r2, [pc, #620]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003790:	430b      	orrs	r3, r1
 8003792:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80037a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a2:	2300      	movs	r3, #0
 80037a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80037aa:	460b      	mov	r3, r1
 80037ac:	4313      	orrs	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80037b0:	4b92      	ldr	r3, [pc, #584]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037be:	4a8f      	ldr	r2, [pc, #572]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
 80037d2:	2300      	movs	r3, #0
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
 80037d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80037da:	460b      	mov	r3, r1
 80037dc:	4313      	orrs	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037e0:	4b86      	ldr	r3, [pc, #536]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4a85      	ldr	r2, [pc, #532]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037ea:	6113      	str	r3, [r2, #16]
 80037ec:	4b83      	ldr	r3, [pc, #524]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ee:	6919      	ldr	r1, [r3, #16]
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037f8:	4a80      	ldr	r2, [pc, #512]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037fa:	430b      	orrs	r3, r1
 80037fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
 800380c:	2300      	movs	r3, #0
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003810:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003814:	460b      	mov	r3, r1
 8003816:	4313      	orrs	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800381a:	4b78      	ldr	r3, [pc, #480]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	4a74      	ldr	r2, [pc, #464]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800382a:	430b      	orrs	r3, r1
 800382c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800382e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
 800383c:	2300      	movs	r3, #0
 800383e:	637b      	str	r3, [r7, #52]	; 0x34
 8003840:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800384a:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385a:	4a68      	ldr	r2, [pc, #416]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800385c:	430b      	orrs	r3, r1
 800385e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	2100      	movs	r1, #0
 800386a:	62b9      	str	r1, [r7, #40]	; 0x28
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003872:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003876:	460b      	mov	r3, r1
 8003878:	4313      	orrs	r3, r2
 800387a:	d011      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003880:	3308      	adds	r3, #8
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fb79 	bl	8003f7c <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003890:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800389c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80038a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	2100      	movs	r1, #0
 80038aa:	6239      	str	r1, [r7, #32]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038b6:	460b      	mov	r3, r1
 80038b8:	4313      	orrs	r3, r2
 80038ba:	d011      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c0:	3308      	adds	r3, #8
 80038c2:	2101      	movs	r1, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fb59 	bl	8003f7c <RCCEx_PLL2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	2100      	movs	r1, #0
 80038ea:	61b9      	str	r1, [r7, #24]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038f6:	460b      	mov	r3, r1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	d011      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003900:	3308      	adds	r3, #8
 8003902:	2102      	movs	r1, #2
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fb39 	bl	8003f7c <RCCEx_PLL2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003910:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800391c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	2100      	movs	r1, #0
 800392a:	6139      	str	r1, [r7, #16]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d011      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003940:	3328      	adds	r3, #40	; 0x28
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fbcb 	bl	80040e0 <RCCEx_PLL3_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003950:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800395c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	2100      	movs	r1, #0
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d011      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800397c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003980:	3328      	adds	r3, #40	; 0x28
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fbab 	bl	80040e0 <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800399c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80039a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	2100      	movs	r1, #0
 80039aa:	6039      	str	r1, [r7, #0]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d011      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c0:	3328      	adds	r3, #40	; 0x28
 80039c2:	2102      	movs	r1, #2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fb8b 	bl	80040e0 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80039d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80039e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	58024400 	.word	0x58024400

08003a00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003a04:	f7fe fda0 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	58024400 	.word	0x58024400
 8003a28:	0800b448 	.word	0x0800b448

08003a2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a34:	4ba1      	ldr	r3, [pc, #644]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a3e:	4b9f      	ldr	r3, [pc, #636]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	0b1b      	lsrs	r3, r3, #12
 8003a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a4a:	4b9c      	ldr	r3, [pc, #624]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a56:	4b99      	ldr	r3, [pc, #612]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8111 	beq.w	8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	f000 8083 	beq.w	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	f200 80a1 	bhi.w	8003bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d056      	beq.n	8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a96:	e099      	b.n	8003bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a98:	4b88      	ldr	r3, [pc, #544]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02d      	beq.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003aa4:	4b85      	ldr	r3, [pc, #532]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	4a84      	ldr	r2, [pc, #528]	; (8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b7b      	ldr	r3, [pc, #492]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003afe:	e087      	b.n	8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b12:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b42:	e065      	b.n	8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b86:	e043      	b.n	8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9a:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bca:	e021      	b.n	8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bde:	4b37      	ldr	r3, [pc, #220]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003c10:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	0a5b      	lsrs	r3, r3, #9
 8003c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	ee17 2a90 	vmov	r2, s15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c64:	ee17 2a90 	vmov	r2, s15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	0e1b      	lsrs	r3, r3, #24
 8003c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c92:	ee17 2a90 	vmov	r2, s15
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c9a:	e008      	b.n	8003cae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	03d09000 	.word	0x03d09000
 8003cc4:	46000000 	.word	0x46000000
 8003cc8:	4c742400 	.word	0x4c742400
 8003ccc:	4a742400 	.word	0x4a742400
 8003cd0:	4af42400 	.word	0x4af42400

08003cd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cdc:	4ba1      	ldr	r3, [pc, #644]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ce6:	4b9f      	ldr	r3, [pc, #636]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	0d1b      	lsrs	r3, r3, #20
 8003cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003cf2:	4b9c      	ldr	r3, [pc, #624]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cfe:	4b99      	ldr	r3, [pc, #612]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	08db      	lsrs	r3, r3, #3
 8003d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8111 	beq.w	8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f000 8083 	beq.w	8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	f200 80a1 	bhi.w	8003e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d056      	beq.n	8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d3e:	e099      	b.n	8003e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d40:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02d      	beq.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d4c:	4b85      	ldr	r3, [pc, #532]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	4a84      	ldr	r2, [pc, #528]	; (8003f68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b7b      	ldr	r3, [pc, #492]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003da6:	e087      	b.n	8003eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dea:	e065      	b.n	8003eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2e:	e043      	b.n	8003eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e72:	e021      	b.n	8003eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003eb8:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	0a5b      	lsrs	r3, r3, #9
 8003ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ede:	ee17 2a90 	vmov	r2, s15
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef0:	ee07 3a90 	vmov	s15, r3
 8003ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0c:	ee17 2a90 	vmov	r2, s15
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	0e1b      	lsrs	r3, r3, #24
 8003f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f3a:	ee17 2a90 	vmov	r2, s15
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f42:	e008      	b.n	8003f56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
}
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
 8003f68:	03d09000 	.word	0x03d09000
 8003f6c:	46000000 	.word	0x46000000
 8003f70:	4c742400 	.word	0x4c742400
 8003f74:	4a742400 	.word	0x4a742400
 8003f78:	4af42400 	.word	0x4af42400

08003f7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f8a:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d101      	bne.n	8003f9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e099      	b.n	80040ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f9a:	4b4f      	ldr	r3, [pc, #316]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a4e      	ldr	r2, [pc, #312]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8003fa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa6:	f7fd f85d 	bl	8001064 <HAL_GetTick>
 8003faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fae:	f7fd f859 	bl	8001064 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e086      	b.n	80040ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fc0:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fcc:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	031b      	lsls	r3, r3, #12
 8003fda:	493f      	ldr	r1, [pc, #252]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	628b      	str	r3, [r1, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	025b      	lsls	r3, r3, #9
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	3b01      	subs	r3, #1
 800400a:	061b      	lsls	r3, r3, #24
 800400c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004010:	4931      	ldr	r1, [pc, #196]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004016:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	492d      	ldr	r1, [pc, #180]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	f023 0220 	bic.w	r2, r3, #32
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4928      	ldr	r1, [pc, #160]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800403a:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004040:	f023 0310 	bic.w	r3, r3, #16
 8004044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <RCCEx_PLL2_Config+0x160>)
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	69d2      	ldr	r2, [r2, #28]
 8004052:	00d2      	lsls	r2, r2, #3
 8004054:	4920      	ldr	r1, [pc, #128]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800405a:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004060:	f043 0310 	orr.w	r3, r3, #16
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004078:	e00f      	b.n	800409a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d106      	bne.n	800408e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800408c:	e005      	b.n	800409a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 8004094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004098:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 80040a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a6:	f7fc ffdd 	bl	8001064 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040ae:	f7fc ffd9 	bl	8001064 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e006      	b.n	80040ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <RCCEx_PLL2_Config+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
 80040dc:	ffff0007 	.word	0xffff0007

080040e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040ee:	4b53      	ldr	r3, [pc, #332]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d101      	bne.n	80040fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e099      	b.n	8004232 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040fe:	4b4f      	ldr	r3, [pc, #316]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a4e      	ldr	r2, [pc, #312]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410a:	f7fc ffab 	bl	8001064 <HAL_GetTick>
 800410e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004110:	e008      	b.n	8004124 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004112:	f7fc ffa7 	bl	8001064 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e086      	b.n	8004232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004124:	4b45      	ldr	r3, [pc, #276]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f0      	bne.n	8004112 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004130:	4b42      	ldr	r3, [pc, #264]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	051b      	lsls	r3, r3, #20
 800413e:	493f      	ldr	r1, [pc, #252]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004140:	4313      	orrs	r3, r2
 8004142:	628b      	str	r3, [r1, #40]	; 0x28
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	3b01      	subs	r3, #1
 800414a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	3b01      	subs	r3, #1
 8004154:	025b      	lsls	r3, r3, #9
 8004156:	b29b      	uxth	r3, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	3b01      	subs	r3, #1
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	3b01      	subs	r3, #1
 800416e:	061b      	lsls	r3, r3, #24
 8004170:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004174:	4931      	ldr	r1, [pc, #196]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	492d      	ldr	r1, [pc, #180]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800418c:	4b2b      	ldr	r3, [pc, #172]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	4928      	ldr	r1, [pc, #160]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800419e:	4b27      	ldr	r3, [pc, #156]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	4a26      	ldr	r2, [pc, #152]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ae:	4b24      	ldr	r3, [pc, #144]	; (8004240 <RCCEx_PLL3_Config+0x160>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	69d2      	ldr	r2, [r2, #28]
 80041b6:	00d2      	lsls	r2, r2, #3
 80041b8:	4920      	ldr	r1, [pc, #128]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041be:	4b1f      	ldr	r3, [pc, #124]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041d0:	4b1a      	ldr	r3, [pc, #104]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041dc:	e00f      	b.n	80041fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041f0:	e005      	b.n	80041fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	4a11      	ldr	r2, [pc, #68]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 80041f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0e      	ldr	r2, [pc, #56]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420a:	f7fc ff2b 	bl	8001064 <HAL_GetTick>
 800420e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004210:	e008      	b.n	8004224 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004212:	f7fc ff27 	bl	8001064 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e006      	b.n	8004232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <RCCEx_PLL3_Config+0x15c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	58024400 	.word	0x58024400
 8004240:	ffff0007 	.word	0xffff0007

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e049      	b.n	80042ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f841 	bl	80042f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 fa00 	bl	8004688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d001      	beq.n	8004320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e054      	b.n	80043ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a26      	ldr	r2, [pc, #152]	; (80043d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x80>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434a:	d01d      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x80>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a22      	ldr	r2, [pc, #136]	; (80043dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x80>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <HAL_TIM_Base_Start_IT+0xe4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x80>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d115      	bne.n	80043b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_TIM_Base_Start_IT+0xec>)
 8004390:	4013      	ands	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d015      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0xbe>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a0:	d011      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b2:	e008      	b.n	80043c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e000      	b.n	80043c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40010400 	.word	0x40010400
 80043ec:	40001800 	.word	0x40001800
 80043f0:	40014000 	.word	0x40014000
 80043f4:	00010007 	.word	0x00010007

080043f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0202 	mvn.w	r2, #2
 8004424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f905 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8f7 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f908 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0204 	mvn.w	r2, #4
 8004478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8db 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8cd 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f8de 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0208 	mvn.w	r2, #8
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2204      	movs	r2, #4
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f8b1 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f8a3 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8b4 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b10      	cmp	r3, #16
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0210 	mvn.w	r2, #16
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2208      	movs	r2, #8
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f887 	bl	800464a <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f879 	bl	8004636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f88a 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10e      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0201 	mvn.w	r2, #1
 8004574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc fb5a 	bl	8000c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f914 	bl	80047d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d10e      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f907 	bl	80047e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f838 	bl	8004672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0220 	mvn.w	r2, #32
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f8c7 	bl	80047bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a40      	ldr	r2, [pc, #256]	; (800479c <TIM_Base_SetConfig+0x114>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a6:	d00f      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3d      	ldr	r2, [pc, #244]	; (80047a0 <TIM_Base_SetConfig+0x118>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <TIM_Base_SetConfig+0x11c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <TIM_Base_SetConfig+0x120>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3a      	ldr	r2, [pc, #232]	; (80047ac <TIM_Base_SetConfig+0x124>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2f      	ldr	r2, [pc, #188]	; (800479c <TIM_Base_SetConfig+0x114>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01f      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d01b      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2c      	ldr	r2, [pc, #176]	; (80047a0 <TIM_Base_SetConfig+0x118>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d017      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2b      	ldr	r2, [pc, #172]	; (80047a4 <TIM_Base_SetConfig+0x11c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2a      	ldr	r2, [pc, #168]	; (80047a8 <TIM_Base_SetConfig+0x120>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00f      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a29      	ldr	r2, [pc, #164]	; (80047ac <TIM_Base_SetConfig+0x124>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a28      	ldr	r2, [pc, #160]	; (80047b0 <TIM_Base_SetConfig+0x128>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a27      	ldr	r2, [pc, #156]	; (80047b4 <TIM_Base_SetConfig+0x12c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_Base_SetConfig+0x9a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a26      	ldr	r2, [pc, #152]	; (80047b8 <TIM_Base_SetConfig+0x130>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d108      	bne.n	8004734 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a10      	ldr	r2, [pc, #64]	; (800479c <TIM_Base_SetConfig+0x114>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00f      	beq.n	8004780 <TIM_Base_SetConfig+0xf8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a12      	ldr	r2, [pc, #72]	; (80047ac <TIM_Base_SetConfig+0x124>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0xf8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <TIM_Base_SetConfig+0x128>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0xf8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <TIM_Base_SetConfig+0x12c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0xf8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a0f      	ldr	r2, [pc, #60]	; (80047b8 <TIM_Base_SetConfig+0x130>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d103      	bne.n	8004788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	615a      	str	r2, [r3, #20]
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800

080047bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e042      	b.n	8004890 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fc fa39 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2224      	movs	r2, #36	; 0x24
 8004826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f82c 	bl	8004898 <UART_SetConfig>
 8004840:	4603      	mov	r3, r0
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e022      	b.n	8004890 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fe8c 	bl	8005570 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004866:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004876:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 ff13 	bl	80056b4 <UART_CheckIdleState>
 800488e:	4603      	mov	r3, r0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800489c:	b092      	sub	sp, #72	; 0x48
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4313      	orrs	r3, r2
 80048be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4bbe      	ldr	r3, [pc, #760]	; (8004bc0 <UART_SetConfig+0x328>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4ab3      	ldr	r2, [pc, #716]	; (8004bc4 <UART_SetConfig+0x32c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004900:	4313      	orrs	r3, r2
 8004902:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	4baf      	ldr	r3, [pc, #700]	; (8004bc8 <UART_SetConfig+0x330>)
 800490c:	4013      	ands	r3, r2
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004914:	430b      	orrs	r3, r1
 8004916:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	f023 010f 	bic.w	r1, r3, #15
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4aa6      	ldr	r2, [pc, #664]	; (8004bcc <UART_SetConfig+0x334>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d177      	bne.n	8004a28 <UART_SetConfig+0x190>
 8004938:	4ba5      	ldr	r3, [pc, #660]	; (8004bd0 <UART_SetConfig+0x338>)
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004940:	2b28      	cmp	r3, #40	; 0x28
 8004942:	d86d      	bhi.n	8004a20 <UART_SetConfig+0x188>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <UART_SetConfig+0xb4>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	080049f1 	.word	0x080049f1
 8004950:	08004a21 	.word	0x08004a21
 8004954:	08004a21 	.word	0x08004a21
 8004958:	08004a21 	.word	0x08004a21
 800495c:	08004a21 	.word	0x08004a21
 8004960:	08004a21 	.word	0x08004a21
 8004964:	08004a21 	.word	0x08004a21
 8004968:	08004a21 	.word	0x08004a21
 800496c:	080049f9 	.word	0x080049f9
 8004970:	08004a21 	.word	0x08004a21
 8004974:	08004a21 	.word	0x08004a21
 8004978:	08004a21 	.word	0x08004a21
 800497c:	08004a21 	.word	0x08004a21
 8004980:	08004a21 	.word	0x08004a21
 8004984:	08004a21 	.word	0x08004a21
 8004988:	08004a21 	.word	0x08004a21
 800498c:	08004a01 	.word	0x08004a01
 8004990:	08004a21 	.word	0x08004a21
 8004994:	08004a21 	.word	0x08004a21
 8004998:	08004a21 	.word	0x08004a21
 800499c:	08004a21 	.word	0x08004a21
 80049a0:	08004a21 	.word	0x08004a21
 80049a4:	08004a21 	.word	0x08004a21
 80049a8:	08004a21 	.word	0x08004a21
 80049ac:	08004a09 	.word	0x08004a09
 80049b0:	08004a21 	.word	0x08004a21
 80049b4:	08004a21 	.word	0x08004a21
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	08004a21 	.word	0x08004a21
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a11 	.word	0x08004a11
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a21 	.word	0x08004a21
 80049d8:	08004a21 	.word	0x08004a21
 80049dc:	08004a21 	.word	0x08004a21
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a21 	.word	0x08004a21
 80049e8:	08004a21 	.word	0x08004a21
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f6:	e326      	b.n	8005046 <UART_SetConfig+0x7ae>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fe:	e322      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a06:	e31e      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0e:	e31a      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a10:	2320      	movs	r3, #32
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e316      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e312      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e30e      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a69      	ldr	r2, [pc, #420]	; (8004bd4 <UART_SetConfig+0x33c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d130      	bne.n	8004a94 <UART_SetConfig+0x1fc>
 8004a32:	4b67      	ldr	r3, [pc, #412]	; (8004bd0 <UART_SetConfig+0x338>)
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d826      	bhi.n	8004a8c <UART_SetConfig+0x1f4>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x1ac>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a6d 	.word	0x08004a6d
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a62:	e2f0      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a64:	2304      	movs	r3, #4
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6a:	e2ec      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a72:	e2e8      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7a:	e2e4      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a82:	e2e0      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a84:	2340      	movs	r3, #64	; 0x40
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e2dc      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e2d8      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a4f      	ldr	r2, [pc, #316]	; (8004bd8 <UART_SetConfig+0x340>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d130      	bne.n	8004b00 <UART_SetConfig+0x268>
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <UART_SetConfig+0x338>)
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d826      	bhi.n	8004af8 <UART_SetConfig+0x260>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x218>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ac9 	.word	0x08004ac9
 8004ab4:	08004ad1 	.word	0x08004ad1
 8004ab8:	08004ad9 	.word	0x08004ad9
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004ae9 	.word	0x08004ae9
 8004ac4:	08004af1 	.word	0x08004af1
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ace:	e2ba      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad6:	e2b6      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ade:	e2b2      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae6:	e2ae      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aee:	e2aa      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004af0:	2340      	movs	r3, #64	; 0x40
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af6:	e2a6      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e2a2      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a35      	ldr	r2, [pc, #212]	; (8004bdc <UART_SetConfig+0x344>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d130      	bne.n	8004b6c <UART_SetConfig+0x2d4>
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <UART_SetConfig+0x338>)
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d826      	bhi.n	8004b64 <UART_SetConfig+0x2cc>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0x284>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b35 	.word	0x08004b35
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	08004b45 	.word	0x08004b45
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b5d 	.word	0x08004b5d
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3a:	e284      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b42:	e280      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b44:	2308      	movs	r3, #8
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4a:	e27c      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b52:	e278      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b54:	2320      	movs	r3, #32
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5a:	e274      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b62:	e270      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e26c      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <UART_SetConfig+0x348>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d142      	bne.n	8004bfc <UART_SetConfig+0x364>
 8004b76:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <UART_SetConfig+0x338>)
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b05      	cmp	r3, #5
 8004b80:	d838      	bhi.n	8004bf4 <UART_SetConfig+0x35c>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <UART_SetConfig+0x2f0>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004ba1 	.word	0x08004ba1
 8004b8c:	08004ba9 	.word	0x08004ba9
 8004b90:	08004bb1 	.word	0x08004bb1
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004be5 	.word	0x08004be5
 8004b9c:	08004bed 	.word	0x08004bed
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ba6:	e24e      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bae:	e24a      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bb6:	e246      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bbe:	e242      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004bc0:	cfff69f3 	.word	0xcfff69f3
 8004bc4:	58000c00 	.word	0x58000c00
 8004bc8:	11fff4ff 	.word	0x11fff4ff
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	40004400 	.word	0x40004400
 8004bd8:	40004800 	.word	0x40004800
 8004bdc:	40004c00 	.word	0x40004c00
 8004be0:	40005000 	.word	0x40005000
 8004be4:	2320      	movs	r3, #32
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bea:	e22c      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004bec:	2340      	movs	r3, #64	; 0x40
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf2:	e228      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e224      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4ab1      	ldr	r2, [pc, #708]	; (8004ec8 <UART_SetConfig+0x630>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d176      	bne.n	8004cf4 <UART_SetConfig+0x45c>
 8004c06:	4bb1      	ldr	r3, [pc, #708]	; (8004ecc <UART_SetConfig+0x634>)
 8004c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c0e:	2b28      	cmp	r3, #40	; 0x28
 8004c10:	d86c      	bhi.n	8004cec <UART_SetConfig+0x454>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x380>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004cbd 	.word	0x08004cbd
 8004c1c:	08004ced 	.word	0x08004ced
 8004c20:	08004ced 	.word	0x08004ced
 8004c24:	08004ced 	.word	0x08004ced
 8004c28:	08004ced 	.word	0x08004ced
 8004c2c:	08004ced 	.word	0x08004ced
 8004c30:	08004ced 	.word	0x08004ced
 8004c34:	08004ced 	.word	0x08004ced
 8004c38:	08004cc5 	.word	0x08004cc5
 8004c3c:	08004ced 	.word	0x08004ced
 8004c40:	08004ced 	.word	0x08004ced
 8004c44:	08004ced 	.word	0x08004ced
 8004c48:	08004ced 	.word	0x08004ced
 8004c4c:	08004ced 	.word	0x08004ced
 8004c50:	08004ced 	.word	0x08004ced
 8004c54:	08004ced 	.word	0x08004ced
 8004c58:	08004ccd 	.word	0x08004ccd
 8004c5c:	08004ced 	.word	0x08004ced
 8004c60:	08004ced 	.word	0x08004ced
 8004c64:	08004ced 	.word	0x08004ced
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004ced 	.word	0x08004ced
 8004c70:	08004ced 	.word	0x08004ced
 8004c74:	08004ced 	.word	0x08004ced
 8004c78:	08004cd5 	.word	0x08004cd5
 8004c7c:	08004ced 	.word	0x08004ced
 8004c80:	08004ced 	.word	0x08004ced
 8004c84:	08004ced 	.word	0x08004ced
 8004c88:	08004ced 	.word	0x08004ced
 8004c8c:	08004ced 	.word	0x08004ced
 8004c90:	08004ced 	.word	0x08004ced
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004cdd 	.word	0x08004cdd
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004ced 	.word	0x08004ced
 8004ca8:	08004ced 	.word	0x08004ced
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
 8004cb4:	08004ced 	.word	0x08004ced
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cc2:	e1c0      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cca:	e1bc      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e1b8      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e1b4      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004cdc:	2320      	movs	r3, #32
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e1b0      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ce4:	2340      	movs	r3, #64	; 0x40
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e1ac      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e1a8      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a75      	ldr	r2, [pc, #468]	; (8004ed0 <UART_SetConfig+0x638>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d130      	bne.n	8004d60 <UART_SetConfig+0x4c8>
 8004cfe:	4b73      	ldr	r3, [pc, #460]	; (8004ecc <UART_SetConfig+0x634>)
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d826      	bhi.n	8004d58 <UART_SetConfig+0x4c0>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0x478>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d29 	.word	0x08004d29
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d39 	.word	0x08004d39
 8004d1c:	08004d41 	.word	0x08004d41
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2e:	e18a      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d30:	2304      	movs	r3, #4
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d36:	e186      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d38:	2308      	movs	r3, #8
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3e:	e182      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d40:	2310      	movs	r3, #16
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d46:	e17e      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d48:	2320      	movs	r3, #32
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e17a      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e176      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e172      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a5b      	ldr	r2, [pc, #364]	; (8004ed4 <UART_SetConfig+0x63c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d130      	bne.n	8004dcc <UART_SetConfig+0x534>
 8004d6a:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <UART_SetConfig+0x634>)
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d826      	bhi.n	8004dc4 <UART_SetConfig+0x52c>
 8004d76:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <UART_SetConfig+0x4e4>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004d95 	.word	0x08004d95
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004da5 	.word	0x08004da5
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004dbd 	.word	0x08004dbd
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9a:	e154      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da2:	e150      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004daa:	e14c      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db2:	e148      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004db4:	2320      	movs	r3, #32
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dba:	e144      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004dbc:	2340      	movs	r3, #64	; 0x40
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc2:	e140      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dca:	e13c      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a41      	ldr	r2, [pc, #260]	; (8004ed8 <UART_SetConfig+0x640>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	f040 8082 	bne.w	8004edc <UART_SetConfig+0x644>
 8004dd8:	4b3c      	ldr	r3, [pc, #240]	; (8004ecc <UART_SetConfig+0x634>)
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de0:	2b28      	cmp	r3, #40	; 0x28
 8004de2:	d86d      	bhi.n	8004ec0 <UART_SetConfig+0x628>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <UART_SetConfig+0x554>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004e91 	.word	0x08004e91
 8004df0:	08004ec1 	.word	0x08004ec1
 8004df4:	08004ec1 	.word	0x08004ec1
 8004df8:	08004ec1 	.word	0x08004ec1
 8004dfc:	08004ec1 	.word	0x08004ec1
 8004e00:	08004ec1 	.word	0x08004ec1
 8004e04:	08004ec1 	.word	0x08004ec1
 8004e08:	08004ec1 	.word	0x08004ec1
 8004e0c:	08004e99 	.word	0x08004e99
 8004e10:	08004ec1 	.word	0x08004ec1
 8004e14:	08004ec1 	.word	0x08004ec1
 8004e18:	08004ec1 	.word	0x08004ec1
 8004e1c:	08004ec1 	.word	0x08004ec1
 8004e20:	08004ec1 	.word	0x08004ec1
 8004e24:	08004ec1 	.word	0x08004ec1
 8004e28:	08004ec1 	.word	0x08004ec1
 8004e2c:	08004ea1 	.word	0x08004ea1
 8004e30:	08004ec1 	.word	0x08004ec1
 8004e34:	08004ec1 	.word	0x08004ec1
 8004e38:	08004ec1 	.word	0x08004ec1
 8004e3c:	08004ec1 	.word	0x08004ec1
 8004e40:	08004ec1 	.word	0x08004ec1
 8004e44:	08004ec1 	.word	0x08004ec1
 8004e48:	08004ec1 	.word	0x08004ec1
 8004e4c:	08004ea9 	.word	0x08004ea9
 8004e50:	08004ec1 	.word	0x08004ec1
 8004e54:	08004ec1 	.word	0x08004ec1
 8004e58:	08004ec1 	.word	0x08004ec1
 8004e5c:	08004ec1 	.word	0x08004ec1
 8004e60:	08004ec1 	.word	0x08004ec1
 8004e64:	08004ec1 	.word	0x08004ec1
 8004e68:	08004ec1 	.word	0x08004ec1
 8004e6c:	08004eb1 	.word	0x08004eb1
 8004e70:	08004ec1 	.word	0x08004ec1
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004ec1 	.word	0x08004ec1
 8004e7c:	08004ec1 	.word	0x08004ec1
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec1 	.word	0x08004ec1
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e96:	e0d6      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9e:	e0d2      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea6:	e0ce      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eae:	e0ca      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb6:	e0c6      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004eb8:	2340      	movs	r3, #64	; 0x40
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ebe:	e0c2      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e0be      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004ec8:	40011400 	.word	0x40011400
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	40007800 	.word	0x40007800
 8004ed4:	40007c00 	.word	0x40007c00
 8004ed8:	40011800 	.word	0x40011800
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4aad      	ldr	r2, [pc, #692]	; (8005198 <UART_SetConfig+0x900>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d176      	bne.n	8004fd4 <UART_SetConfig+0x73c>
 8004ee6:	4bad      	ldr	r3, [pc, #692]	; (800519c <UART_SetConfig+0x904>)
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eee:	2b28      	cmp	r3, #40	; 0x28
 8004ef0:	d86c      	bhi.n	8004fcc <UART_SetConfig+0x734>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <UART_SetConfig+0x660>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f9d 	.word	0x08004f9d
 8004efc:	08004fcd 	.word	0x08004fcd
 8004f00:	08004fcd 	.word	0x08004fcd
 8004f04:	08004fcd 	.word	0x08004fcd
 8004f08:	08004fcd 	.word	0x08004fcd
 8004f0c:	08004fcd 	.word	0x08004fcd
 8004f10:	08004fcd 	.word	0x08004fcd
 8004f14:	08004fcd 	.word	0x08004fcd
 8004f18:	08004fa5 	.word	0x08004fa5
 8004f1c:	08004fcd 	.word	0x08004fcd
 8004f20:	08004fcd 	.word	0x08004fcd
 8004f24:	08004fcd 	.word	0x08004fcd
 8004f28:	08004fcd 	.word	0x08004fcd
 8004f2c:	08004fcd 	.word	0x08004fcd
 8004f30:	08004fcd 	.word	0x08004fcd
 8004f34:	08004fcd 	.word	0x08004fcd
 8004f38:	08004fad 	.word	0x08004fad
 8004f3c:	08004fcd 	.word	0x08004fcd
 8004f40:	08004fcd 	.word	0x08004fcd
 8004f44:	08004fcd 	.word	0x08004fcd
 8004f48:	08004fcd 	.word	0x08004fcd
 8004f4c:	08004fcd 	.word	0x08004fcd
 8004f50:	08004fcd 	.word	0x08004fcd
 8004f54:	08004fcd 	.word	0x08004fcd
 8004f58:	08004fb5 	.word	0x08004fb5
 8004f5c:	08004fcd 	.word	0x08004fcd
 8004f60:	08004fcd 	.word	0x08004fcd
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08004fcd 	.word	0x08004fcd
 8004f6c:	08004fcd 	.word	0x08004fcd
 8004f70:	08004fcd 	.word	0x08004fcd
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	08004fbd 	.word	0x08004fbd
 8004f7c:	08004fcd 	.word	0x08004fcd
 8004f80:	08004fcd 	.word	0x08004fcd
 8004f84:	08004fcd 	.word	0x08004fcd
 8004f88:	08004fcd 	.word	0x08004fcd
 8004f8c:	08004fcd 	.word	0x08004fcd
 8004f90:	08004fcd 	.word	0x08004fcd
 8004f94:	08004fcd 	.word	0x08004fcd
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e050      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e04c      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e048      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e044      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e040      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e03c      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e038      	b.n	8005046 <UART_SetConfig+0x7ae>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a71      	ldr	r2, [pc, #452]	; (80051a0 <UART_SetConfig+0x908>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d130      	bne.n	8005040 <UART_SetConfig+0x7a8>
 8004fde:	4b6f      	ldr	r3, [pc, #444]	; (800519c <UART_SetConfig+0x904>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d826      	bhi.n	8005038 <UART_SetConfig+0x7a0>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x758>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005009 	.word	0x08005009
 8004ff4:	08005011 	.word	0x08005011
 8004ff8:	08005019 	.word	0x08005019
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005029 	.word	0x08005029
 8005004:	08005031 	.word	0x08005031
 8005008:	2302      	movs	r3, #2
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e01a      	b.n	8005046 <UART_SetConfig+0x7ae>
 8005010:	2304      	movs	r3, #4
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e016      	b.n	8005046 <UART_SetConfig+0x7ae>
 8005018:	2308      	movs	r3, #8
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e012      	b.n	8005046 <UART_SetConfig+0x7ae>
 8005020:	2310      	movs	r3, #16
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e00e      	b.n	8005046 <UART_SetConfig+0x7ae>
 8005028:	2320      	movs	r3, #32
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e00a      	b.n	8005046 <UART_SetConfig+0x7ae>
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e006      	b.n	8005046 <UART_SetConfig+0x7ae>
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e002      	b.n	8005046 <UART_SetConfig+0x7ae>
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a55      	ldr	r2, [pc, #340]	; (80051a0 <UART_SetConfig+0x908>)
 800504c:	4293      	cmp	r3, r2
 800504e:	f040 80f8 	bne.w	8005242 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005052:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005056:	2b20      	cmp	r3, #32
 8005058:	dc46      	bgt.n	80050e8 <UART_SetConfig+0x850>
 800505a:	2b02      	cmp	r3, #2
 800505c:	db75      	blt.n	800514a <UART_SetConfig+0x8b2>
 800505e:	3b02      	subs	r3, #2
 8005060:	2b1e      	cmp	r3, #30
 8005062:	d872      	bhi.n	800514a <UART_SetConfig+0x8b2>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0x7d4>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	080050ef 	.word	0x080050ef
 8005070:	0800514b 	.word	0x0800514b
 8005074:	080050f7 	.word	0x080050f7
 8005078:	0800514b 	.word	0x0800514b
 800507c:	0800514b 	.word	0x0800514b
 8005080:	0800514b 	.word	0x0800514b
 8005084:	08005107 	.word	0x08005107
 8005088:	0800514b 	.word	0x0800514b
 800508c:	0800514b 	.word	0x0800514b
 8005090:	0800514b 	.word	0x0800514b
 8005094:	0800514b 	.word	0x0800514b
 8005098:	0800514b 	.word	0x0800514b
 800509c:	0800514b 	.word	0x0800514b
 80050a0:	0800514b 	.word	0x0800514b
 80050a4:	08005117 	.word	0x08005117
 80050a8:	0800514b 	.word	0x0800514b
 80050ac:	0800514b 	.word	0x0800514b
 80050b0:	0800514b 	.word	0x0800514b
 80050b4:	0800514b 	.word	0x0800514b
 80050b8:	0800514b 	.word	0x0800514b
 80050bc:	0800514b 	.word	0x0800514b
 80050c0:	0800514b 	.word	0x0800514b
 80050c4:	0800514b 	.word	0x0800514b
 80050c8:	0800514b 	.word	0x0800514b
 80050cc:	0800514b 	.word	0x0800514b
 80050d0:	0800514b 	.word	0x0800514b
 80050d4:	0800514b 	.word	0x0800514b
 80050d8:	0800514b 	.word	0x0800514b
 80050dc:	0800514b 	.word	0x0800514b
 80050e0:	0800514b 	.word	0x0800514b
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d02a      	beq.n	8005142 <UART_SetConfig+0x8aa>
 80050ec:	e02d      	b.n	800514a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050ee:	f7fe fc87 	bl	8003a00 <HAL_RCCEx_GetD3PCLK1Freq>
 80050f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050f4:	e02f      	b.n	8005156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fc96 	bl	8003a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005104:	e027      	b.n	8005156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005106:	f107 0318 	add.w	r3, r7, #24
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fde2 	bl	8003cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005114:	e01f      	b.n	8005156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <UART_SetConfig+0x904>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005122:	4b1e      	ldr	r3, [pc, #120]	; (800519c <UART_SetConfig+0x904>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	08db      	lsrs	r3, r3, #3
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <UART_SetConfig+0x90c>)
 800512e:	fa22 f303 	lsr.w	r3, r2, r3
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005134:	e00f      	b.n	8005156 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005136:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <UART_SetConfig+0x90c>)
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800513a:	e00c      	b.n	8005156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <UART_SetConfig+0x910>)
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005140:	e009      	b.n	8005156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005148:	e005      	b.n	8005156 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005154:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 81ee 	beq.w	800553a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <UART_SetConfig+0x914>)
 8005164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005168:	461a      	mov	r2, r3
 800516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005170:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	429a      	cmp	r2, r3
 8005180:	d305      	bcc.n	800518e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	429a      	cmp	r2, r3
 800518c:	d910      	bls.n	80051b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005194:	e1d1      	b.n	800553a <UART_SetConfig+0xca2>
 8005196:	bf00      	nop
 8005198:	40011c00 	.word	0x40011c00
 800519c:	58024400 	.word	0x58024400
 80051a0:	58000c00 	.word	0x58000c00
 80051a4:	03d09000 	.word	0x03d09000
 80051a8:	003d0900 	.word	0x003d0900
 80051ac:	0800b458 	.word	0x0800b458
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	2200      	movs	r2, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	60fa      	str	r2, [r7, #12]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	4ac0      	ldr	r2, [pc, #768]	; (80054c0 <UART_SetConfig+0xc28>)
 80051be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2200      	movs	r2, #0
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051d2:	f7fb f92d 	bl	8000430 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	020b      	lsls	r3, r1, #8
 80051e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051ec:	0202      	lsls	r2, r0, #8
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	6849      	ldr	r1, [r1, #4]
 80051f2:	0849      	lsrs	r1, r1, #1
 80051f4:	2000      	movs	r0, #0
 80051f6:	460c      	mov	r4, r1
 80051f8:	4605      	mov	r5, r0
 80051fa:	eb12 0804 	adds.w	r8, r2, r4
 80051fe:	eb43 0905 	adc.w	r9, r3, r5
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	469a      	mov	sl, r3
 800520a:	4693      	mov	fp, r2
 800520c:	4652      	mov	r2, sl
 800520e:	465b      	mov	r3, fp
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fb f90c 	bl	8000430 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005226:	d308      	bcc.n	800523a <UART_SetConfig+0x9a2>
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522e:	d204      	bcs.n	800523a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e17f      	b.n	800553a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005240:	e17b      	b.n	800553a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524a:	f040 80bd 	bne.w	80053c8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800524e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005252:	2b20      	cmp	r3, #32
 8005254:	dc48      	bgt.n	80052e8 <UART_SetConfig+0xa50>
 8005256:	2b00      	cmp	r3, #0
 8005258:	db7b      	blt.n	8005352 <UART_SetConfig+0xaba>
 800525a:	2b20      	cmp	r3, #32
 800525c:	d879      	bhi.n	8005352 <UART_SetConfig+0xaba>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x9cc>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	080052ef 	.word	0x080052ef
 8005268:	080052f7 	.word	0x080052f7
 800526c:	08005353 	.word	0x08005353
 8005270:	08005353 	.word	0x08005353
 8005274:	080052ff 	.word	0x080052ff
 8005278:	08005353 	.word	0x08005353
 800527c:	08005353 	.word	0x08005353
 8005280:	08005353 	.word	0x08005353
 8005284:	0800530f 	.word	0x0800530f
 8005288:	08005353 	.word	0x08005353
 800528c:	08005353 	.word	0x08005353
 8005290:	08005353 	.word	0x08005353
 8005294:	08005353 	.word	0x08005353
 8005298:	08005353 	.word	0x08005353
 800529c:	08005353 	.word	0x08005353
 80052a0:	08005353 	.word	0x08005353
 80052a4:	0800531f 	.word	0x0800531f
 80052a8:	08005353 	.word	0x08005353
 80052ac:	08005353 	.word	0x08005353
 80052b0:	08005353 	.word	0x08005353
 80052b4:	08005353 	.word	0x08005353
 80052b8:	08005353 	.word	0x08005353
 80052bc:	08005353 	.word	0x08005353
 80052c0:	08005353 	.word	0x08005353
 80052c4:	08005353 	.word	0x08005353
 80052c8:	08005353 	.word	0x08005353
 80052cc:	08005353 	.word	0x08005353
 80052d0:	08005353 	.word	0x08005353
 80052d4:	08005353 	.word	0x08005353
 80052d8:	08005353 	.word	0x08005353
 80052dc:	08005353 	.word	0x08005353
 80052e0:	08005353 	.word	0x08005353
 80052e4:	08005345 	.word	0x08005345
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d02e      	beq.n	800534a <UART_SetConfig+0xab2>
 80052ec:	e031      	b.n	8005352 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7fd f95b 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 80052f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052f4:	e033      	b.n	800535e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f6:	f7fd f96d 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 80052fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052fc:	e02f      	b.n	800535e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fb92 	bl	8003a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800530c:	e027      	b.n	800535e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800530e:	f107 0318 	add.w	r3, r7, #24
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fcde 	bl	8003cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800531c:	e01f      	b.n	800535e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531e:	4b69      	ldr	r3, [pc, #420]	; (80054c4 <UART_SetConfig+0xc2c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800532a:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <UART_SetConfig+0xc2c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	08db      	lsrs	r3, r3, #3
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	4a64      	ldr	r2, [pc, #400]	; (80054c8 <UART_SetConfig+0xc30>)
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800533c:	e00f      	b.n	800535e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800533e:	4b62      	ldr	r3, [pc, #392]	; (80054c8 <UART_SetConfig+0xc30>)
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005342:	e00c      	b.n	800535e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005344:	4b61      	ldr	r3, [pc, #388]	; (80054cc <UART_SetConfig+0xc34>)
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800535c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80ea 	beq.w	800553a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	4a55      	ldr	r2, [pc, #340]	; (80054c0 <UART_SetConfig+0xc28>)
 800536c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005370:	461a      	mov	r2, r3
 8005372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005374:	fbb3 f3f2 	udiv	r3, r3, r2
 8005378:	005a      	lsls	r2, r3, #1
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	441a      	add	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d916      	bls.n	80053c0 <UART_SetConfig+0xb28>
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d212      	bcs.n	80053c0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	b29b      	uxth	r3, r3
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053b2:	4313      	orrs	r3, r2
 80053b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e0bc      	b.n	800553a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80053c6:	e0b8      	b.n	800553a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	dc4b      	bgt.n	8005468 <UART_SetConfig+0xbd0>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f2c0 8087 	blt.w	80054e4 <UART_SetConfig+0xc4c>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	f200 8084 	bhi.w	80054e4 <UART_SetConfig+0xc4c>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0xb4c>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	0800546f 	.word	0x0800546f
 80053e8:	08005477 	.word	0x08005477
 80053ec:	080054e5 	.word	0x080054e5
 80053f0:	080054e5 	.word	0x080054e5
 80053f4:	0800547f 	.word	0x0800547f
 80053f8:	080054e5 	.word	0x080054e5
 80053fc:	080054e5 	.word	0x080054e5
 8005400:	080054e5 	.word	0x080054e5
 8005404:	0800548f 	.word	0x0800548f
 8005408:	080054e5 	.word	0x080054e5
 800540c:	080054e5 	.word	0x080054e5
 8005410:	080054e5 	.word	0x080054e5
 8005414:	080054e5 	.word	0x080054e5
 8005418:	080054e5 	.word	0x080054e5
 800541c:	080054e5 	.word	0x080054e5
 8005420:	080054e5 	.word	0x080054e5
 8005424:	0800549f 	.word	0x0800549f
 8005428:	080054e5 	.word	0x080054e5
 800542c:	080054e5 	.word	0x080054e5
 8005430:	080054e5 	.word	0x080054e5
 8005434:	080054e5 	.word	0x080054e5
 8005438:	080054e5 	.word	0x080054e5
 800543c:	080054e5 	.word	0x080054e5
 8005440:	080054e5 	.word	0x080054e5
 8005444:	080054e5 	.word	0x080054e5
 8005448:	080054e5 	.word	0x080054e5
 800544c:	080054e5 	.word	0x080054e5
 8005450:	080054e5 	.word	0x080054e5
 8005454:	080054e5 	.word	0x080054e5
 8005458:	080054e5 	.word	0x080054e5
 800545c:	080054e5 	.word	0x080054e5
 8005460:	080054e5 	.word	0x080054e5
 8005464:	080054d7 	.word	0x080054d7
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d037      	beq.n	80054dc <UART_SetConfig+0xc44>
 800546c:	e03a      	b.n	80054e4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546e:	f7fd f89b 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8005472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005474:	e03c      	b.n	80054f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005476:	f7fd f8ad 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 800547a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800547c:	e038      	b.n	80054f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800547e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fad2 	bl	8003a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800548c:	e030      	b.n	80054f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800548e:	f107 0318 	add.w	r3, r7, #24
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe fc1e 	bl	8003cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800549c:	e028      	b.n	80054f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <UART_SetConfig+0xc2c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d012      	beq.n	80054d0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <UART_SetConfig+0xc2c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	08db      	lsrs	r3, r3, #3
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <UART_SetConfig+0xc30>)
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054bc:	e018      	b.n	80054f0 <UART_SetConfig+0xc58>
 80054be:	bf00      	nop
 80054c0:	0800b458 	.word	0x0800b458
 80054c4:	58024400 	.word	0x58024400
 80054c8:	03d09000 	.word	0x03d09000
 80054cc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80054d0:	4b24      	ldr	r3, [pc, #144]	; (8005564 <UART_SetConfig+0xccc>)
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054d4:	e00c      	b.n	80054f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054d6:	4b24      	ldr	r3, [pc, #144]	; (8005568 <UART_SetConfig+0xcd0>)
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054da:	e009      	b.n	80054f0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054e2:	e005      	b.n	80054f0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054ee:	bf00      	nop
    }

    if (pclk != 0U)
 80054f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d021      	beq.n	800553a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	4a1c      	ldr	r2, [pc, #112]	; (800556c <UART_SetConfig+0xcd4>)
 80054fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005500:	461a      	mov	r2, r3
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	fbb3 f2f2 	udiv	r2, r3, r2
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	441a      	add	r2, r3
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b0f      	cmp	r3, #15
 800551e:	d909      	bls.n	8005534 <UART_SetConfig+0xc9c>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005526:	d205      	bcs.n	8005534 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	b29a      	uxth	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60da      	str	r2, [r3, #12]
 8005532:	e002      	b.n	800553a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2201      	movs	r2, #1
 800553e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2201      	movs	r2, #1
 8005546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2200      	movs	r2, #0
 8005554:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005556:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800555a:	4618      	mov	r0, r3
 800555c:	3748      	adds	r7, #72	; 0x48
 800555e:	46bd      	mov	sp, r7
 8005560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005564:	03d09000 	.word	0x03d09000
 8005568:	003d0900 	.word	0x003d0900
 800556c:	0800b458 	.word	0x0800b458

08005570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01a      	beq.n	8005686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	d10a      	bne.n	8005686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
  }
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b098      	sub	sp, #96	; 0x60
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056c4:	f7fb fcce 	bl	8001064 <HAL_GetTick>
 80056c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d12f      	bne.n	8005738 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e0:	2200      	movs	r2, #0
 80056e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f88e 	bl	8005808 <UART_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d022      	beq.n	8005738 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005706:	653b      	str	r3, [r7, #80]	; 0x50
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005710:	647b      	str	r3, [r7, #68]	; 0x44
 8005712:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e6      	bne.n	80056f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e063      	b.n	8005800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d149      	bne.n	80057da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574e:	2200      	movs	r2, #0
 8005750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f857 	bl	8005808 <UART_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d03c      	beq.n	80057da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	623b      	str	r3, [r7, #32]
   return(result);
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577e:	633b      	str	r3, [r7, #48]	; 0x30
 8005780:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e6      	bne.n	8005760 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b2:	61fa      	str	r2, [r7, #28]
 80057b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	69b9      	ldr	r1, [r7, #24]
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	617b      	str	r3, [r7, #20]
   return(result);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e012      	b.n	8005800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3758      	adds	r7, #88	; 0x58
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005818:	e049      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d045      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fb fc1f 	bl	8001064 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <UART_WaitOnFlagUntilTimeout+0x30>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e048      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d031      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b08      	cmp	r3, #8
 8005856:	d110      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2208      	movs	r2, #8
 800585e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f839 	bl	80058d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2208      	movs	r2, #8
 800586a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e029      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005888:	d111      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f81f 	bl	80058d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e00f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4013      	ands	r3, r2
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	bf0c      	ite	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	2300      	movne	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d0a6      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b095      	sub	sp, #84	; 0x54
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005900:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e6      	bne.n	80058e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3308      	adds	r3, #8
 8005918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	61fb      	str	r3, [r7, #28]
   return(result);
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	4b1e      	ldr	r3, [pc, #120]	; (80059a0 <UART_EndRxTransfer+0xc8>)
 8005926:	4013      	ands	r3, r2
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d118      	bne.n	8005980 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	60bb      	str	r3, [r7, #8]
   return(result);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f023 0310 	bic.w	r3, r3, #16
 8005962:	647b      	str	r3, [r7, #68]	; 0x44
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	613b      	str	r3, [r7, #16]
   return(result);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005994:	bf00      	nop
 8005996:	3754      	adds	r7, #84	; 0x54
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	effffffe 	.word	0xeffffffe

080059a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_UARTEx_DisableFifoMode+0x16>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e027      	b.n	8005a0a <HAL_UARTEx_DisableFifoMode+0x66>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2224      	movs	r2, #36	; 0x24
 80059c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e02d      	b.n	8005a8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2224      	movs	r2, #36	; 0x24
 8005a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f850 	bl	8005b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e02d      	b.n	8005b06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2224      	movs	r2, #36	; 0x24
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f812 	bl	8005b10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b30:	e031      	b.n	8005b96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b32:	2310      	movs	r3, #16
 8005b34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b36:	2310      	movs	r3, #16
 8005b38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	0e5b      	lsrs	r3, r3, #25
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	0f5b      	lsrs	r3, r3, #29
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	7b3a      	ldrb	r2, [r7, #12]
 8005b5e:	4911      	ldr	r1, [pc, #68]	; (8005ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b60:	5c8a      	ldrb	r2, [r1, r2]
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b66:	7b3a      	ldrb	r2, [r7, #12]
 8005b68:	490f      	ldr	r1, [pc, #60]	; (8005ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	7b7a      	ldrb	r2, [r7, #13]
 8005b7c:	4909      	ldr	r1, [pc, #36]	; (8005ba4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b7e:	5c8a      	ldrb	r2, [r1, r2]
 8005b80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b84:	7b7a      	ldrb	r2, [r7, #13]
 8005b86:	4908      	ldr	r1, [pc, #32]	; (8005ba8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	0800b470 	.word	0x0800b470
 8005ba8:	0800b478 	.word	0x0800b478

08005bac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f103 0208 	add.w	r2, r3, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f103 0208 	add.w	r2, r3, #8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f103 0208 	add.w	r2, r3, #8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d103      	bne.n	8005c26 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e00c      	b.n	8005c40 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e002      	b.n	8005c34 <vListInsert+0x2e>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d2f6      	bcs.n	8005c2e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6892      	ldr	r2, [r2, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6852      	ldr	r2, [r2, #4]
 8005c98:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d103      	bne.n	8005cac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1e5a      	subs	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueGenericReset+0x2e>
        __asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
    }
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d052      	beq.n	8005da6 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d04e      	beq.n	8005da6 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	2100      	movs	r1, #0
 8005d12:	fba3 2302 	umull	r2, r3, r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d000      	beq.n	8005d1c <xQueueGenericReset+0x50>
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d141      	bne.n	8005da6 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8005d22:	f001 fed7 	bl	8007ad4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	6939      	ldr	r1, [r7, #16]
 8005d30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	441a      	add	r2, r3
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	3b01      	subs	r3, #1
 8005d54:	6939      	ldr	r1, [r7, #16]
 8005d56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	441a      	add	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	22ff      	movs	r2, #255	; 0xff
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	22ff      	movs	r2, #255	; 0xff
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3310      	adds	r3, #16
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 ff87 	bl	8006c98 <xTaskRemoveFromEventList>
 8005d8a:	e009      	b.n	8005da0 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	3310      	adds	r3, #16
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff ff0b 	bl	8005bac <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	3324      	adds	r3, #36	; 0x24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff ff06 	bl	8005bac <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005da0:	f001 fec8 	bl	8007b34 <vPortExitCritical>
 8005da4:	e001      	b.n	8005daa <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueGenericReset+0xfa>
        __asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60bb      	str	r3, [r7, #8]
    }
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005dc6:	697b      	ldr	r3, [r7, #20]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02e      	beq.n	8005e46 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005de8:	2100      	movs	r1, #0
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	fba3 2302 	umull	r2, r3, r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d000      	beq.n	8005df8 <xQueueGenericCreate+0x28>
 8005df6:	2101      	movs	r1, #1
 8005df8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d123      	bne.n	8005e46 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005e06:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005e0a:	d81c      	bhi.n	8005e46 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	3350      	adds	r3, #80	; 0x50
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 ff86 	bl	8007d2c <pvPortMalloc>
 8005e20:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01c      	beq.n	8005e62 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3350      	adds	r3, #80	; 0x50
 8005e30:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e32:	79fa      	ldrb	r2, [r7, #7]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f814 	bl	8005e6c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005e44:	e00d      	b.n	8005e62 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <xQueueGenericCreate+0x92>
        __asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	613b      	str	r3, [r7, #16]
    }
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005e62:	69fb      	ldr	r3, [r7, #28]
    }
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e002      	b.n	8005e8e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	69b8      	ldr	r0, [r7, #24]
 8005e9e:	f7ff ff15 	bl	8005ccc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	2073      	movs	r0, #115	; 0x73
 8005eb2:	f003 feaf 	bl	8009c14 <SEGGER_SYSVIEW_RecordU32x3>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b08f      	sub	sp, #60	; 0x3c
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <xQueueReceive+0x30>
        __asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	623b      	str	r3, [r7, #32]
    }
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <xQueueReceive+0x3e>
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <xQueueReceive+0x42>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueReceive+0x44>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xQueueReceive+0x5e>
        __asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	61fb      	str	r3, [r7, #28]
    }
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f1e:	f001 f901 	bl	8007124 <xTaskGetSchedulerState>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <xQueueReceive+0x6e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <xQueueReceive+0x72>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueReceive+0x74>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueReceive+0x8e>
        __asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61bb      	str	r3, [r7, #24]
    }
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f4e:	f001 fdc1 	bl	8007ad4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d024      	beq.n	8005fa8 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f62:	f000 f8b3 	bl	80060cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f004 fb81 	bl	800a670 <SEGGER_SYSVIEW_ShrinkId>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	2000      	movs	r0, #0
 8005f72:	f004 fb7d 	bl	800a670 <SEGGER_SYSVIEW_ShrinkId>
 8005f76:	4602      	mov	r2, r0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	9100      	str	r1, [sp, #0]
 8005f7e:	4621      	mov	r1, r4
 8005f80:	205c      	movs	r0, #92	; 0x5c
 8005f82:	f003 febd 	bl	8009d00 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	3310      	adds	r3, #16
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fe7c 	bl	8006c98 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005fa0:	f001 fdc8 	bl	8007b34 <vPortExitCritical>
                return pdPASS;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e08a      	b.n	80060be <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d113      	bne.n	8005fd6 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005fae:	f001 fdc1 	bl	8007b34 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f004 fb5b 	bl	800a670 <SEGGER_SYSVIEW_ShrinkId>
 8005fba:	4604      	mov	r4, r0
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f004 fb57 	bl	800a670 <SEGGER_SYSVIEW_ShrinkId>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	9100      	str	r1, [sp, #0]
 8005fca:	4621      	mov	r1, r4
 8005fcc:	205c      	movs	r0, #92	; 0x5c
 8005fce:	f003 fe97 	bl	8009d00 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e073      	b.n	80060be <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005fdc:	f107 0310 	add.w	r3, r7, #16
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 ff33 	bl	8006e4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005fea:	f001 fda3 	bl	8007b34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005fee:	f000 fb61 	bl	80066b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005ff2:	f001 fd6f 	bl	8007ad4 <vPortEnterCritical>
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ffc:	b25b      	sxtb	r3, r3
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d103      	bne.n	800600c <xQueueReceive+0x14c>
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006012:	b25b      	sxtb	r3, r3
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d103      	bne.n	8006022 <xQueueReceive+0x162>
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006022:	f001 fd87 	bl	8007b34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006026:	1d3a      	adds	r2, r7, #4
 8006028:	f107 0310 	add.w	r3, r7, #16
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f000 ff22 	bl	8006e78 <xTaskCheckForTimeOut>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d124      	bne.n	8006084 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800603a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603c:	f000 f8be 	bl	80061bc <prvIsQueueEmpty>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d018      	beq.n	8006078 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	3324      	adds	r3, #36	; 0x24
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fdb6 	bl	8006bc0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006056:	f000 f85f 	bl	8006118 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800605a:	f000 fb39 	bl	80066d0 <xTaskResumeAll>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f af74 	bne.w	8005f4e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006066:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <xQueueReceive+0x208>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	e76a      	b.n	8005f4e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607a:	f000 f84d 	bl	8006118 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800607e:	f000 fb27 	bl	80066d0 <xTaskResumeAll>
 8006082:	e764      	b.n	8005f4e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006086:	f000 f847 	bl	8006118 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800608a:	f000 fb21 	bl	80066d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800608e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006090:	f000 f894 	bl	80061bc <prvIsQueueEmpty>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	f43f af59 	beq.w	8005f4e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 fae6 	bl	800a670 <SEGGER_SYSVIEW_ShrinkId>
 80060a4:	4604      	mov	r4, r0
 80060a6:	2000      	movs	r0, #0
 80060a8:	f004 fae2 	bl	800a670 <SEGGER_SYSVIEW_ShrinkId>
 80060ac:	4602      	mov	r2, r0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2101      	movs	r1, #1
 80060b2:	9100      	str	r1, [sp, #0]
 80060b4:	4621      	mov	r1, r4
 80060b6:	205c      	movs	r0, #92	; 0x5c
 80060b8:	f003 fe22 	bl	8009d00 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80060bc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3734      	adds	r7, #52	; 0x34
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}
 80060c6:	bf00      	nop
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	441a      	add	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d303      	bcc.n	8006100 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68d9      	ldr	r1, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	461a      	mov	r2, r3
 800610a:	6838      	ldr	r0, [r7, #0]
 800610c:	f004 fc6e 	bl	800a9ec <memcpy>
    }
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006120:	f001 fcd8 	bl	8007ad4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800612a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800612c:	e011      	b.n	8006152 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d012      	beq.n	800615c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fdac 	bl	8006c98 <xTaskRemoveFromEventList>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006146:	f000 fefd 	bl	8006f44 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	3b01      	subs	r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	dce9      	bgt.n	800612e <prvUnlockQueue+0x16>
 800615a:	e000      	b.n	800615e <prvUnlockQueue+0x46>
                    break;
 800615c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006166:	f001 fce5 	bl	8007b34 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800616a:	f001 fcb3 	bl	8007ad4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006174:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006176:	e011      	b.n	800619c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d012      	beq.n	80061a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3310      	adds	r3, #16
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fd87 	bl	8006c98 <xTaskRemoveFromEventList>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006190:	f000 fed8 	bl	8006f44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	3b01      	subs	r3, #1
 8006198:	b2db      	uxtb	r3, r3
 800619a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800619c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dce9      	bgt.n	8006178 <prvUnlockQueue+0x60>
 80061a4:	e000      	b.n	80061a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80061a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80061b0:	f001 fcc0 	bl	8007b34 <vPortExitCritical>
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80061c4:	f001 fc86 	bl	8007ad4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e001      	b.n	80061da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80061da:	f001 fcab 	bl	8007b34 <vPortExitCritical>

    return xReturn;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60fb      	str	r3, [r7, #12]
    }
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d024      	beq.n	8006262 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e01e      	b.n	800625c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800621e:	4a1c      	ldr	r2, [pc, #112]	; (8006290 <vQueueAddToRegistry+0xa8>)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	4413      	add	r3, r2
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d105      	bne.n	800623a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4a17      	ldr	r2, [pc, #92]	; (8006290 <vQueueAddToRegistry+0xa8>)
 8006234:	4413      	add	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
                    break;
 8006238:	e013      	b.n	8006262 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <vQueueAddToRegistry+0x6e>
 8006240:	4a13      	ldr	r2, [pc, #76]	; (8006290 <vQueueAddToRegistry+0xa8>)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <vQueueAddToRegistry+0xa8>)
 8006252:	4413      	add	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	3301      	adds	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b07      	cmp	r3, #7
 8006260:	d9dd      	bls.n	800621e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00f      	beq.n	8006288 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f004 f9fa 	bl	800a670 <SEGGER_SYSVIEW_ShrinkId>
 800627c:	4601      	mov	r1, r0
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	2071      	movs	r0, #113	; 0x71
 8006284:	f003 fc6c 	bl	8009b60 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8006288:	bf00      	nop
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	24000184 	.word	0x24000184

08006294 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80062a4:	f001 fc16 	bl	8007ad4 <vPortEnterCritical>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ae:	b25b      	sxtb	r3, r3
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b4:	d103      	bne.n	80062be <vQueueWaitForMessageRestricted+0x2a>
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d103      	bne.n	80062d4 <vQueueWaitForMessageRestricted+0x40>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062d4:	f001 fc2e 	bl	8007b34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	3324      	adds	r3, #36	; 0x24
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fc8d 	bl	8006c08 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80062ee:	6978      	ldr	r0, [r7, #20]
 80062f0:	f7ff ff12 	bl	8006118 <prvUnlockQueue>
    }
 80062f4:	bf00      	nop
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08c      	sub	sp, #48	; 0x30
 8006300:	af04      	add	r7, sp, #16
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fd0b 	bl	8007d2c <pvPortMalloc>
 8006316:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d013      	beq.n	8006346 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800631e:	205c      	movs	r0, #92	; 0x5c
 8006320:	f001 fd04 	bl	8007d2c <pvPortMalloc>
 8006324:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800632c:	225c      	movs	r2, #92	; 0x5c
 800632e:	2100      	movs	r1, #0
 8006330:	69f8      	ldr	r0, [r7, #28]
 8006332:	f004 fb69 	bl	800aa08 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
 800633c:	e005      	b.n	800634a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800633e:	6978      	ldr	r0, [r7, #20]
 8006340:	f001 fdae 	bl	8007ea0 <vPortFree>
 8006344:	e001      	b.n	800634a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	2300      	movs	r3, #0
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	9302      	str	r3, [sp, #8]
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f80e 	bl	8006388 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800636c:	69f8      	ldr	r0, [r7, #28]
 800636e:	f000 f899 	bl	80064a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006372:	2301      	movs	r3, #1
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	e002      	b.n	800637e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006378:	f04f 33ff 	mov.w	r3, #4294967295
 800637c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800637e:	69bb      	ldr	r3, [r7, #24]
    }
 8006380:	4618      	mov	r0, r3
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	461a      	mov	r2, r3
 80063a0:	21a5      	movs	r1, #165	; 0xa5
 80063a2:	f004 fb31 	bl	800aa08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80063b0:	440b      	add	r3, r1
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f023 0307 	bic.w	r3, r3, #7
 80063be:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	617b      	str	r3, [r7, #20]
    }
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01e      	beq.n	8006424 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e012      	b.n	8006412 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	7819      	ldrb	r1, [r3, #0]
 80063f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	3334      	adds	r3, #52	; 0x34
 80063fc:	460a      	mov	r2, r1
 80063fe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d006      	beq.n	800641a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3301      	adds	r3, #1
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b0f      	cmp	r3, #15
 8006416:	d9e9      	bls.n	80063ec <prvInitialiseNewTask+0x64>
 8006418:	e000      	b.n	800641c <prvInitialiseNewTask+0x94>
            {
                break;
 800641a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	2b37      	cmp	r3, #55	; 0x37
 8006428:	d90a      	bls.n	8006440 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	613b      	str	r3, [r7, #16]
    }
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b37      	cmp	r3, #55	; 0x37
 8006444:	d901      	bls.n	800644a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006446:	2337      	movs	r3, #55	; 0x37
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006454:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff fbc6 	bl	8005bec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fbc1 	bl	8005bec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	69b8      	ldr	r0, [r7, #24]
 8006486:	f001 f979 	bl	800777c <pxPortInitialiseStack>
 800648a:	4602      	mov	r2, r0
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800649c:	bf00      	nop
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80064a4:	b5b0      	push	{r4, r5, r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80064ac:	f001 fb12 	bl	8007ad4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80064b0:	4b49      	ldr	r3, [pc, #292]	; (80065d8 <prvAddNewTaskToReadyList+0x134>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a48      	ldr	r2, [pc, #288]	; (80065d8 <prvAddNewTaskToReadyList+0x134>)
 80064b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80064ba:	4b48      	ldr	r3, [pc, #288]	; (80065dc <prvAddNewTaskToReadyList+0x138>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80064c2:	4a46      	ldr	r2, [pc, #280]	; (80065dc <prvAddNewTaskToReadyList+0x138>)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c8:	4b43      	ldr	r3, [pc, #268]	; (80065d8 <prvAddNewTaskToReadyList+0x134>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d110      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80064d0:	f000 fd56 	bl	8006f80 <prvInitialiseTaskLists>
 80064d4:	e00d      	b.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80064d6:	4b42      	ldr	r3, [pc, #264]	; (80065e0 <prvAddNewTaskToReadyList+0x13c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064de:	4b3f      	ldr	r3, [pc, #252]	; (80065dc <prvAddNewTaskToReadyList+0x138>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d802      	bhi.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80064ec:	4a3b      	ldr	r2, [pc, #236]	; (80065dc <prvAddNewTaskToReadyList+0x138>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80064f2:	4b3c      	ldr	r3, [pc, #240]	; (80065e4 <prvAddNewTaskToReadyList+0x140>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a3a      	ldr	r2, [pc, #232]	; (80065e4 <prvAddNewTaskToReadyList+0x140>)
 80064fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064fc:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <prvAddNewTaskToReadyList+0x140>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <prvAddNewTaskToReadyList+0x94>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4618      	mov	r0, r3
 800650e:	f003 ffe9 	bl	800a4e4 <SEGGER_SYSVIEW_OnTaskCreate>
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	461d      	mov	r5, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461c      	mov	r4, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	1ae3      	subs	r3, r4, r3
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	462b      	mov	r3, r5
 8006534:	f001 fe8c 	bl	8008250 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4618      	mov	r0, r3
 800653c:	f004 f856 	bl	800a5ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	4b28      	ldr	r3, [pc, #160]	; (80065e8 <prvAddNewTaskToReadyList+0x144>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d903      	bls.n	8006554 <prvAddNewTaskToReadyList+0xb0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <prvAddNewTaskToReadyList+0x144>)
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	4924      	ldr	r1, [pc, #144]	; (80065ec <prvAddNewTaskToReadyList+0x148>)
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	3304      	adds	r3, #4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	3204      	adds	r2, #4
 8006580:	605a      	str	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <prvAddNewTaskToReadyList+0x148>)
 8006598:	441a      	add	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	615a      	str	r2, [r3, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a2:	4912      	ldr	r1, [pc, #72]	; (80065ec <prvAddNewTaskToReadyList+0x148>)
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	1c59      	adds	r1, r3, #1
 80065b2:	480e      	ldr	r0, [pc, #56]	; (80065ec <prvAddNewTaskToReadyList+0x148>)
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4403      	add	r3, r0
 80065be:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80065c0:	f001 fab8 	bl	8007b34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <prvAddNewTaskToReadyList+0x13c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <prvAddNewTaskToReadyList+0x12c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <prvAddNewTaskToReadyList+0x138>)
 80065ce:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bdb0      	pop	{r4, r5, r7, pc}
 80065d8:	24000698 	.word	0x24000698
 80065dc:	240001c4 	.word	0x240001c4
 80065e0:	240006a4 	.word	0x240006a4
 80065e4:	240006b4 	.word	0x240006b4
 80065e8:	240006a0 	.word	0x240006a0
 80065ec:	240001c8 	.word	0x240001c8

080065f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80065f6:	4b27      	ldr	r3, [pc, #156]	; (8006694 <vTaskStartScheduler+0xa4>)
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	2300      	movs	r3, #0
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006604:	4924      	ldr	r1, [pc, #144]	; (8006698 <vTaskStartScheduler+0xa8>)
 8006606:	4825      	ldr	r0, [pc, #148]	; (800669c <vTaskStartScheduler+0xac>)
 8006608:	f7ff fe78 	bl	80062fc <xTaskCreate>
 800660c:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d102      	bne.n	800661a <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8006614:	f000 fe12 	bl	800723c <xTimerCreateTimerTask>
 8006618:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d124      	bne.n	800666a <vTaskStartScheduler+0x7a>
        __asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	60bb      	str	r3, [r7, #8]
    }
 8006632:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006634:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <vTaskStartScheduler+0xb0>)
 8006636:	f04f 32ff 	mov.w	r2, #4294967295
 800663a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800663c:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <vTaskStartScheduler+0xb4>)
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006642:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <vTaskStartScheduler+0xb8>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006648:	4b18      	ldr	r3, [pc, #96]	; (80066ac <vTaskStartScheduler+0xbc>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <vTaskStartScheduler+0xa4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d102      	bne.n	800665a <vTaskStartScheduler+0x6a>
 8006654:	f003 ff2a 	bl	800a4ac <SEGGER_SYSVIEW_OnIdle>
 8006658:	e004      	b.n	8006664 <vTaskStartScheduler+0x74>
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <vTaskStartScheduler+0xbc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f003 ff82 	bl	800a568 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006664:	f001 f916 	bl	8007894 <xPortStartScheduler>
 8006668:	e00e      	b.n	8006688 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d10a      	bne.n	8006688 <vTaskStartScheduler+0x98>
        __asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	607b      	str	r3, [r7, #4]
    }
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <vTaskStartScheduler+0xc0>)
 800668a:	681b      	ldr	r3, [r3, #0]
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	240006bc 	.word	0x240006bc
 8006698:	0800b378 	.word	0x0800b378
 800669c:	08006f5d 	.word	0x08006f5d
 80066a0:	240006b8 	.word	0x240006b8
 80066a4:	240006a4 	.word	0x240006a4
 80066a8:	2400069c 	.word	0x2400069c
 80066ac:	240001c4 	.word	0x240001c4
 80066b0:	24000010 	.word	0x24000010

080066b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <vTaskSuspendAll+0x18>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	4a03      	ldr	r2, [pc, #12]	; (80066cc <vTaskSuspendAll+0x18>)
 80066c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80066c2:	bf00      	nop
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	240006c0 	.word	0x240006c0

080066d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80066de:	4b6d      	ldr	r3, [pc, #436]	; (8006894 <xTaskResumeAll+0x1c4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <xTaskResumeAll+0x2c>
        __asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	607b      	str	r3, [r7, #4]
    }
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80066fc:	f001 f9ea 	bl	8007ad4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006700:	4b64      	ldr	r3, [pc, #400]	; (8006894 <xTaskResumeAll+0x1c4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3b01      	subs	r3, #1
 8006706:	4a63      	ldr	r2, [pc, #396]	; (8006894 <xTaskResumeAll+0x1c4>)
 8006708:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670a:	4b62      	ldr	r3, [pc, #392]	; (8006894 <xTaskResumeAll+0x1c4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 80b9 	bne.w	8006886 <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006714:	4b60      	ldr	r3, [pc, #384]	; (8006898 <xTaskResumeAll+0x1c8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80b4 	beq.w	8006886 <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800671e:	e08f      	b.n	8006840 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006720:	4b5e      	ldr	r3, [pc, #376]	; (800689c <xTaskResumeAll+0x1cc>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	6a12      	ldr	r2, [r2, #32]
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	69d2      	ldr	r2, [r2, #28]
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3318      	adds	r3, #24
 800674a:	429a      	cmp	r2, r3
 800674c:	d103      	bne.n	8006756 <xTaskResumeAll+0x86>
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	2200      	movs	r2, #0
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	68d2      	ldr	r2, [r2, #12]
 8006774:	609a      	str	r2, [r3, #8]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	6892      	ldr	r2, [r2, #8]
 800677e:	605a      	str	r2, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	3304      	adds	r3, #4
 8006788:	429a      	cmp	r2, r3
 800678a:	d103      	bne.n	8006794 <xTaskResumeAll+0xc4>
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2200      	movs	r2, #0
 8006798:	615a      	str	r2, [r3, #20]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1e5a      	subs	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f003 ff20 	bl	800a5ec <SEGGER_SYSVIEW_OnTaskStartReady>
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	4b3b      	ldr	r3, [pc, #236]	; (80068a0 <xTaskResumeAll+0x1d0>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d903      	bls.n	80067c0 <xTaskResumeAll+0xf0>
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4a38      	ldr	r2, [pc, #224]	; (80068a0 <xTaskResumeAll+0x1d0>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4937      	ldr	r1, [pc, #220]	; (80068a4 <xTaskResumeAll+0x1d4>)
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3304      	adds	r3, #4
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	609a      	str	r2, [r3, #8]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	60da      	str	r2, [r3, #12]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	3204      	adds	r2, #4
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	1d1a      	adds	r2, r3, #4
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	609a      	str	r2, [r3, #8]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a28      	ldr	r2, [pc, #160]	; (80068a4 <xTaskResumeAll+0x1d4>)
 8006804:	441a      	add	r2, r3
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	615a      	str	r2, [r3, #20]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680e:	4925      	ldr	r1, [pc, #148]	; (80068a4 <xTaskResumeAll+0x1d4>)
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	1c59      	adds	r1, r3, #1
 800681e:	4821      	ldr	r0, [pc, #132]	; (80068a4 <xTaskResumeAll+0x1d4>)
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4403      	add	r3, r0
 800682a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4b1d      	ldr	r3, [pc, #116]	; (80068a8 <xTaskResumeAll+0x1d8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800683a:	4b1c      	ldr	r3, [pc, #112]	; (80068ac <xTaskResumeAll+0x1dc>)
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006840:	4b16      	ldr	r3, [pc, #88]	; (800689c <xTaskResumeAll+0x1cc>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f47f af6b 	bne.w	8006720 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006850:	f000 fc4c 	bl	80070ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006854:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <xTaskResumeAll+0x1e0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d010      	beq.n	8006882 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006860:	f000 f84a 	bl	80068f8 <xTaskIncrementTick>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <xTaskResumeAll+0x1dc>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	3b01      	subs	r3, #1
 8006874:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f1      	bne.n	8006860 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 800687c:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <xTaskResumeAll+0x1e0>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <xTaskResumeAll+0x1dc>)
 8006884:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006886:	f001 f955 	bl	8007b34 <vPortExitCritical>

    return xAlreadyYielded;
 800688a:	697b      	ldr	r3, [r7, #20]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	240006c0 	.word	0x240006c0
 8006898:	24000698 	.word	0x24000698
 800689c:	24000658 	.word	0x24000658
 80068a0:	240006a0 	.word	0x240006a0
 80068a4:	240001c8 	.word	0x240001c8
 80068a8:	240001c4 	.word	0x240001c4
 80068ac:	240006ac 	.word	0x240006ac
 80068b0:	240006a8 	.word	0x240006a8

080068b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80068ba:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <xTaskGetTickCount+0x1c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80068c0:	687b      	ldr	r3, [r7, #4]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	2400069c 	.word	0x2400069c

080068d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068da:	f001 f9e7 	bl	8007cac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80068de:	2300      	movs	r3, #0
 80068e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80068e2:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <xTaskGetTickCountFromISR+0x20>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80068e8:	683b      	ldr	r3, [r7, #0]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	2400069c 	.word	0x2400069c

080068f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006902:	4b70      	ldr	r3, [pc, #448]	; (8006ac4 <xTaskIncrementTick+0x1cc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 80d2 	bne.w	8006ab0 <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800690c:	4b6e      	ldr	r3, [pc, #440]	; (8006ac8 <xTaskIncrementTick+0x1d0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006914:	4a6c      	ldr	r2, [pc, #432]	; (8006ac8 <xTaskIncrementTick+0x1d0>)
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d120      	bne.n	8006962 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006920:	4b6a      	ldr	r3, [pc, #424]	; (8006acc <xTaskIncrementTick+0x1d4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <xTaskIncrementTick+0x48>
        __asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	607b      	str	r3, [r7, #4]
    }
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <xTaskIncrementTick+0x46>
 8006940:	4b62      	ldr	r3, [pc, #392]	; (8006acc <xTaskIncrementTick+0x1d4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	4b62      	ldr	r3, [pc, #392]	; (8006ad0 <xTaskIncrementTick+0x1d8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a60      	ldr	r2, [pc, #384]	; (8006acc <xTaskIncrementTick+0x1d4>)
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	4a60      	ldr	r2, [pc, #384]	; (8006ad0 <xTaskIncrementTick+0x1d8>)
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b5f      	ldr	r3, [pc, #380]	; (8006ad4 <xTaskIncrementTick+0x1dc>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	4a5e      	ldr	r2, [pc, #376]	; (8006ad4 <xTaskIncrementTick+0x1dc>)
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	f000 fbc5 	bl	80070ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006962:	4b5d      	ldr	r3, [pc, #372]	; (8006ad8 <xTaskIncrementTick+0x1e0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	429a      	cmp	r2, r3
 800696a:	f0c0 80a6 	bcc.w	8006aba <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800696e:	4b57      	ldr	r3, [pc, #348]	; (8006acc <xTaskIncrementTick+0x1d4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006978:	4b57      	ldr	r3, [pc, #348]	; (8006ad8 <xTaskIncrementTick+0x1e0>)
 800697a:	f04f 32ff 	mov.w	r2, #4294967295
 800697e:	601a      	str	r2, [r3, #0]
                    break;
 8006980:	e09b      	b.n	8006aba <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006982:	4b52      	ldr	r3, [pc, #328]	; (8006acc <xTaskIncrementTick+0x1d4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006992:	6a3a      	ldr	r2, [r7, #32]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	429a      	cmp	r2, r3
 8006998:	d203      	bcs.n	80069a2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800699a:	4a4f      	ldr	r2, [pc, #316]	; (8006ad8 <xTaskIncrementTick+0x1e0>)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80069a0:	e08b      	b.n	8006aba <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	68d2      	ldr	r2, [r2, #12]
 80069b0:	609a      	str	r2, [r3, #8]
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	6892      	ldr	r2, [r2, #8]
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	3304      	adds	r3, #4
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d103      	bne.n	80069d0 <xTaskIncrementTick+0xd8>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	605a      	str	r2, [r3, #4]
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2200      	movs	r2, #0
 80069d4:	615a      	str	r2, [r3, #20]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01e      	beq.n	8006a26 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	6a12      	ldr	r2, [r2, #32]
 80069f6:	609a      	str	r2, [r3, #8]
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	69d2      	ldr	r2, [r2, #28]
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	3318      	adds	r3, #24
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d103      	bne.n	8006a16 <xTaskIncrementTick+0x11e>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	6a1a      	ldr	r2, [r3, #32]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f003 fddf 	bl	800a5ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	4b2a      	ldr	r3, [pc, #168]	; (8006adc <xTaskIncrementTick+0x1e4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d903      	bls.n	8006a42 <xTaskIncrementTick+0x14a>
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	4a27      	ldr	r2, [pc, #156]	; (8006adc <xTaskIncrementTick+0x1e4>)
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a46:	4926      	ldr	r1, [pc, #152]	; (8006ae0 <xTaskIncrementTick+0x1e8>)
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	3304      	adds	r3, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	609a      	str	r2, [r3, #8]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	3204      	adds	r2, #4
 8006a6e:	605a      	str	r2, [r3, #4]
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	1d1a      	adds	r2, r3, #4
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <xTaskIncrementTick+0x1e8>)
 8006a86:	441a      	add	r2, r3
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	615a      	str	r2, [r3, #20]
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a90:	4913      	ldr	r1, [pc, #76]	; (8006ae0 <xTaskIncrementTick+0x1e8>)
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	440b      	add	r3, r1
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	1c59      	adds	r1, r3, #1
 8006aa0:	480f      	ldr	r0, [pc, #60]	; (8006ae0 <xTaskIncrementTick+0x1e8>)
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aae:	e75e      	b.n	800696e <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	; (8006ae4 <xTaskIncrementTick+0x1ec>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	4a0b      	ldr	r2, [pc, #44]	; (8006ae4 <xTaskIncrementTick+0x1ec>)
 8006ab8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3728      	adds	r7, #40	; 0x28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	240006c0 	.word	0x240006c0
 8006ac8:	2400069c 	.word	0x2400069c
 8006acc:	24000650 	.word	0x24000650
 8006ad0:	24000654 	.word	0x24000654
 8006ad4:	240006b0 	.word	0x240006b0
 8006ad8:	240006b8 	.word	0x240006b8
 8006adc:	240006a0 	.word	0x240006a0
 8006ae0:	240001c8 	.word	0x240001c8
 8006ae4:	240006a8 	.word	0x240006a8

08006ae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006aee:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <vTaskSwitchContext+0xc0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006af6:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <vTaskSwitchContext+0xc4>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006afc:	e04f      	b.n	8006b9e <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8006afe:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <vTaskSwitchContext+0xc4>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <vTaskSwitchContext+0xc8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e010      	b.n	8006b2e <vTaskSwitchContext+0x46>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <vTaskSwitchContext+0x40>
        __asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	607b      	str	r3, [r7, #4]
    }
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <vTaskSwitchContext+0x3e>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	4921      	ldr	r1, [pc, #132]	; (8006bb4 <vTaskSwitchContext+0xcc>)
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0e4      	beq.n	8006b0c <vTaskSwitchContext+0x24>
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <vTaskSwitchContext+0xcc>)
 8006b4e:	4413      	add	r3, r2
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3308      	adds	r3, #8
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d104      	bne.n	8006b72 <vTaskSwitchContext+0x8a>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4a0f      	ldr	r2, [pc, #60]	; (8006bb8 <vTaskSwitchContext+0xd0>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	; (8006bb0 <vTaskSwitchContext+0xc8>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006b82:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <vTaskSwitchContext+0xd0>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <vTaskSwitchContext+0xd4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d102      	bne.n	8006b94 <vTaskSwitchContext+0xac>
 8006b8e:	f003 fc8d 	bl	800a4ac <SEGGER_SYSVIEW_OnIdle>
}
 8006b92:	e004      	b.n	8006b9e <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8006b94:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <vTaskSwitchContext+0xd0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f003 fce5 	bl	800a568 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	240006c0 	.word	0x240006c0
 8006bac:	240006ac 	.word	0x240006ac
 8006bb0:	240006a0 	.word	0x240006a0
 8006bb4:	240001c8 	.word	0x240001c8
 8006bb8:	240001c4 	.word	0x240001c4
 8006bbc:	240006bc 	.word	0x240006bc

08006bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
    }
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <vTaskPlaceOnEventList+0x44>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3318      	adds	r3, #24
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff f809 	bl	8005c06 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	6838      	ldr	r0, [r7, #0]
 8006bf8:	f000 fab2 	bl	8007160 <prvAddCurrentTaskToDelayedList>
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	240001c4 	.word	0x240001c4

08006c08 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	613b      	str	r3, [r7, #16]
    }
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	61da      	str	r2, [r3, #28]
 8006c3e:	4b15      	ldr	r3, [pc, #84]	; (8006c94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	6892      	ldr	r2, [r2, #8]
 8006c46:	621a      	str	r2, [r3, #32]
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	3218      	adds	r2, #24
 8006c52:	605a      	str	r2, [r3, #4]
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f103 0218 	add.w	r2, r3, #24
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	609a      	str	r2, [r3, #8]
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006c78:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006c7e:	2024      	movs	r0, #36	; 0x24
 8006c80:	f002 ff14 	bl	8009aac <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	68b8      	ldr	r0, [r7, #8]
 8006c88:	f000 fa6a 	bl	8007160 <prvAddCurrentTaskToDelayedList>
    }
 8006c8c:	bf00      	nop
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	240001c4 	.word	0x240001c4

08006c98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60fb      	str	r3, [r7, #12]
    }
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	6a3a      	ldr	r2, [r7, #32]
 8006cd0:	6a12      	ldr	r2, [r2, #32]
 8006cd2:	609a      	str	r2, [r3, #8]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	6a3a      	ldr	r2, [r7, #32]
 8006cda:	69d2      	ldr	r2, [r2, #28]
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	3318      	adds	r3, #24
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d103      	bne.n	8006cf2 <xTaskRemoveFromEventList+0x5a>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	6a1a      	ldr	r2, [r3, #32]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	629a      	str	r2, [r3, #40]	; 0x28
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	1e5a      	subs	r2, r3, #1
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d02:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <xTaskRemoveFromEventList+0x19c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d163      	bne.n	8006dd2 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	68d2      	ldr	r2, [r2, #12]
 8006d18:	609a      	str	r2, [r3, #8]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	6a3a      	ldr	r2, [r7, #32]
 8006d20:	6892      	ldr	r2, [r2, #8]
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d103      	bne.n	8006d38 <xTaskRemoveFromEventList+0xa0>
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	605a      	str	r2, [r3, #4]
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	615a      	str	r2, [r3, #20]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	1e5a      	subs	r2, r3, #1
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f003 fc4e 	bl	800a5ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	4b38      	ldr	r3, [pc, #224]	; (8006e38 <xTaskRemoveFromEventList+0x1a0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d903      	bls.n	8006d64 <xTaskRemoveFromEventList+0xcc>
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <xTaskRemoveFromEventList+0x1a0>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4934      	ldr	r1, [pc, #208]	; (8006e3c <xTaskRemoveFromEventList+0x1a4>)
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3304      	adds	r3, #4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	60da      	str	r2, [r3, #12]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	6a3a      	ldr	r2, [r7, #32]
 8006d8e:	3204      	adds	r2, #4
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	1d1a      	adds	r2, r3, #4
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	609a      	str	r2, [r3, #8]
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4a25      	ldr	r2, [pc, #148]	; (8006e3c <xTaskRemoveFromEventList+0x1a4>)
 8006da8:	441a      	add	r2, r3
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	615a      	str	r2, [r3, #20]
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db2:	4922      	ldr	r1, [pc, #136]	; (8006e3c <xTaskRemoveFromEventList+0x1a4>)
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	1c59      	adds	r1, r3, #1
 8006dc2:	481e      	ldr	r0, [pc, #120]	; (8006e3c <xTaskRemoveFromEventList+0x1a4>)
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4403      	add	r3, r0
 8006dce:	6019      	str	r1, [r3, #0]
 8006dd0:	e01b      	b.n	8006e0a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <xTaskRemoveFromEventList+0x1a8>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	61bb      	str	r3, [r7, #24]
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	61da      	str	r2, [r3, #28]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	621a      	str	r2, [r3, #32]
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	3218      	adds	r2, #24
 8006dee:	605a      	str	r2, [r3, #4]
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f103 0218 	add.w	r2, r3, #24
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	609a      	str	r2, [r3, #8]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	4a10      	ldr	r2, [pc, #64]	; (8006e40 <xTaskRemoveFromEventList+0x1a8>)
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <xTaskRemoveFromEventList+0x1a8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	4a0e      	ldr	r2, [pc, #56]	; (8006e40 <xTaskRemoveFromEventList+0x1a8>)
 8006e08:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <xTaskRemoveFromEventList+0x1ac>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d905      	bls.n	8006e24 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <xTaskRemoveFromEventList+0x1b0>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e001      	b.n	8006e28 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3728      	adds	r7, #40	; 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	240006c0 	.word	0x240006c0
 8006e38:	240006a0 	.word	0x240006a0
 8006e3c:	240001c8 	.word	0x240001c8
 8006e40:	24000658 	.word	0x24000658
 8006e44:	240001c4 	.word	0x240001c4
 8006e48:	240006ac 	.word	0x240006ac

08006e4c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <vTaskInternalSetTimeOutState+0x24>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <vTaskInternalSetTimeOutState+0x28>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	605a      	str	r2, [r3, #4]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	240006b0 	.word	0x240006b0
 8006e74:	2400069c 	.word	0x2400069c

08006e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	613b      	str	r3, [r7, #16]
    }
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
    }
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006eba:	f000 fe0b 	bl	8007ad4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006ebe:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <xTaskCheckForTimeOut+0xc4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d102      	bne.n	8006ede <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	e026      	b.n	8006f2c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <xTaskCheckForTimeOut+0xc8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d00a      	beq.n	8006f00 <xTaskCheckForTimeOut+0x88>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d305      	bcc.n	8006f00 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e015      	b.n	8006f2c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d20b      	bcs.n	8006f22 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	1ad2      	subs	r2, r2, r3
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff ff98 	bl	8006e4c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	e004      	b.n	8006f2c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006f2c:	f000 fe02 	bl	8007b34 <vPortExitCritical>

    return xReturn;
 8006f30:	69fb      	ldr	r3, [r7, #28]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2400069c 	.word	0x2400069c
 8006f40:	240006b0 	.word	0x240006b0

08006f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006f48:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <vTaskMissedYield+0x14>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	240006ac 	.word	0x240006ac

08006f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006f64:	f000 f84c 	bl	8007000 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <prvIdleTask+0x20>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006f78:	e7f4      	b.n	8006f64 <prvIdleTask+0x8>
 8006f7a:	bf00      	nop
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f86:	2300      	movs	r3, #0
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	e00c      	b.n	8006fa6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a12      	ldr	r2, [pc, #72]	; (8006fe0 <prvInitialiseTaskLists+0x60>)
 8006f98:	4413      	add	r3, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fe06 	bl	8005bac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b37      	cmp	r3, #55	; 0x37
 8006faa:	d9ef      	bls.n	8006f8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006fac:	480d      	ldr	r0, [pc, #52]	; (8006fe4 <prvInitialiseTaskLists+0x64>)
 8006fae:	f7fe fdfd 	bl	8005bac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006fb2:	480d      	ldr	r0, [pc, #52]	; (8006fe8 <prvInitialiseTaskLists+0x68>)
 8006fb4:	f7fe fdfa 	bl	8005bac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006fb8:	480c      	ldr	r0, [pc, #48]	; (8006fec <prvInitialiseTaskLists+0x6c>)
 8006fba:	f7fe fdf7 	bl	8005bac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006fbe:	480c      	ldr	r0, [pc, #48]	; (8006ff0 <prvInitialiseTaskLists+0x70>)
 8006fc0:	f7fe fdf4 	bl	8005bac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006fc4:	480b      	ldr	r0, [pc, #44]	; (8006ff4 <prvInitialiseTaskLists+0x74>)
 8006fc6:	f7fe fdf1 	bl	8005bac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006fca:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <prvInitialiseTaskLists+0x78>)
 8006fcc:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <prvInitialiseTaskLists+0x64>)
 8006fce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <prvInitialiseTaskLists+0x7c>)
 8006fd2:	4a05      	ldr	r2, [pc, #20]	; (8006fe8 <prvInitialiseTaskLists+0x68>)
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	240001c8 	.word	0x240001c8
 8006fe4:	24000628 	.word	0x24000628
 8006fe8:	2400063c 	.word	0x2400063c
 8006fec:	24000658 	.word	0x24000658
 8006ff0:	2400066c 	.word	0x2400066c
 8006ff4:	24000684 	.word	0x24000684
 8006ff8:	24000650 	.word	0x24000650
 8006ffc:	24000654 	.word	0x24000654

08007000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007006:	e019      	b.n	800703c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007008:	f000 fd64 	bl	8007ad4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700c:	4b10      	ldr	r3, [pc, #64]	; (8007050 <prvCheckTasksWaitingTermination+0x50>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fe2d 	bl	8005c78 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800701e:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <prvCheckTasksWaitingTermination+0x54>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3b01      	subs	r3, #1
 8007024:	4a0b      	ldr	r2, [pc, #44]	; (8007054 <prvCheckTasksWaitingTermination+0x54>)
 8007026:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <prvCheckTasksWaitingTermination+0x58>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3b01      	subs	r3, #1
 800702e:	4a0a      	ldr	r2, [pc, #40]	; (8007058 <prvCheckTasksWaitingTermination+0x58>)
 8007030:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007032:	f000 fd7f 	bl	8007b34 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f848 	bl	80070cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <prvCheckTasksWaitingTermination+0x58>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e1      	bne.n	8007008 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	2400066c 	.word	0x2400066c
 8007054:	24000698 	.word	0x24000698
 8007058:	24000680 	.word	0x24000680

0800705c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007068:	e005      	b.n	8007076 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3301      	adds	r3, #1
 800706e:	607b      	str	r3, [r7, #4]
            ulCount++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2ba5      	cmp	r3, #165	; 0xa5
 800707c:	d0f5      	beq.n	800706a <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	089b      	lsrs	r3, r3, #2
 8007082:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	b29b      	uxth	r3, r3
    }
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <uxTaskGetStackHighWaterMark+0x14>
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <uxTaskGetStackHighWaterMark+0x34>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	e000      	b.n	80070aa <uxTaskGetStackHighWaterMark+0x16>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f7ff ffd2 	bl	800705c <prvTaskCheckFreeStackSpace>
 80070b8:	4603      	mov	r3, r0
 80070ba:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80070bc:	68fb      	ldr	r3, [r7, #12]
    }
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	240001c4 	.word	0x240001c4

080070cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fee1 	bl	8007ea0 <vPortFree>
            vPortFree( pxTCB );
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fede 	bl	8007ea0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070f0:	4b0a      	ldr	r3, [pc, #40]	; (800711c <prvResetNextTaskUnblockTime+0x30>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d104      	bne.n	8007104 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <prvResetNextTaskUnblockTime+0x34>)
 80070fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007100:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007102:	e005      	b.n	8007110 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <prvResetNextTaskUnblockTime+0x30>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a04      	ldr	r2, [pc, #16]	; (8007120 <prvResetNextTaskUnblockTime+0x34>)
 800710e:	6013      	str	r3, [r2, #0]
}
 8007110:	bf00      	nop
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	24000650 	.word	0x24000650
 8007120:	240006b8 	.word	0x240006b8

08007124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <xTaskGetSchedulerState+0x34>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007132:	2301      	movs	r3, #1
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	e008      	b.n	800714a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <xTaskGetSchedulerState+0x38>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007140:	2302      	movs	r3, #2
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	e001      	b.n	800714a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800714a:	687b      	ldr	r3, [r7, #4]
    }
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	240006a4 	.word	0x240006a4
 800715c:	240006c0 	.word	0x240006c0

08007160 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800716a:	4b2e      	ldr	r3, [pc, #184]	; (8007224 <prvAddCurrentTaskToDelayedList+0xc4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007170:	4b2d      	ldr	r3, [pc, #180]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3304      	adds	r3, #4
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fd7e 	bl	8005c78 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d124      	bne.n	80071ce <prvAddCurrentTaskToDelayedList+0x6e>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d021      	beq.n	80071ce <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800718a:	4b28      	ldr	r3, [pc, #160]	; (800722c <prvAddCurrentTaskToDelayedList+0xcc>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	4b25      	ldr	r3, [pc, #148]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	4b23      	ldr	r3, [pc, #140]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	6892      	ldr	r2, [r2, #8]
 80071a0:	60da      	str	r2, [r3, #12]
 80071a2:	4b21      	ldr	r3, [pc, #132]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	3204      	adds	r2, #4
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1b      	ldr	r2, [pc, #108]	; (800722c <prvAddCurrentTaskToDelayedList+0xcc>)
 80071be:	615a      	str	r2, [r3, #20]
 80071c0:	4b1a      	ldr	r3, [pc, #104]	; (800722c <prvAddCurrentTaskToDelayedList+0xcc>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	4a19      	ldr	r2, [pc, #100]	; (800722c <prvAddCurrentTaskToDelayedList+0xcc>)
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80071cc:	e026      	b.n	800721c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071d6:	4b14      	ldr	r3, [pc, #80]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d209      	bcs.n	80071fa <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <prvAddCurrentTaskToDelayedList+0xd0>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3304      	adds	r3, #4
 80071f0:	4619      	mov	r1, r3
 80071f2:	4610      	mov	r0, r2
 80071f4:	f7fe fd07 	bl	8005c06 <vListInsert>
}
 80071f8:	e010      	b.n	800721c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071fa:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <prvAddCurrentTaskToDelayedList+0xd4>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3304      	adds	r3, #4
 8007204:	4619      	mov	r1, r3
 8007206:	4610      	mov	r0, r2
 8007208:	f7fe fcfd 	bl	8005c06 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <prvAddCurrentTaskToDelayedList+0xd8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	429a      	cmp	r2, r3
 8007214:	d202      	bcs.n	800721c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8007216:	4a08      	ldr	r2, [pc, #32]	; (8007238 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	2400069c 	.word	0x2400069c
 8007228:	240001c4 	.word	0x240001c4
 800722c:	24000684 	.word	0x24000684
 8007230:	24000654 	.word	0x24000654
 8007234:	24000650 	.word	0x24000650
 8007238:	240006b8 	.word	0x240006b8

0800723c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007246:	f000 fa63 	bl	8007710 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <xTimerCreateTimerTask+0x54>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <xTimerCreateTimerTask+0x58>)
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	2302      	movs	r3, #2
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007260:	490d      	ldr	r1, [pc, #52]	; (8007298 <xTimerCreateTimerTask+0x5c>)
 8007262:	480e      	ldr	r0, [pc, #56]	; (800729c <xTimerCreateTimerTask+0x60>)
 8007264:	f7ff f84a 	bl	80062fc <xTaskCreate>
 8007268:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	603b      	str	r3, [r7, #0]
    }
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007286:	687b      	ldr	r3, [r7, #4]
    }
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	240006f4 	.word	0x240006f4
 8007294:	240006f8 	.word	0x240006f8
 8007298:	0800b380 	.word	0x0800b380
 800729c:	08007345 	.word	0x08007345

080072a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80072ac:	e008      	b.n	80072c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4413      	add	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	18d1      	adds	r1, r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f8dd 	bl	800748c <prvInsertTimerInActiveList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ea      	bne.n	80072ae <prvReloadTimer+0xe>
        }
    }
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ee:	4b14      	ldr	r3, [pc, #80]	; (8007340 <prvProcessExpiredTimer+0x5c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe fcbb 	bl	8005c78 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ffc3 	bl	80072a0 <prvReloadTimer>
 800731a:	e008      	b.n	800732e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	4798      	blx	r3
    }
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	240006ec 	.word	0x240006ec

08007344 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f857 	bl	8007404 <prvGetNextExpireTime>
 8007356:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4619      	mov	r1, r3
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f803 	bl	8007368 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007362:	f000 f8d5 	bl	8007510 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007366:	e7f1      	b.n	800734c <prvTimerTask+0x8>

08007368 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007372:	f7ff f99f 	bl	80066b4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007376:	f107 0308 	add.w	r3, r7, #8
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f866 	bl	800744c <prvSampleTimeNow>
 8007380:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d130      	bne.n	80073ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <prvProcessTimerOrBlockTask+0x3c>
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d806      	bhi.n	80073a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007396:	f7ff f99b 	bl	80066d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ffa1 	bl	80072e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80073a2:	e024      	b.n	80073ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073aa:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <prvProcessTimerOrBlockTask+0x90>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <prvProcessTimerOrBlockTask+0x50>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <prvProcessTimerOrBlockTask+0x52>
 80073b8:	2300      	movs	r3, #0
 80073ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <prvProcessTimerOrBlockTask+0x94>)
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	f7fe ff63 	bl	8006294 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80073ce:	f7ff f97f 	bl	80066d0 <xTaskResumeAll>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <prvProcessTimerOrBlockTask+0x98>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
    }
 80073e8:	e001      	b.n	80073ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80073ea:	f7ff f971 	bl	80066d0 <xTaskResumeAll>
    }
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	240006f0 	.word	0x240006f0
 80073fc:	240006f4 	.word	0x240006f4
 8007400:	e000ed04 	.word	0xe000ed04

08007404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <prvGetNextExpireTime+0x44>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <prvGetNextExpireTime+0x16>
 8007416:	2201      	movs	r2, #1
 8007418:	e000      	b.n	800741c <prvGetNextExpireTime+0x18>
 800741a:	2200      	movs	r2, #0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007428:	4b07      	ldr	r3, [pc, #28]	; (8007448 <prvGetNextExpireTime+0x44>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	e001      	b.n	8007438 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007438:	68fb      	ldr	r3, [r7, #12]
    }
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	240006ec 	.word	0x240006ec

0800744c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007454:	f7ff fa2e 	bl	80068b4 <xTaskGetTickCount>
 8007458:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <prvSampleTimeNow+0x3c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	429a      	cmp	r2, r3
 8007462:	d205      	bcs.n	8007470 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007464:	f000 f92e 	bl	80076c4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e002      	b.n	8007476 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007476:	4a04      	ldr	r2, [pc, #16]	; (8007488 <prvSampleTimeNow+0x3c>)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800747c:	68fb      	ldr	r3, [r7, #12]
    }
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	240006fc 	.word	0x240006fc

0800748c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d812      	bhi.n	80074d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d302      	bcc.n	80074c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	e01b      	b.n	80074fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <prvInsertTimerInActiveList+0x7c>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3304      	adds	r3, #4
 80074ce:	4619      	mov	r1, r3
 80074d0:	4610      	mov	r0, r2
 80074d2:	f7fe fb98 	bl	8005c06 <vListInsert>
 80074d6:	e012      	b.n	80074fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d206      	bcs.n	80074ee <prvInsertTimerInActiveList+0x62>
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e007      	b.n	80074fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <prvInsertTimerInActiveList+0x80>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7fe fb84 	bl	8005c06 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80074fe:	697b      	ldr	r3, [r7, #20]
    }
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	240006f0 	.word	0x240006f0
 800750c:	240006ec 	.word	0x240006ec

08007510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007516:	e0c2      	b.n	800769e <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	da18      	bge.n	8007550 <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800751e:	1d3b      	adds	r3, r7, #4
 8007520:	3304      	adds	r3, #4
 8007522:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <prvProcessReceivedCommands+0x30>
        __asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	61bb      	str	r3, [r7, #24]
    }
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007546:	6850      	ldr	r0, [r2, #4]
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	6892      	ldr	r2, [r2, #8]
 800754c:	4611      	mov	r1, r2
 800754e:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f2c0 80a2 	blt.w	800769c <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fb85 	bl	8005c78 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800756e:	463b      	mov	r3, r7
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ff6b 	bl	800744c <prvSampleTimeNow>
 8007576:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3b01      	subs	r3, #1
 800757c:	2b08      	cmp	r3, #8
 800757e:	f200 808e 	bhi.w	800769e <prvProcessReceivedCommands+0x18e>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <prvProcessReceivedCommands+0x78>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075ad 	.word	0x080075ad
 8007590:	08007615 	.word	0x08007615
 8007594:	08007629 	.word	0x08007629
 8007598:	08007673 	.word	0x08007673
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	080075ad 	.word	0x080075ad
 80075a4:	08007615 	.word	0x08007615
 80075a8:	08007629 	.word	0x08007629
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	18d1      	adds	r1, r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	6a38      	ldr	r0, [r7, #32]
 80075cc:	f7ff ff5e 	bl	800748c <prvInsertTimerInActiveList>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d063      	beq.n	800769e <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	4413      	add	r3, r2
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6a38      	ldr	r0, [r7, #32]
 80075f2:	f7ff fe55 	bl	80072a0 <prvReloadTimer>
 80075f6:	e008      	b.n	800760a <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	6a38      	ldr	r0, [r7, #32]
 8007610:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007612:	e044      	b.n	800769e <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	b2da      	uxtb	r2, r3
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007626:	e03a      	b.n	800769e <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	b2da      	uxtb	r2, r3
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <prvProcessReceivedCommands+0x14e>
        __asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	617b      	str	r3, [r7, #20]
    }
 800765a:	bf00      	nop
 800765c:	e7fe      	b.n	800765c <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	18d1      	adds	r1, r2, r3
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	6a38      	ldr	r0, [r7, #32]
 800766c:	f7ff ff0e 	bl	800748c <prvInsertTimerInActiveList>
                        break;
 8007670:	e015      	b.n	800769e <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d103      	bne.n	8007688 <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 8007680:	6a38      	ldr	r0, [r7, #32]
 8007682:	f000 fc0d 	bl	8007ea0 <vPortFree>
 8007686:	e00a      	b.n	800769e <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	b2da      	uxtb	r2, r3
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800769a:	e000      	b.n	800769e <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800769c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800769e:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <prvProcessReceivedCommands+0x1b0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	1d39      	adds	r1, r7, #4
 80076a4:	2200      	movs	r2, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fc0a 	bl	8005ec0 <xQueueReceive>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f47f af32 	bne.w	8007518 <prvProcessReceivedCommands+0x8>
        }
    }
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	3728      	adds	r7, #40	; 0x28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	240006f4 	.word	0x240006f4

080076c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ca:	e009      	b.n	80076e0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076cc:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <prvSwitchTimerLists+0x44>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80076d6:	f04f 31ff 	mov.w	r1, #4294967295
 80076da:	6838      	ldr	r0, [r7, #0]
 80076dc:	f7ff fe02 	bl	80072e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <prvSwitchTimerLists+0x44>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <prvSwitchTimerLists+0x44>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80076f0:	4b06      	ldr	r3, [pc, #24]	; (800770c <prvSwitchTimerLists+0x48>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a04      	ldr	r2, [pc, #16]	; (8007708 <prvSwitchTimerLists+0x44>)
 80076f6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <prvSwitchTimerLists+0x48>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6013      	str	r3, [r2, #0]
    }
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	240006ec 	.word	0x240006ec
 800770c:	240006f0 	.word	0x240006f0

08007710 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007714:	f000 f9de 	bl	8007ad4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007718:	4b12      	ldr	r3, [pc, #72]	; (8007764 <prvCheckForValidListAndQueue+0x54>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11d      	bne.n	800775c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007720:	4811      	ldr	r0, [pc, #68]	; (8007768 <prvCheckForValidListAndQueue+0x58>)
 8007722:	f7fe fa43 	bl	8005bac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007726:	4811      	ldr	r0, [pc, #68]	; (800776c <prvCheckForValidListAndQueue+0x5c>)
 8007728:	f7fe fa40 	bl	8005bac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800772c:	4b10      	ldr	r3, [pc, #64]	; (8007770 <prvCheckForValidListAndQueue+0x60>)
 800772e:	4a0e      	ldr	r2, [pc, #56]	; (8007768 <prvCheckForValidListAndQueue+0x58>)
 8007730:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007732:	4b10      	ldr	r3, [pc, #64]	; (8007774 <prvCheckForValidListAndQueue+0x64>)
 8007734:	4a0d      	ldr	r2, [pc, #52]	; (800776c <prvCheckForValidListAndQueue+0x5c>)
 8007736:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007738:	2200      	movs	r2, #0
 800773a:	2110      	movs	r1, #16
 800773c:	200a      	movs	r0, #10
 800773e:	f7fe fb47 	bl	8005dd0 <xQueueGenericCreate>
 8007742:	4603      	mov	r3, r0
 8007744:	4a07      	ldr	r2, [pc, #28]	; (8007764 <prvCheckForValidListAndQueue+0x54>)
 8007746:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007748:	4b06      	ldr	r3, [pc, #24]	; (8007764 <prvCheckForValidListAndQueue+0x54>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007750:	4b04      	ldr	r3, [pc, #16]	; (8007764 <prvCheckForValidListAndQueue+0x54>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4908      	ldr	r1, [pc, #32]	; (8007778 <prvCheckForValidListAndQueue+0x68>)
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fd46 	bl	80061e8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800775c:	f000 f9ea 	bl	8007b34 <vPortExitCritical>
    }
 8007760:	bf00      	nop
 8007762:	bd80      	pop	{r7, pc}
 8007764:	240006f4 	.word	0x240006f4
 8007768:	240006c4 	.word	0x240006c4
 800776c:	240006d8 	.word	0x240006d8
 8007770:	240006ec 	.word	0x240006ec
 8007774:	240006f0 	.word	0x240006f0
 8007778:	0800b388 	.word	0x0800b388

0800777c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3b04      	subs	r3, #4
 800778c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007794:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3b04      	subs	r3, #4
 800779a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f023 0201 	bic.w	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80077ac:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <pxPortInitialiseStack+0x64>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b14      	subs	r3, #20
 80077b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3b04      	subs	r3, #4
 80077c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f06f 0202 	mvn.w	r2, #2
 80077ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3b20      	subs	r3, #32
 80077d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	080077e5 	.word	0x080077e5

080077e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80077ee:	4b12      	ldr	r3, [pc, #72]	; (8007838 <prvTaskExitError+0x54>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d00a      	beq.n	800780e <prvTaskExitError+0x2a>
        __asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	60fb      	str	r3, [r7, #12]
    }
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <prvTaskExitError+0x28>
        __asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	60bb      	str	r3, [r7, #8]
    }
 8007820:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007822:	bf00      	nop
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0fc      	beq.n	8007824 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	24000014 	.word	0x24000014
 800783c:	00000000 	.word	0x00000000

08007840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <pxCurrentTCBConst2>)
 8007842:	6819      	ldr	r1, [r3, #0]
 8007844:	6808      	ldr	r0, [r1, #0]
 8007846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784a:	f380 8809 	msr	PSP, r0
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8811 	msr	BASEPRI, r0
 800785a:	4770      	bx	lr
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst2>:
 8007860:	240001c4 	.word	0x240001c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007868:	4808      	ldr	r0, [pc, #32]	; (800788c <prvPortStartFirstTask+0x24>)
 800786a:	6800      	ldr	r0, [r0, #0]
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f380 8808 	msr	MSP, r0
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8814 	msr	CONTROL, r0
 800787a:	b662      	cpsie	i
 800787c:	b661      	cpsie	f
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	df00      	svc	0
 8007888:	bf00      	nop
 800788a:	0000      	.short	0x0000
 800788c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop

08007894 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800789a:	4b46      	ldr	r3, [pc, #280]	; (80079b4 <xPortStartScheduler+0x120>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a46      	ldr	r2, [pc, #280]	; (80079b8 <xPortStartScheduler+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d10a      	bne.n	80078ba <xPortStartScheduler+0x26>
        __asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	613b      	str	r3, [r7, #16]
    }
 80078b6:	bf00      	nop
 80078b8:	e7fe      	b.n	80078b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078ba:	4b3e      	ldr	r3, [pc, #248]	; (80079b4 <xPortStartScheduler+0x120>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a3f      	ldr	r2, [pc, #252]	; (80079bc <xPortStartScheduler+0x128>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d10a      	bne.n	80078da <xPortStartScheduler+0x46>
        __asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	60fb      	str	r3, [r7, #12]
    }
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078da:	4b39      	ldr	r3, [pc, #228]	; (80079c0 <xPortStartScheduler+0x12c>)
 80078dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	22ff      	movs	r2, #255	; 0xff
 80078ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	4b31      	ldr	r3, [pc, #196]	; (80079c4 <xPortStartScheduler+0x130>)
 8007900:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007902:	4b31      	ldr	r3, [pc, #196]	; (80079c8 <xPortStartScheduler+0x134>)
 8007904:	2207      	movs	r2, #7
 8007906:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007908:	e009      	b.n	800791e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800790a:	4b2f      	ldr	r3, [pc, #188]	; (80079c8 <xPortStartScheduler+0x134>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3b01      	subs	r3, #1
 8007910:	4a2d      	ldr	r2, [pc, #180]	; (80079c8 <xPortStartScheduler+0x134>)
 8007912:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b2db      	uxtb	r3, r3
 800791c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007926:	2b80      	cmp	r3, #128	; 0x80
 8007928:	d0ef      	beq.n	800790a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800792a:	4b27      	ldr	r3, [pc, #156]	; (80079c8 <xPortStartScheduler+0x134>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f1c3 0307 	rsb	r3, r3, #7
 8007932:	2b04      	cmp	r3, #4
 8007934:	d00a      	beq.n	800794c <xPortStartScheduler+0xb8>
        __asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60bb      	str	r3, [r7, #8]
    }
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800794c:	4b1e      	ldr	r3, [pc, #120]	; (80079c8 <xPortStartScheduler+0x134>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	4a1d      	ldr	r2, [pc, #116]	; (80079c8 <xPortStartScheduler+0x134>)
 8007954:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007956:	4b1c      	ldr	r3, [pc, #112]	; (80079c8 <xPortStartScheduler+0x134>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800795e:	4a1a      	ldr	r2, [pc, #104]	; (80079c8 <xPortStartScheduler+0x134>)
 8007960:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800796a:	4b18      	ldr	r3, [pc, #96]	; (80079cc <xPortStartScheduler+0x138>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a17      	ldr	r2, [pc, #92]	; (80079cc <xPortStartScheduler+0x138>)
 8007970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007974:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007976:	4b15      	ldr	r3, [pc, #84]	; (80079cc <xPortStartScheduler+0x138>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a14      	ldr	r2, [pc, #80]	; (80079cc <xPortStartScheduler+0x138>)
 800797c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007980:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007982:	f000 f963 	bl	8007c4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <xPortStartScheduler+0x13c>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800798c:	f000 f982 	bl	8007c94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007990:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <xPortStartScheduler+0x140>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a0f      	ldr	r2, [pc, #60]	; (80079d4 <xPortStartScheduler+0x140>)
 8007996:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800799a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800799c:	f7ff ff64 	bl	8007868 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80079a0:	f7ff f8a2 	bl	8006ae8 <vTaskSwitchContext>
    prvTaskExitError();
 80079a4:	f7ff ff1e 	bl	80077e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	e000ed00 	.word	0xe000ed00
 80079b8:	410fc271 	.word	0x410fc271
 80079bc:	410fc270 	.word	0x410fc270
 80079c0:	e000e400 	.word	0xe000e400
 80079c4:	24000700 	.word	0x24000700
 80079c8:	24000704 	.word	0x24000704
 80079cc:	e000ed20 	.word	0xe000ed20
 80079d0:	24000014 	.word	0x24000014
 80079d4:	e000ef34 	.word	0xe000ef34

080079d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079de:	4b37      	ldr	r3, [pc, #220]	; (8007abc <vInitPrioGroupValue+0xe4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a37      	ldr	r2, [pc, #220]	; (8007ac0 <vInitPrioGroupValue+0xe8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10a      	bne.n	80079fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	613b      	str	r3, [r7, #16]
    }
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079fe:	4b2f      	ldr	r3, [pc, #188]	; (8007abc <vInitPrioGroupValue+0xe4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a30      	ldr	r2, [pc, #192]	; (8007ac4 <vInitPrioGroupValue+0xec>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d10a      	bne.n	8007a1e <vInitPrioGroupValue+0x46>
        __asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60fb      	str	r3, [r7, #12]
    }
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a1e:	4b2a      	ldr	r3, [pc, #168]	; (8007ac8 <vInitPrioGroupValue+0xf0>)
 8007a20:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	22ff      	movs	r2, #255	; 0xff
 8007a2e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	4b22      	ldr	r3, [pc, #136]	; (8007acc <vInitPrioGroupValue+0xf4>)
 8007a44:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a46:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007a48:	2207      	movs	r2, #7
 8007a4a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a4c:	e009      	b.n	8007a62 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007a4e:	4b20      	ldr	r3, [pc, #128]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	4a1e      	ldr	r2, [pc, #120]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007a56:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a6a:	2b80      	cmp	r3, #128	; 0x80
 8007a6c:	d0ef      	beq.n	8007a4e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a6e:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f1c3 0307 	rsb	r3, r3, #7
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d00a      	beq.n	8007a90 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	60bb      	str	r3, [r7, #8]
    }
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a90:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	4a0e      	ldr	r2, [pc, #56]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007a98:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aa2:	4a0b      	ldr	r2, [pc, #44]	; (8007ad0 <vInitPrioGroupValue+0xf8>)
 8007aa4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	e000ed00 	.word	0xe000ed00
 8007ac0:	410fc271 	.word	0x410fc271
 8007ac4:	410fc270 	.word	0x410fc270
 8007ac8:	e000e400 	.word	0xe000e400
 8007acc:	24000700 	.word	0x24000700
 8007ad0:	24000704 	.word	0x24000704

08007ad4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
        __asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	607b      	str	r3, [r7, #4]
    }
 8007aec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <vPortEnterCritical+0x58>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	4a0d      	ldr	r2, [pc, #52]	; (8007b2c <vPortEnterCritical+0x58>)
 8007af6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <vPortEnterCritical+0x58>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d10f      	bne.n	8007b20 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <vPortEnterCritical+0x5c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <vPortEnterCritical+0x4c>
        __asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	603b      	str	r3, [r7, #0]
    }
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <vPortEnterCritical+0x4a>
    }
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	24000014 	.word	0x24000014
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007b3a:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <vPortExitCritical+0x50>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <vPortExitCritical+0x24>
        __asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	607b      	str	r3, [r7, #4]
    }
 8007b54:	bf00      	nop
 8007b56:	e7fe      	b.n	8007b56 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <vPortExitCritical+0x50>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <vPortExitCritical+0x50>)
 8007b60:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <vPortExitCritical+0x50>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <vPortExitCritical+0x42>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007b74:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	24000014 	.word	0x24000014
	...

08007b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007b90:	f3ef 8009 	mrs	r0, PSP
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <pxCurrentTCBConst>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	f01e 0f10 	tst.w	lr, #16
 8007ba0:	bf08      	it	eq
 8007ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	6010      	str	r0, [r2, #0]
 8007bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bb4:	f380 8811 	msr	BASEPRI, r0
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f7fe ff92 	bl	8006ae8 <vTaskSwitchContext>
 8007bc4:	f04f 0000 	mov.w	r0, #0
 8007bc8:	f380 8811 	msr	BASEPRI, r0
 8007bcc:	bc09      	pop	{r0, r3}
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	6808      	ldr	r0, [r1, #0]
 8007bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd6:	f01e 0f10 	tst.w	lr, #16
 8007bda:	bf08      	it	eq
 8007bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007be0:	f380 8809 	msr	PSP, r0
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w

08007bf0 <pxCurrentTCBConst>:
 8007bf0:	240001c4 	.word	0x240001c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
        __asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
    }
 8007c10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007c12:	f002 fbd1 	bl	800a3b8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007c16:	f7fe fe6f 	bl	80068f8 <xTaskIncrementTick>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d006      	beq.n	8007c2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007c20:	f002 fc28 	bl	800a474 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <SysTick_Handler+0x50>)
 8007c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e001      	b.n	8007c32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8007c2e:	f002 fc05 	bl	800a43c <SEGGER_SYSVIEW_RecordExitISR>
 8007c32:	2300      	movs	r3, #0
 8007c34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f383 8811 	msr	BASEPRI, r3
    }
 8007c3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <vPortSetupTimerInterrupt+0x38>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <vPortSetupTimerInterrupt+0x3c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <vPortSetupTimerInterrupt+0x40>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <vPortSetupTimerInterrupt+0x44>)
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c6e:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c70:	2207      	movs	r2, #7
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	e000e010 	.word	0xe000e010
 8007c84:	e000e018 	.word	0xe000e018
 8007c88:	24000000 	.word	0x24000000
 8007c8c:	10624dd3 	.word	0x10624dd3
 8007c90:	e000e014 	.word	0xe000e014

08007c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ca4 <vPortEnableVFP+0x10>
 8007c98:	6801      	ldr	r1, [r0, #0]
 8007c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c9e:	6001      	str	r1, [r0, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	0000      	.short	0x0000
 8007ca4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop

08007cac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007cb2:	f3ef 8305 	mrs	r3, IPSR
 8007cb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	d914      	bls.n	8007ce8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cbe:	4a17      	ldr	r2, [pc, #92]	; (8007d1c <vPortValidateInterruptPriority+0x70>)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cc8:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <vPortValidateInterruptPriority+0x74>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	7afa      	ldrb	r2, [r7, #11]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d20a      	bcs.n	8007ce8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	607b      	str	r3, [r7, #4]
    }
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <vPortValidateInterruptPriority+0x78>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cf0:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <vPortValidateInterruptPriority+0x7c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d90a      	bls.n	8007d0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	603b      	str	r3, [r7, #0]
    }
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <vPortValidateInterruptPriority+0x60>
    }
 8007d0e:	bf00      	nop
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	e000e3f0 	.word	0xe000e3f0
 8007d20:	24000700 	.word	0x24000700
 8007d24:	e000ed0c 	.word	0xe000ed0c
 8007d28:	24000704 	.word	0x24000704

08007d2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007d38:	f7fe fcbc 	bl	80066b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007d3c:	4b53      	ldr	r3, [pc, #332]	; (8007e8c <pvPortMalloc+0x160>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007d44:	f000 f908 	bl	8007f58 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d012      	beq.n	8007d74 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007d4e:	2208      	movs	r2, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	3308      	adds	r3, #8
 8007d5a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d804      	bhi.n	8007d70 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	607b      	str	r3, [r7, #4]
 8007d6e:	e001      	b.n	8007d74 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	db70      	blt.n	8007e5c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d06d      	beq.n	8007e5c <pvPortMalloc+0x130>
 8007d80:	4b43      	ldr	r3, [pc, #268]	; (8007e90 <pvPortMalloc+0x164>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d868      	bhi.n	8007e5c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007d8a:	4b42      	ldr	r3, [pc, #264]	; (8007e94 <pvPortMalloc+0x168>)
 8007d8c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007d8e:	4b41      	ldr	r3, [pc, #260]	; (8007e94 <pvPortMalloc+0x168>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d94:	e004      	b.n	8007da0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d903      	bls.n	8007db2 <pvPortMalloc+0x86>
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f1      	bne.n	8007d96 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007db2:	4b36      	ldr	r3, [pc, #216]	; (8007e8c <pvPortMalloc+0x160>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d04f      	beq.n	8007e5c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4413      	add	r3, r2
 8007dc4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	1ad2      	subs	r2, r2, r3
 8007dd6:	2308      	movs	r3, #8
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d91f      	bls.n	8007e1e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4413      	add	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <pvPortMalloc+0xda>
        __asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
    }
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	1ad2      	subs	r2, r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e18:	6978      	ldr	r0, [r7, #20]
 8007e1a:	f000 f8f9 	bl	8008010 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e1e:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <pvPortMalloc+0x164>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	4a19      	ldr	r2, [pc, #100]	; (8007e90 <pvPortMalloc+0x164>)
 8007e2a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e2c:	4b18      	ldr	r3, [pc, #96]	; (8007e90 <pvPortMalloc+0x164>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	4b19      	ldr	r3, [pc, #100]	; (8007e98 <pvPortMalloc+0x16c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d203      	bcs.n	8007e40 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e38:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <pvPortMalloc+0x164>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a16      	ldr	r2, [pc, #88]	; (8007e98 <pvPortMalloc+0x16c>)
 8007e3e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007e52:	4b12      	ldr	r3, [pc, #72]	; (8007e9c <pvPortMalloc+0x170>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3301      	adds	r3, #1
 8007e58:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <pvPortMalloc+0x170>)
 8007e5a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007e5c:	f7fe fc38 	bl	80066d0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <pvPortMalloc+0x154>
        __asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	60fb      	str	r3, [r7, #12]
    }
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <pvPortMalloc+0x152>
    return pvReturn;
 8007e80:	69fb      	ldr	r3, [r7, #28]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3728      	adds	r7, #40	; 0x28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	24013310 	.word	0x24013310
 8007e90:	24013314 	.word	0x24013314
 8007e94:	24013308 	.word	0x24013308
 8007e98:	24013318 	.word	0x24013318
 8007e9c:	2401331c 	.word	0x2401331c

08007ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d049      	beq.n	8007f46 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4413      	add	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	db0a      	blt.n	8007ede <vPortFree+0x3e>
        __asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60fb      	str	r3, [r7, #12]
    }
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <vPortFree+0x5c>
        __asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60bb      	str	r3, [r7, #8]
    }
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	0fdb      	lsrs	r3, r3, #31
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01c      	beq.n	8007f46 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d118      	bne.n	8007f46 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007f20:	f7fe fbc8 	bl	80066b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <vPortFree+0xb0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <vPortFree+0xb0>)
 8007f30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f32:	6938      	ldr	r0, [r7, #16]
 8007f34:	f000 f86c 	bl	8008010 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <vPortFree+0xb4>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	4a05      	ldr	r2, [pc, #20]	; (8007f54 <vPortFree+0xb4>)
 8007f40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007f42:	f7fe fbc5 	bl	80066d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007f46:	bf00      	nop
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	24013314 	.word	0x24013314
 8007f54:	24013320 	.word	0x24013320

08007f58 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f5e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007f62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007f64:	4b25      	ldr	r3, [pc, #148]	; (8007ffc <prvHeapInit+0xa4>)
 8007f66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00c      	beq.n	8007f8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3307      	adds	r3, #7
 8007f76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	4a1d      	ldr	r2, [pc, #116]	; (8007ffc <prvHeapInit+0xa4>)
 8007f88:	4413      	add	r3, r2
 8007f8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f90:	4a1b      	ldr	r2, [pc, #108]	; (8008000 <prvHeapInit+0xa8>)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007f96:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <prvHeapInit+0xa8>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0307 	bic.w	r3, r3, #7
 8007fb2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4a13      	ldr	r2, [pc, #76]	; (8008004 <prvHeapInit+0xac>)
 8007fb8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007fba:	4b12      	ldr	r3, [pc, #72]	; (8008004 <prvHeapInit+0xac>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007fc2:	4b10      	ldr	r3, [pc, #64]	; (8008004 <prvHeapInit+0xac>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <prvHeapInit+0xac>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	4a08      	ldr	r2, [pc, #32]	; (8008008 <prvHeapInit+0xb0>)
 8007fe6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a07      	ldr	r2, [pc, #28]	; (800800c <prvHeapInit+0xb4>)
 8007fee:	6013      	str	r3, [r2, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	24000708 	.word	0x24000708
 8008000:	24013308 	.word	0x24013308
 8008004:	24013310 	.word	0x24013310
 8008008:	24013318 	.word	0x24013318
 800800c:	24013314 	.word	0x24013314

08008010 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008018:	4b28      	ldr	r3, [pc, #160]	; (80080bc <prvInsertBlockIntoFreeList+0xac>)
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	e002      	b.n	8008024 <prvInsertBlockIntoFreeList+0x14>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d8f7      	bhi.n	800801e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d108      	bne.n	8008052 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	441a      	add	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	441a      	add	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d118      	bne.n	8008098 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <prvInsertBlockIntoFreeList+0xb0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d00d      	beq.n	800808e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	441a      	add	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	e008      	b.n	80080a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <prvInsertBlockIntoFreeList+0xb0>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	e003      	b.n	80080a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d002      	beq.n	80080ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80080ae:	bf00      	nop
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	24013308 	.word	0x24013308
 80080c0:	24013310 	.word	0x24013310

080080c4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80080c8:	4803      	ldr	r0, [pc, #12]	; (80080d8 <_cbSendSystemDesc+0x14>)
 80080ca:	f002 f91f 	bl	800a30c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80080ce:	4803      	ldr	r0, [pc, #12]	; (80080dc <_cbSendSystemDesc+0x18>)
 80080d0:	f002 f91c 	bl	800a30c <SEGGER_SYSVIEW_SendSysDesc>
}
 80080d4:	bf00      	nop
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	0800b390 	.word	0x0800b390
 80080dc:	0800b3cc 	.word	0x0800b3cc

080080e0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <SEGGER_SYSVIEW_Conf+0x20>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <SEGGER_SYSVIEW_Conf+0x20>)
 80080ea:	6819      	ldr	r1, [r3, #0]
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <SEGGER_SYSVIEW_Conf+0x24>)
 80080ee:	4a06      	ldr	r2, [pc, #24]	; (8008108 <SEGGER_SYSVIEW_Conf+0x28>)
 80080f0:	f001 fc88 	bl	8009a04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80080f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80080f8:	f001 fcc8 	bl	8009a8c <SEGGER_SYSVIEW_SetRAMBase>
}
 80080fc:	bf00      	nop
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	24000000 	.word	0x24000000
 8008104:	080080c5 	.word	0x080080c5
 8008108:	0800b480 	.word	0x0800b480

0800810c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810e:	b085      	sub	sp, #20
 8008110:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008112:	2300      	movs	r3, #0
 8008114:	607b      	str	r3, [r7, #4]
 8008116:	e048      	b.n	80081aa <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8008118:	4929      	ldr	r1, [pc, #164]	; (80081c0 <_cbSendTaskList+0xb4>)
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe ffb3 	bl	8007094 <uxTaskGetStackHighWaterMark>
 800812e:	4601      	mov	r1, r0
 8008130:	4823      	ldr	r0, [pc, #140]	; (80081c0 <_cbSendTaskList+0xb4>)
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4403      	add	r3, r0
 800813e:	3310      	adds	r3, #16
 8008140:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008142:	491f      	ldr	r1, [pc, #124]	; (80081c0 <_cbSendTaskList+0xb4>)
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	491b      	ldr	r1, [pc, #108]	; (80081c0 <_cbSendTaskList+0xb4>)
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	3304      	adds	r3, #4
 8008162:	6819      	ldr	r1, [r3, #0]
 8008164:	4c16      	ldr	r4, [pc, #88]	; (80081c0 <_cbSendTaskList+0xb4>)
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4423      	add	r3, r4
 8008172:	3308      	adds	r3, #8
 8008174:	681c      	ldr	r4, [r3, #0]
 8008176:	4d12      	ldr	r5, [pc, #72]	; (80081c0 <_cbSendTaskList+0xb4>)
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	442b      	add	r3, r5
 8008184:	330c      	adds	r3, #12
 8008186:	681d      	ldr	r5, [r3, #0]
 8008188:	4e0d      	ldr	r6, [pc, #52]	; (80081c0 <_cbSendTaskList+0xb4>)
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4433      	add	r3, r6
 8008196:	3310      	adds	r3, #16
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	462b      	mov	r3, r5
 800819e:	4622      	mov	r2, r4
 80081a0:	f000 f8be 	bl	8008320 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3301      	adds	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <_cbSendTaskList+0xb8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d3b1      	bcc.n	8008118 <_cbSendTaskList+0xc>
  }
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081be:	bf00      	nop
 80081c0:	24013324 	.word	0x24013324
 80081c4:	240133c4 	.word	0x240133c4

080081c8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80081c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80081d0:	f7fe fb80 	bl	80068d4 <xTaskGetTickCountFromISR>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2200      	movs	r2, #0
 80081d8:	469a      	mov	sl, r3
 80081da:	4693      	mov	fp, r2
 80081dc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80081e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	f04f 0a00 	mov.w	sl, #0
 80081ec:	f04f 0b00 	mov.w	fp, #0
 80081f0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80081f4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80081f8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80081fc:	4652      	mov	r2, sl
 80081fe:	465b      	mov	r3, fp
 8008200:	1a14      	subs	r4, r2, r0
 8008202:	eb63 0501 	sbc.w	r5, r3, r1
 8008206:	f04f 0200 	mov.w	r2, #0
 800820a:	f04f 0300 	mov.w	r3, #0
 800820e:	00ab      	lsls	r3, r5, #2
 8008210:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008214:	00a2      	lsls	r2, r4, #2
 8008216:	4614      	mov	r4, r2
 8008218:	461d      	mov	r5, r3
 800821a:	eb14 0800 	adds.w	r8, r4, r0
 800821e:	eb45 0901 	adc.w	r9, r5, r1
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	f04f 0300 	mov.w	r3, #0
 800822a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800822e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008236:	4690      	mov	r8, r2
 8008238:	4699      	mov	r9, r3
 800823a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800823e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008242:	4610      	mov	r0, r2
 8008244:	4619      	mov	r1, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008250 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800825e:	2205      	movs	r2, #5
 8008260:	492b      	ldr	r1, [pc, #172]	; (8008310 <SYSVIEW_AddTask+0xc0>)
 8008262:	68b8      	ldr	r0, [r7, #8]
 8008264:	f002 fbb2 	bl	800a9cc <memcmp>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d04b      	beq.n	8008306 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800826e:	4b29      	ldr	r3, [pc, #164]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b07      	cmp	r3, #7
 8008274:	d903      	bls.n	800827e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008276:	4828      	ldr	r0, [pc, #160]	; (8008318 <SYSVIEW_AddTask+0xc8>)
 8008278:	f002 fafa 	bl	800a870 <SEGGER_SYSVIEW_Warn>
    return;
 800827c:	e044      	b.n	8008308 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800827e:	4b25      	ldr	r3, [pc, #148]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4926      	ldr	r1, [pc, #152]	; (800831c <SYSVIEW_AddTask+0xcc>)
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008292:	4b20      	ldr	r3, [pc, #128]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	4921      	ldr	r1, [pc, #132]	; (800831c <SYSVIEW_AddTask+0xcc>)
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	3304      	adds	r3, #4
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80082a8:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	491b      	ldr	r1, [pc, #108]	; (800831c <SYSVIEW_AddTask+0xcc>)
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	3308      	adds	r3, #8
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80082be:	4b15      	ldr	r3, [pc, #84]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4916      	ldr	r1, [pc, #88]	; (800831c <SYSVIEW_AddTask+0xcc>)
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	330c      	adds	r3, #12
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80082d4:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4910      	ldr	r1, [pc, #64]	; (800831c <SYSVIEW_AddTask+0xcc>)
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	3310      	adds	r3, #16
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3301      	adds	r3, #1
 80082f0:	4a08      	ldr	r2, [pc, #32]	; (8008314 <SYSVIEW_AddTask+0xc4>)
 80082f2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f80e 	bl	8008320 <SYSVIEW_SendTaskInfo>
 8008304:	e000      	b.n	8008308 <SYSVIEW_AddTask+0xb8>
    return;
 8008306:	bf00      	nop

}
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0800b3dc 	.word	0x0800b3dc
 8008314:	240133c4 	.word	0x240133c4
 8008318:	0800b3e4 	.word	0x0800b3e4
 800831c:	24013324 	.word	0x24013324

08008320 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800832e:	f107 0314 	add.w	r3, r7, #20
 8008332:	2214      	movs	r2, #20
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f002 fb66 	bl	800aa08 <memset>
  TaskInfo.TaskID     = TaskID;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	4618      	mov	r0, r3
 8008356:	f001 fee1 	bl	800a11c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800835a:	bf00      	nop
 800835c:	3728      	adds	r7, #40	; 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <__NVIC_EnableIRQ>:
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800836e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008372:	2b00      	cmp	r3, #0
 8008374:	db0b      	blt.n	800838e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	f003 021f 	and.w	r2, r3, #31
 800837c:	4907      	ldr	r1, [pc, #28]	; (800839c <__NVIC_EnableIRQ+0x38>)
 800837e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	2001      	movs	r0, #1
 8008386:	fa00 f202 	lsl.w	r2, r0, r2
 800838a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	e000e100 	.word	0xe000e100

080083a0 <__NVIC_SetPriority>:
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80083ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	db0a      	blt.n	80083ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	490c      	ldr	r1, [pc, #48]	; (80083ec <__NVIC_SetPriority+0x4c>)
 80083ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083be:	0112      	lsls	r2, r2, #4
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	440b      	add	r3, r1
 80083c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083c8:	e00a      	b.n	80083e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	4908      	ldr	r1, [pc, #32]	; (80083f0 <__NVIC_SetPriority+0x50>)
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	3b04      	subs	r3, #4
 80083d8:	0112      	lsls	r2, r2, #4
 80083da:	b2d2      	uxtb	r2, r2
 80083dc:	440b      	add	r3, r1
 80083de:	761a      	strb	r2, [r3, #24]
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	e000e100 	.word	0xe000e100
 80083f0:	e000ed00 	.word	0xe000ed00

080083f4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80083fa:	f002 fa95 	bl	800a928 <SEGGER_SYSVIEW_IsStarted>
 80083fe:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8008406:	f001 fd0d 	bl	8009e24 <SEGGER_SYSVIEW_Start>
  }
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <_cbOnUARTRx+0x3c>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d806      	bhi.n	8008434 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <_cbOnUARTRx+0x3c>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	3301      	adds	r3, #1
 800842c:	b2da      	uxtb	r2, r3
 800842e:	4b08      	ldr	r3, [pc, #32]	; (8008450 <_cbOnUARTRx+0x3c>)
 8008430:	701a      	strb	r2, [r3, #0]
    goto Done;
 8008432:	e009      	b.n	8008448 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8008434:	f7ff ffde 	bl	80083f4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <_cbOnUARTRx+0x3c>)
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	4618      	mov	r0, r3
 800843e:	1dfb      	adds	r3, r7, #7
 8008440:	2201      	movs	r2, #1
 8008442:	4619      	mov	r1, r3
 8008444:	f000 fb9e 	bl	8008b84 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8008448:	bf00      	nop
}
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	24000018 	.word	0x24000018

08008454 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800845c:	4b14      	ldr	r3, [pc, #80]	; (80084b0 <_cbOnUARTTx+0x5c>)
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	2b03      	cmp	r3, #3
 8008462:	d80f      	bhi.n	8008484 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8008464:	4b12      	ldr	r3, [pc, #72]	; (80084b0 <_cbOnUARTTx+0x5c>)
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	461a      	mov	r2, r3
 800846a:	4b12      	ldr	r3, [pc, #72]	; (80084b4 <_cbOnUARTTx+0x60>)
 800846c:	5c9a      	ldrb	r2, [r3, r2]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <_cbOnUARTTx+0x5c>)
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	3301      	adds	r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <_cbOnUARTTx+0x5c>)
 800847c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800847e:	2301      	movs	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]
    goto Done;
 8008482:	e00f      	b.n	80084a4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8008484:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <_cbOnUARTTx+0x5c>)
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fa1d 	bl	80088cc <SEGGER_RTT_ReadUpBufferNoLock>
 8008492:	4603      	mov	r3, r0
 8008494:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	da02      	bge.n	80084a2 <_cbOnUARTTx+0x4e>
    r = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	e000      	b.n	80084a4 <_cbOnUARTTx+0x50>
  }
Done:
 80084a2:	bf00      	nop
  return r;
 80084a4:	68fb      	ldr	r3, [r7, #12]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	24000018 	.word	0x24000018
 80084b4:	0800b488 	.word	0x0800b488

080084b8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80084c0:	4a04      	ldr	r2, [pc, #16]	; (80084d4 <SEGGER_UART_init+0x1c>)
 80084c2:	4905      	ldr	r1, [pc, #20]	; (80084d8 <SEGGER_UART_init+0x20>)
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f865 	bl	8008594 <HIF_UART_Init>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	08008415 	.word	0x08008415
 80084d8:	08008455 	.word	0x08008455

080084dc <USART3_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART3_IRQHandler(void);
void USART3_IRQHandler(void) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80084e2:	4b1e      	ldr	r3, [pc, #120]	; (800855c <USART3_IRQHandler+0x80>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d011      	beq.n	8008516 <USART3_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 80084f2:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <USART3_IRQHandler+0x84>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f003 030b 	and.w	r3, r3, #11
 8008500:	2b00      	cmp	r3, #0
 8008502:	d108      	bne.n	8008516 <USART3_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8008504:	4b17      	ldr	r3, [pc, #92]	; (8008564 <USART3_IRQHandler+0x88>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <USART3_IRQHandler+0x3a>
        _cbOnRx(v);
 800850c:	4b15      	ldr	r3, [pc, #84]	; (8008564 <USART3_IRQHandler+0x88>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	79fa      	ldrb	r2, [r7, #7]
 8008512:	4610      	mov	r0, r2
 8008514:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <USART3_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8008520:	4b11      	ldr	r3, [pc, #68]	; (8008568 <USART3_IRQHandler+0x8c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d015      	beq.n	8008554 <USART3_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8008528:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <USART3_IRQHandler+0x8c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	1dfa      	adds	r2, r7, #7
 800852e:	4610      	mov	r0, r2
 8008530:	4798      	blx	r3
 8008532:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d106      	bne.n	8008548 <USART3_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800853a:	4b0c      	ldr	r3, [pc, #48]	; (800856c <USART3_IRQHandler+0x90>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a0b      	ldr	r2, [pc, #44]	; (800856c <USART3_IRQHandler+0x90>)
 8008540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	e006      	b.n	8008556 <USART3_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <USART3_IRQHandler+0x80>)
 800854a:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 800854c:	79fa      	ldrb	r2, [r7, #7]
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <USART3_IRQHandler+0x94>)
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e000      	b.n	8008556 <USART3_IRQHandler+0x7a>
      return;
 8008554:	bf00      	nop
    }
  }
}
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	4000481c 	.word	0x4000481c
 8008560:	40004824 	.word	0x40004824
 8008564:	240133c8 	.word	0x240133c8
 8008568:	240133cc 	.word	0x240133cc
 800856c:	40004800 	.word	0x40004800
 8008570:	40004828 	.word	0x40004828

08008574 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a04      	ldr	r2, [pc, #16]	; (8008590 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800857e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008582:	6013      	str	r3, [r2, #0]
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40004800 	.word	0x40004800

08008594 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  18);        // Enable USART3 clock
 80085a0:	4b2e      	ldr	r3, [pc, #184]	; (800865c <HIF_UART_Init+0xc8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a2d      	ldr	r2, [pc, #180]	; (800865c <HIF_UART_Init+0xc8>)
 80085a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085aa:	6013      	str	r3, [r2, #0]
  RCC_AHB4ENR |= (1 <<  3);        // Enable IO port D clock
 80085ac:	4b2c      	ldr	r3, [pc, #176]	; (8008660 <HIF_UART_Init+0xcc>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a2b      	ldr	r2, [pc, #172]	; (8008660 <HIF_UART_Init+0xcc>)
 80085b2:	f043 0308 	orr.w	r3, r3, #8
 80085b6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRH;
 80085b8:	4b2a      	ldr	r3, [pc, #168]	; (8008664 <HIF_UART_Init+0xd0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	613b      	str	r3, [r7, #16]
  v &=  ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085c4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085cc:	613b      	str	r3, [r7, #16]
  GPIO_AFRH = v;
 80085ce:	4a25      	ldr	r2, [pc, #148]	; (8008664 <HIF_UART_Init+0xd0>)
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80085d4:	4b24      	ldr	r3, [pc, #144]	; (8008668 <HIF_UART_Init+0xd4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	613b      	str	r3, [r7, #16]

  v &= ~((3UL << (GPIO_UART_TX_BITT << 1)) | (3UL << (GPIO_UART_RX_BITT << 1)));
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80085e0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BITT << 1)) | (2UL << (GPIO_UART_RX_BITT << 1)));         // PA10: alternate function
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80085e8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80085ea:	4a1f      	ldr	r2, [pc, #124]	; (8008668 <HIF_UART_Init+0xd4>)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80085f0:	4b1e      	ldr	r3, [pc, #120]	; (800866c <HIF_UART_Init+0xd8>)
 80085f2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80085f6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80085f8:	4b1d      	ldr	r3, [pc, #116]	; (8008670 <HIF_UART_Init+0xdc>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80085fe:	4b1d      	ldr	r3, [pc, #116]	; (8008674 <HIF_UART_Init+0xe0>)
 8008600:	2280      	movs	r2, #128	; 0x80
 8008602:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800860a:	4a1b      	ldr	r2, [pc, #108]	; (8008678 <HIF_UART_Init+0xe4>)
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008612:	3301      	adds	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008622:	d302      	bcc.n	800862a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8008624:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008628:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	4a11      	ldr	r2, [pc, #68]	; (800867c <HIF_UART_Init+0xe8>)
 8008636:	b29b      	uxth	r3, r3
 8008638:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800863a:	4a11      	ldr	r2, [pc, #68]	; (8008680 <HIF_UART_Init+0xec>)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8008640:	4a10      	ldr	r2, [pc, #64]	; (8008684 <HIF_UART_Init+0xf0>)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8008646:	2106      	movs	r1, #6
 8008648:	2027      	movs	r0, #39	; 0x27
 800864a:	f7ff fea9 	bl	80083a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800864e:	2027      	movs	r0, #39	; 0x27
 8008650:	f7ff fe88 	bl	8008364 <__NVIC_EnableIRQ>
}
 8008654:	bf00      	nop
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	58044480 	.word	0x58044480
 8008660:	58043800 	.word	0x58043800
 8008664:	58020c24 	.word	0x58020c24
 8008668:	58020c00 	.word	0x58020c00
 800866c:	40004800 	.word	0x40004800
 8008670:	40004804 	.word	0x40004804
 8008674:	40004808 	.word	0x40004808
 8008678:	10b07600 	.word	0x10b07600
 800867c:	4000480c 	.word	0x4000480c
 8008680:	240133c8 	.word	0x240133c8
 8008684:	240133cc 	.word	0x240133cc

08008688 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800868e:	4b26      	ldr	r3, [pc, #152]	; (8008728 <_DoInit+0xa0>)
 8008690:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8008692:	22a8      	movs	r2, #168	; 0xa8
 8008694:	2100      	movs	r1, #0
 8008696:	6838      	ldr	r0, [r7, #0]
 8008698:	f002 f9b6 	bl	800aa08 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2203      	movs	r2, #3
 80086a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2203      	movs	r2, #3
 80086a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	4a20      	ldr	r2, [pc, #128]	; (800872c <_DoInit+0xa4>)
 80086ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <_DoInit+0xa8>)
 80086b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2200      	movs	r2, #0
 80086c0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2200      	movs	r2, #0
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	4a16      	ldr	r2, [pc, #88]	; (800872c <_DoInit+0xa4>)
 80086d2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	4a17      	ldr	r2, [pc, #92]	; (8008734 <_DoInit+0xac>)
 80086d8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2210      	movs	r2, #16
 80086de:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2200      	movs	r2, #0
 80086e4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2200      	movs	r2, #0
 80086ea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80086f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	e00c      	b.n	8008716 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f1c3 030f 	rsb	r3, r3, #15
 8008702:	4a0d      	ldr	r2, [pc, #52]	; (8008738 <_DoInit+0xb0>)
 8008704:	5cd1      	ldrb	r1, [r2, r3]
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	460a      	mov	r2, r1
 800870e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3301      	adds	r3, #1
 8008714:	607b      	str	r3, [r7, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b0f      	cmp	r3, #15
 800871a:	d9ef      	bls.n	80086fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800871c:	f3bf 8f5f 	dmb	sy
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	240133d0 	.word	0x240133d0
 800872c:	0800b434 	.word	0x0800b434
 8008730:	24013478 	.word	0x24013478
 8008734:	24013878 	.word	0x24013878
 8008738:	0800b48c 	.word	0x0800b48c

0800873c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b08a      	sub	sp, #40	; 0x28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008748:	2300      	movs	r3, #0
 800874a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	429a      	cmp	r2, r3
 800875e:	d905      	bls.n	800876c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	627b      	str	r3, [r7, #36]	; 0x24
 800876a:	e007      	b.n	800877c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	69b9      	ldr	r1, [r7, #24]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	1acb      	subs	r3, r1, r3
 8008776:	4413      	add	r3, r2
 8008778:	3b01      	subs	r3, #1
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	4293      	cmp	r3, r2
 8008788:	bf28      	it	cs
 800878a:	4613      	movcs	r3, r2
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800878e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4293      	cmp	r3, r2
 8008794:	bf28      	it	cs
 8008796:	4613      	movcs	r3, r2
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	4413      	add	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80087a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	6978      	ldr	r0, [r7, #20]
 80087aa:	f002 f91f 	bl	800a9ec <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80087ae:	6a3a      	ldr	r2, [r7, #32]
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	4413      	add	r3, r2
 80087b4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	4413      	add	r3, r2
 80087bc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	4413      	add	r3, r2
 80087cc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d101      	bne.n	80087dc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80087dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1b2      	bne.n	8008752 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80087ec:	6a3b      	ldr	r3, [r7, #32]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3728      	adds	r7, #40	; 0x28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b088      	sub	sp, #32
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d911      	bls.n	800883e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	6938      	ldr	r0, [r7, #16]
 800882a:	f002 f8df 	bl	800a9ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800882e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800883c:	e01f      	b.n	800887e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	4413      	add	r3, r2
 800884a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	6938      	ldr	r0, [r7, #16]
 8008852:	f002 f8cb 	bl	800a9ec <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	4413      	add	r3, r2
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	4619      	mov	r1, r3
 800886e:	6938      	ldr	r0, [r7, #16]
 8008870:	f002 f8bc 	bl	800a9ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008874:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	60da      	str	r2, [r3, #12]
}
 800887e:	bf00      	nop
 8008880:	3720      	adds	r7, #32
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008886:	b480      	push	{r7}
 8008888:	b087      	sub	sp, #28
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d808      	bhi.n	80088b4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	4413      	add	r3, r2
 80088ae:	3b01      	subs	r3, #1
 80088b0:	617b      	str	r3, [r7, #20]
 80088b2:	e004      	b.n	80088be <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80088be:	697b      	ldr	r3, [r7, #20]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08c      	sub	sp, #48	; 0x30
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80088d8:	4b3e      	ldr	r3, [pc, #248]	; (80089d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80088da:	623b      	str	r3, [r7, #32]
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80088e6:	f7ff fecf 	bl	8008688 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	4613      	mov	r3, r2
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	4a37      	ldr	r2, [pc, #220]	; (80089d4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80088f8:	4413      	add	r3, r2
 80088fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800890c:	2300      	movs	r3, #0
 800890e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	429a      	cmp	r2, r3
 8008916:	d92b      	bls.n	8008970 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4293      	cmp	r3, r2
 8008928:	bf28      	it	cs
 800892a:	4613      	movcs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	4413      	add	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	6939      	ldr	r1, [r7, #16]
 800893c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800893e:	f002 f855 	bl	800a9ec <memcpy>
    NumBytesRead += NumBytesRem;
 8008942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	4413      	add	r3, r2
 8008948:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800894a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	4413      	add	r3, r2
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800895a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	4413      	add	r3, r2
 8008960:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008968:	429a      	cmp	r2, r3
 800896a:	d101      	bne.n	8008970 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800896c:	2300      	movs	r3, #0
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4293      	cmp	r3, r2
 800897e:	bf28      	it	cs
 8008980:	4613      	movcs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d019      	beq.n	80089be <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	4413      	add	r3, r2
 8008992:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	6939      	ldr	r1, [r7, #16]
 8008998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800899a:	f002 f827 	bl	800a9ec <memcpy>
    NumBytesRead += NumBytesRem;
 800899e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	4413      	add	r3, r2
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80089a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4413      	add	r3, r2
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80089b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3730      	adds	r7, #48	; 0x30
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	240133d0 	.word	0x240133d0

080089d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08c      	sub	sp, #48	; 0x30
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80089e4:	4b3e      	ldr	r3, [pc, #248]	; (8008ae0 <SEGGER_RTT_ReadNoLock+0x108>)
 80089e6:	623b      	str	r3, [r7, #32]
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80089f2:	f7ff fe49 	bl	8008688 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4613      	mov	r3, r2
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	4413      	add	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	3360      	adds	r3, #96	; 0x60
 8008a02:	4a37      	ldr	r2, [pc, #220]	; (8008ae0 <SEGGER_RTT_ReadNoLock+0x108>)
 8008a04:	4413      	add	r3, r2
 8008a06:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d92b      	bls.n	8008a7c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4293      	cmp	r3, r2
 8008a34:	bf28      	it	cs
 8008a36:	4613      	movcs	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	4413      	add	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	6939      	ldr	r1, [r7, #16]
 8008a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a4a:	f001 ffcf 	bl	800a9ec <memcpy>
    NumBytesRead += NumBytesRem;
 8008a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	4413      	add	r3, r2
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d101      	bne.n	8008a7c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	bf28      	it	cs
 8008a8c:	4613      	movcs	r3, r2
 8008a8e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d019      	beq.n	8008aca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	4413      	add	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	6939      	ldr	r1, [r7, #16]
 8008aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aa6:	f001 ffa1 	bl	800a9ec <memcpy>
    NumBytesRead += NumBytesRem;
 8008aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	4413      	add	r3, r2
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ad4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3730      	adds	r7, #48	; 0x30
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	240133d0 	.word	0x240133d0

08008ae4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4613      	mov	r3, r2
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	4413      	add	r3, r2
 8008afc:	00db      	lsls	r3, r3, #3
 8008afe:	3360      	adds	r3, #96	; 0x60
 8008b00:	4a1f      	ldr	r2, [pc, #124]	; (8008b80 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8008b02:	4413      	add	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d029      	beq.n	8008b62 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d82e      	bhi.n	8008b70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d013      	beq.n	8008b42 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8008b1a:	e029      	b.n	8008b70 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008b1c:	6978      	ldr	r0, [r7, #20]
 8008b1e:	f7ff feb2 	bl	8008886 <_GetAvailWriteSpace>
 8008b22:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d202      	bcs.n	8008b32 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008b30:	e021      	b.n	8008b76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	69b9      	ldr	r1, [r7, #24]
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff fe5b 	bl	80087f6 <_WriteNoCheck>
    break;
 8008b40:	e019      	b.n	8008b76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f7ff fe9f 	bl	8008886 <_GetAvailWriteSpace>
 8008b48:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	bf28      	it	cs
 8008b52:	4613      	movcs	r3, r2
 8008b54:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f7ff fe4b 	bl	80087f6 <_WriteNoCheck>
    break;
 8008b60:	e009      	b.n	8008b76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	69b9      	ldr	r1, [r7, #24]
 8008b66:	6978      	ldr	r0, [r7, #20]
 8008b68:	f7ff fde8 	bl	800873c <_WriteBlocking>
 8008b6c:	61f8      	str	r0, [r7, #28]
    break;
 8008b6e:	e002      	b.n	8008b76 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61fb      	str	r3, [r7, #28]
    break;
 8008b74:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8008b76:	69fb      	ldr	r3, [r7, #28]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3720      	adds	r7, #32
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	240133d0 	.word	0x240133d0

08008b84 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8008b90:	4b0e      	ldr	r3, [pc, #56]	; (8008bcc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8008b92:	61fb      	str	r3, [r7, #28]
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8008b9e:	f7ff fd73 	bl	8008688 <_DoInit>
  SEGGER_RTT_LOCK();
 8008ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ba6:	f04f 0120 	mov.w	r1, #32
 8008baa:	f381 8811 	msr	BASEPRI, r1
 8008bae:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7ff ff95 	bl	8008ae4 <SEGGER_RTT_WriteDownBufferNoLock>
 8008bba:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8008bc2:	697b      	ldr	r3, [r7, #20]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	240133d0 	.word	0x240133d0

08008bd0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008bde:	4b3d      	ldr	r3, [pc, #244]	; (8008cd4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008bec:	f7ff fd4c 	bl	8008688 <_DoInit>
  SEGGER_RTT_LOCK();
 8008bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8008bf4:	f04f 0120 	mov.w	r1, #32
 8008bf8:	f381 8811 	msr	BASEPRI, r1
 8008bfc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008bfe:	4b35      	ldr	r3, [pc, #212]	; (8008cd4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008c00:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008c06:	6939      	ldr	r1, [r7, #16]
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	4413      	add	r3, r2
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	440b      	add	r3, r1
 8008c16:	3304      	adds	r3, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	3301      	adds	r3, #1
 8008c22:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	dbeb      	blt.n	8008c06 <SEGGER_RTT_AllocUpBuffer+0x36>
 8008c2e:	e000      	b.n	8008c32 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008c30:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	da3f      	bge.n	8008cbc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008c3c:	6939      	ldr	r1, [r7, #16]
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	4613      	mov	r3, r2
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008c50:	6939      	ldr	r1, [r7, #16]
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	4613      	mov	r3, r2
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	4413      	add	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	440b      	add	r3, r1
 8008c60:	3304      	adds	r3, #4
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008c66:	6939      	ldr	r1, [r7, #16]
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	440b      	add	r3, r1
 8008c74:	3320      	adds	r3, #32
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008c7a:	6939      	ldr	r1, [r7, #16]
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	4413      	add	r3, r2
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	440b      	add	r3, r1
 8008c88:	3328      	adds	r3, #40	; 0x28
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008c8e:	6939      	ldr	r1, [r7, #16]
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	4613      	mov	r3, r2
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	4413      	add	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3324      	adds	r3, #36	; 0x24
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008ca2:	6939      	ldr	r1, [r7, #16]
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4413      	add	r3, r2
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	440b      	add	r3, r1
 8008cb0:	332c      	adds	r3, #44	; 0x2c
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008cb6:	f3bf 8f5f 	dmb	sy
 8008cba:	e002      	b.n	8008cc2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3720      	adds	r7, #32
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	240133d0 	.word	0x240133d0

08008cd8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008ce6:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008ce8:	623b      	str	r3, [r7, #32]
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008cf4:	f7ff fcc8 	bl	8008688 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008cf8:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008cfa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d82c      	bhi.n	8008d5c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8008d02:	f3ef 8311 	mrs	r3, BASEPRI
 8008d06:	f04f 0120 	mov.w	r1, #32
 8008d0a:	f381 8811 	msr	BASEPRI, r1
 8008d0e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4613      	mov	r3, r2
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	4413      	add	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	3360      	adds	r3, #96	; 0x60
 8008d1c:	69fa      	ldr	r2, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00e      	beq.n	8008d46 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2200      	movs	r2, #0
 8008d44:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008d4c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
 8008d5a:	e002      	b.n	8008d62 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3728      	adds	r7, #40	; 0x28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	240133d0 	.word	0x240133d0

08008d70 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00f      	beq.n	8008da6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8008d86:	e002      	b.n	8008d8e <_EncodeStr+0x1e>
      Len++;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	4413      	add	r3, r2
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f6      	bne.n	8008d88 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d901      	bls.n	8008da6 <_EncodeStr+0x36>
      Len = Limit;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2bfe      	cmp	r3, #254	; 0xfe
 8008daa:	d806      	bhi.n	8008dba <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	60fa      	str	r2, [r7, #12]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	b2d2      	uxtb	r2, r2
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	e011      	b.n	8008dde <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	60fa      	str	r2, [r7, #12]
 8008dc0:	22ff      	movs	r2, #255	; 0xff
 8008dc2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	60fa      	str	r2, [r7, #12]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	b2d2      	uxtb	r2, r2
 8008dce:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	0a19      	lsrs	r1, r3, #8
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	60fa      	str	r2, [r7, #12]
 8008dda:	b2ca      	uxtb	r2, r1
 8008ddc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008de2:	e00a      	b.n	8008dfa <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	1c53      	adds	r3, r2, #1
 8008de8:	60bb      	str	r3, [r7, #8]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1c59      	adds	r1, r3, #1
 8008dee:	60f9      	str	r1, [r7, #12]
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	701a      	strb	r2, [r3, #0]
    n++;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	3301      	adds	r3, #1
 8008df8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d3f0      	bcc.n	8008de4 <_EncodeStr+0x74>
  }
  return pPayload;
 8008e02:	68fb      	ldr	r3, [r7, #12]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3307      	adds	r3, #7
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008e2e:	4b35      	ldr	r3, [pc, #212]	; (8008f04 <_HandleIncomingPacket+0xdc>)
 8008e30:	7e1b      	ldrb	r3, [r3, #24]
 8008e32:	4618      	mov	r0, r3
 8008e34:	1cfb      	adds	r3, r7, #3
 8008e36:	2201      	movs	r2, #1
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f7ff fdcd 	bl	80089d8 <SEGGER_RTT_ReadNoLock>
 8008e3e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d052      	beq.n	8008eec <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	2b80      	cmp	r3, #128	; 0x80
 8008e4a:	d031      	beq.n	8008eb0 <_HandleIncomingPacket+0x88>
 8008e4c:	2b80      	cmp	r3, #128	; 0x80
 8008e4e:	dc40      	bgt.n	8008ed2 <_HandleIncomingPacket+0xaa>
 8008e50:	2b07      	cmp	r3, #7
 8008e52:	dc15      	bgt.n	8008e80 <_HandleIncomingPacket+0x58>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dd3c      	ble.n	8008ed2 <_HandleIncomingPacket+0xaa>
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b06      	cmp	r3, #6
 8008e5c:	d839      	bhi.n	8008ed2 <_HandleIncomingPacket+0xaa>
 8008e5e:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <_HandleIncomingPacket+0x3c>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e87 	.word	0x08008e87
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e93 	.word	0x08008e93
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008e9f 	.word	0x08008e9f
 8008e78:	08008ea5 	.word	0x08008ea5
 8008e7c:	08008eab 	.word	0x08008eab
 8008e80:	2b7f      	cmp	r3, #127	; 0x7f
 8008e82:	d035      	beq.n	8008ef0 <_HandleIncomingPacket+0xc8>
 8008e84:	e025      	b.n	8008ed2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008e86:	f000 ffcd 	bl	8009e24 <SEGGER_SYSVIEW_Start>
      break;
 8008e8a:	e036      	b.n	8008efa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008e8c:	f001 f886 	bl	8009f9c <SEGGER_SYSVIEW_Stop>
      break;
 8008e90:	e033      	b.n	8008efa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008e92:	f001 fa5f 	bl	800a354 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008e96:	e030      	b.n	8008efa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008e98:	f001 fa24 	bl	800a2e4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008e9c:	e02d      	b.n	8008efa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008e9e:	f001 f8a3 	bl	8009fe8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008ea2:	e02a      	b.n	8008efa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008ea4:	f001 fc92 	bl	800a7cc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008ea8:	e027      	b.n	8008efa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008eaa:	f001 fc71 	bl	800a790 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008eae:	e024      	b.n	8008efa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008eb0:	4b14      	ldr	r3, [pc, #80]	; (8008f04 <_HandleIncomingPacket+0xdc>)
 8008eb2:	7e1b      	ldrb	r3, [r3, #24]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	1cfb      	adds	r3, r7, #3
 8008eb8:	2201      	movs	r2, #1
 8008eba:	4619      	mov	r1, r3
 8008ebc:	f7ff fd8c 	bl	80089d8 <SEGGER_RTT_ReadNoLock>
 8008ec0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d015      	beq.n	8008ef4 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008ec8:	78fb      	ldrb	r3, [r7, #3]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 fbe0 	bl	800a690 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008ed0:	e010      	b.n	8008ef4 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	b25b      	sxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	da0e      	bge.n	8008ef8 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008eda:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <_HandleIncomingPacket+0xdc>)
 8008edc:	7e1b      	ldrb	r3, [r3, #24]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	1cfb      	adds	r3, r7, #3
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f7ff fd77 	bl	80089d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008eea:	e005      	b.n	8008ef8 <_HandleIncomingPacket+0xd0>
    }
  }
 8008eec:	bf00      	nop
 8008eee:	e004      	b.n	8008efa <_HandleIncomingPacket+0xd2>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e002      	b.n	8008efa <_HandleIncomingPacket+0xd2>
      break;
 8008ef4:	bf00      	nop
 8008ef6:	e000      	b.n	8008efa <_HandleIncomingPacket+0xd2>
      break;
 8008ef8:	bf00      	nop
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	24014890 	.word	0x24014890

08008f08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08c      	sub	sp, #48	; 0x30
 8008f0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008f0e:	2301      	movs	r3, #1
 8008f10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	3301      	adds	r3, #1
 8008f16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f1c:	4b32      	ldr	r3, [pc, #200]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f22:	e00b      	b.n	8008f3c <_TrySendOverflowPacket+0x34>
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	1c59      	adds	r1, r3, #1
 8008f2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f32:	b2d2      	uxtb	r2, r2
 8008f34:	701a      	strb	r2, [r3, #0]
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	09db      	lsrs	r3, r3, #7
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f40:	d8f0      	bhi.n	8008f24 <_TrySendOverflowPacket+0x1c>
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008f52:	4b26      	ldr	r3, [pc, #152]	; (8008fec <_TrySendOverflowPacket+0xe4>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008f58:	4b23      	ldr	r3, [pc, #140]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	623b      	str	r3, [r7, #32]
 8008f6a:	e00b      	b.n	8008f84 <_TrySendOverflowPacket+0x7c>
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	1c59      	adds	r1, r3, #1
 8008f74:	6279      	str	r1, [r7, #36]	; 0x24
 8008f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	09db      	lsrs	r3, r3, #7
 8008f82:	623b      	str	r3, [r7, #32]
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	2b7f      	cmp	r3, #127	; 0x7f
 8008f88:	d8f0      	bhi.n	8008f6c <_TrySendOverflowPacket+0x64>
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8008f90:	6a3a      	ldr	r2, [r7, #32]
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8008f9a:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	1d3b      	adds	r3, r7, #4
 8008fa2:	69fa      	ldr	r2, [r7, #28]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	1d3b      	adds	r3, r7, #4
 8008faa:	4619      	mov	r1, r3
 8008fac:	f7f7 f9a0 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8008fb4:	f7ff fade 	bl	8008574 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d009      	beq.n	8008fd2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008fbe:	4a0a      	ldr	r2, [pc, #40]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008fc4:	4b08      	ldr	r3, [pc, #32]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008fce:	701a      	strb	r2, [r3, #0]
 8008fd0:	e004      	b.n	8008fdc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	4a03      	ldr	r2, [pc, #12]	; (8008fe8 <_TrySendOverflowPacket+0xe0>)
 8008fda:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008fdc:	693b      	ldr	r3, [r7, #16]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3730      	adds	r7, #48	; 0x30
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	24014890 	.word	0x24014890
 8008fec:	e0001004 	.word	0xe0001004

08008ff0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08a      	sub	sp, #40	; 0x28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008ffc:	4b96      	ldr	r3, [pc, #600]	; (8009258 <_SendPacket+0x268>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d010      	beq.n	8009026 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009004:	4b94      	ldr	r3, [pc, #592]	; (8009258 <_SendPacket+0x268>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 8130 	beq.w	800926e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800900e:	4b92      	ldr	r3, [pc, #584]	; (8009258 <_SendPacket+0x268>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d109      	bne.n	800902a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8009016:	f7ff ff77 	bl	8008f08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800901a:	4b8f      	ldr	r3, [pc, #572]	; (8009258 <_SendPacket+0x268>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b01      	cmp	r3, #1
 8009020:	f040 8127 	bne.w	8009272 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8009024:	e001      	b.n	800902a <_SendPacket+0x3a>
    goto Send;
 8009026:	bf00      	nop
 8009028:	e000      	b.n	800902c <_SendPacket+0x3c>
Send:
 800902a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b1f      	cmp	r3, #31
 8009030:	d809      	bhi.n	8009046 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009032:	4b89      	ldr	r3, [pc, #548]	; (8009258 <_SendPacket+0x268>)
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 8118 	bne.w	8009276 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b17      	cmp	r3, #23
 800904a:	d807      	bhi.n	800905c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3b01      	subs	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	b2da      	uxtb	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	e0c4      	b.n	80091e6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	2b7f      	cmp	r3, #127	; 0x7f
 8009068:	d912      	bls.n	8009090 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	09da      	lsrs	r2, r3, #7
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3b01      	subs	r3, #1
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	3a01      	subs	r2, #1
 8009082:	60fa      	str	r2, [r7, #12]
 8009084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009088:	b2da      	uxtb	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e006      	b.n	800909e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3b01      	subs	r3, #1
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	b2da      	uxtb	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b7e      	cmp	r3, #126	; 0x7e
 80090a2:	d807      	bhi.n	80090b4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	e098      	b.n	80091e6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090ba:	d212      	bcs.n	80090e2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	09da      	lsrs	r2, r3, #7
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	3a01      	subs	r2, #1
 80090d4:	60fa      	str	r2, [r7, #12]
 80090d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	701a      	strb	r2, [r3, #0]
 80090e0:	e081      	b.n	80091e6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090e8:	d21d      	bcs.n	8009126 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	0b9a      	lsrs	r2, r3, #14
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	b2d2      	uxtb	r2, r2
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	09db      	lsrs	r3, r3, #7
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	3a01      	subs	r2, #1
 8009104:	60fa      	str	r2, [r7, #12]
 8009106:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800910a:	b2da      	uxtb	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	3a01      	subs	r2, #1
 8009118:	60fa      	str	r2, [r7, #12]
 800911a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800911e:	b2da      	uxtb	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	701a      	strb	r2, [r3, #0]
 8009124:	e05f      	b.n	80091e6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800912c:	d228      	bcs.n	8009180 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	0d5a      	lsrs	r2, r3, #21
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3b01      	subs	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	b2d2      	uxtb	r2, r2
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	0b9b      	lsrs	r3, r3, #14
 8009142:	b2db      	uxtb	r3, r3
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	3a01      	subs	r2, #1
 8009148:	60fa      	str	r2, [r7, #12]
 800914a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800914e:	b2da      	uxtb	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	09db      	lsrs	r3, r3, #7
 8009158:	b2db      	uxtb	r3, r3
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	3a01      	subs	r2, #1
 800915e:	60fa      	str	r2, [r7, #12]
 8009160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009164:	b2da      	uxtb	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	b2db      	uxtb	r3, r3
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	3a01      	subs	r2, #1
 8009172:	60fa      	str	r2, [r7, #12]
 8009174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009178:	b2da      	uxtb	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	701a      	strb	r2, [r3, #0]
 800917e:	e032      	b.n	80091e6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	0f1a      	lsrs	r2, r3, #28
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3b01      	subs	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	0d5b      	lsrs	r3, r3, #21
 8009194:	b2db      	uxtb	r3, r3
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	3a01      	subs	r2, #1
 800919a:	60fa      	str	r2, [r7, #12]
 800919c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	0b9b      	lsrs	r3, r3, #14
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	3a01      	subs	r2, #1
 80091b0:	60fa      	str	r2, [r7, #12]
 80091b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	09db      	lsrs	r3, r3, #7
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	3a01      	subs	r2, #1
 80091c6:	60fa      	str	r2, [r7, #12]
 80091c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	3a01      	subs	r2, #1
 80091da:	60fa      	str	r2, [r7, #12]
 80091dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80091e6:	4b1d      	ldr	r3, [pc, #116]	; (800925c <_SendPacket+0x26c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <_SendPacket+0x268>)
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	623b      	str	r3, [r7, #32]
 80091fe:	e00b      	b.n	8009218 <_SendPacket+0x228>
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	b2da      	uxtb	r2, r3
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	1c59      	adds	r1, r3, #1
 8009208:	6279      	str	r1, [r7, #36]	; 0x24
 800920a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800920e:	b2d2      	uxtb	r2, r2
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	09db      	lsrs	r3, r3, #7
 8009216:	623b      	str	r3, [r7, #32]
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	2b7f      	cmp	r3, #127	; 0x7f
 800921c:	d8f0      	bhi.n	8009200 <_SendPacket+0x210>
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	627a      	str	r2, [r7, #36]	; 0x24
 8009224:	6a3a      	ldr	r2, [r7, #32]
 8009226:	b2d2      	uxtb	r2, r2
 8009228:	701a      	strb	r2, [r3, #0]
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800922e:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <_SendPacket+0x268>)
 8009230:	785b      	ldrb	r3, [r3, #1]
 8009232:	4618      	mov	r0, r3
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	461a      	mov	r2, r3
 800923c:	68f9      	ldr	r1, [r7, #12]
 800923e:	f7f7 f857 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009242:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8009244:	f7ff f996 	bl	8008574 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800924e:	4a02      	ldr	r2, [pc, #8]	; (8009258 <_SendPacket+0x268>)
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	60d3      	str	r3, [r2, #12]
 8009254:	e010      	b.n	8009278 <_SendPacket+0x288>
 8009256:	bf00      	nop
 8009258:	24014890 	.word	0x24014890
 800925c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009260:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <_SendPacket+0x2d8>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	b2da      	uxtb	r2, r3
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <_SendPacket+0x2d8>)
 800926a:	701a      	strb	r2, [r3, #0]
 800926c:	e004      	b.n	8009278 <_SendPacket+0x288>
    goto SendDone;
 800926e:	bf00      	nop
 8009270:	e002      	b.n	8009278 <_SendPacket+0x288>
      goto SendDone;
 8009272:	bf00      	nop
 8009274:	e000      	b.n	8009278 <_SendPacket+0x288>
      goto SendDone;
 8009276:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009278:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <_SendPacket+0x2d8>)
 800927a:	7e1b      	ldrb	r3, [r3, #24]
 800927c:	4619      	mov	r1, r3
 800927e:	4a13      	ldr	r2, [pc, #76]	; (80092cc <_SendPacket+0x2dc>)
 8009280:	460b      	mov	r3, r1
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	440b      	add	r3, r1
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	336c      	adds	r3, #108	; 0x6c
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <_SendPacket+0x2d8>)
 8009290:	7e1b      	ldrb	r3, [r3, #24]
 8009292:	4618      	mov	r0, r3
 8009294:	490d      	ldr	r1, [pc, #52]	; (80092cc <_SendPacket+0x2dc>)
 8009296:	4603      	mov	r3, r0
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4403      	add	r3, r0
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	440b      	add	r3, r1
 80092a0:	3370      	adds	r3, #112	; 0x70
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d00b      	beq.n	80092c0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80092a8:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <_SendPacket+0x2d8>)
 80092aa:	789b      	ldrb	r3, [r3, #2]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d107      	bne.n	80092c0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80092b0:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <_SendPacket+0x2d8>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80092b6:	f7ff fdb7 	bl	8008e28 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80092ba:	4b03      	ldr	r3, [pc, #12]	; (80092c8 <_SendPacket+0x2d8>)
 80092bc:	2200      	movs	r2, #0
 80092be:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80092c0:	bf00      	nop
 80092c2:	3728      	adds	r7, #40	; 0x28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	24014890 	.word	0x24014890
 80092cc:	240133d0 	.word	0x240133d0

080092d0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	; 0x28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	3301      	adds	r3, #1
 80092e6:	2b80      	cmp	r3, #128	; 0x80
 80092e8:	d80a      	bhi.n	8009300 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	1c59      	adds	r1, r3, #1
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	6051      	str	r1, [r2, #4]
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	2b80      	cmp	r3, #128	; 0x80
 8009306:	d15a      	bne.n	80093be <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	b2d2      	uxtb	r2, r2
 8009312:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	623b      	str	r3, [r7, #32]
 8009328:	e00b      	b.n	8009342 <_StoreChar+0x72>
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	b2da      	uxtb	r2, r3
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	1c59      	adds	r1, r3, #1
 8009332:	6279      	str	r1, [r7, #36]	; 0x24
 8009334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	701a      	strb	r2, [r3, #0]
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	09db      	lsrs	r3, r3, #7
 8009340:	623b      	str	r3, [r7, #32]
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	2b7f      	cmp	r3, #127	; 0x7f
 8009346:	d8f0      	bhi.n	800932a <_StoreChar+0x5a>
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	627a      	str	r2, [r7, #36]	; 0x24
 800934e:	6a3a      	ldr	r2, [r7, #32]
 8009350:	b2d2      	uxtb	r2, r2
 8009352:	701a      	strb	r2, [r3, #0]
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	61fb      	str	r3, [r7, #28]
 800935c:	2300      	movs	r3, #0
 800935e:	61bb      	str	r3, [r7, #24]
 8009360:	e00b      	b.n	800937a <_StoreChar+0xaa>
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	b2da      	uxtb	r2, r3
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	1c59      	adds	r1, r3, #1
 800936a:	61f9      	str	r1, [r7, #28]
 800936c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	09db      	lsrs	r3, r3, #7
 8009378:	61bb      	str	r3, [r7, #24]
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b7f      	cmp	r3, #127	; 0x7f
 800937e:	d8f0      	bhi.n	8009362 <_StoreChar+0x92>
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	61fa      	str	r2, [r7, #28]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	b2d2      	uxtb	r2, r2
 800938a:	701a      	strb	r2, [r3, #0]
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	221a      	movs	r2, #26
 8009396:	6939      	ldr	r1, [r7, #16]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fe29 	bl	8008ff0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fd34 	bl	8008e10 <_PreparePacket>
 80093a8:	4602      	mov	r2, r0
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	611a      	str	r2, [r3, #16]
  }
}
 80093be:	bf00      	nop
 80093c0:	3728      	adds	r7, #40	; 0x28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	; 0x28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80093da:	2301      	movs	r3, #1
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80093de:	2301      	movs	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80093e2:	e007      	b.n	80093f4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80093e4:	6a3a      	ldr	r2, [r7, #32]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ec:	623b      	str	r3, [r7, #32]
    Width++;
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	3301      	adds	r3, #1
 80093f2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80093f4:	6a3a      	ldr	r2, [r7, #32]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d2f3      	bcs.n	80093e4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	429a      	cmp	r2, r3
 8009402:	d901      	bls.n	8009408 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d11f      	bne.n	8009452 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	2b00      	cmp	r3, #0
 8009416:	d01c      	beq.n	8009452 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8009418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941a:	f003 0302 	and.w	r3, r3, #2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <_PrintUnsigned+0x66>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <_PrintUnsigned+0x66>
        c = '0';
 8009428:	2330      	movs	r3, #48	; 0x30
 800942a:	76fb      	strb	r3, [r7, #27]
 800942c:	e001      	b.n	8009432 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800942e:	2320      	movs	r3, #32
 8009430:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009432:	e007      	b.n	8009444 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	3b01      	subs	r3, #1
 8009438:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800943a:	7efb      	ldrb	r3, [r7, #27]
 800943c:	4619      	mov	r1, r3
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff ff46 	bl	80092d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <_PrintUnsigned+0x8a>
 800944a:	69fa      	ldr	r2, [r7, #28]
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	429a      	cmp	r2, r3
 8009450:	d3f0      	bcc.n	8009434 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d903      	bls.n	8009460 <_PrintUnsigned+0x98>
      NumDigits--;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	603b      	str	r3, [r7, #0]
 800945e:	e009      	b.n	8009474 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	fbb2 f3f3 	udiv	r3, r2, r3
 8009468:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	429a      	cmp	r2, r3
 8009470:	d200      	bcs.n	8009474 <_PrintUnsigned+0xac>
        break;
 8009472:	e005      	b.n	8009480 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	fb02 f303 	mul.w	r3, r2, r3
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800947e:	e7e8      	b.n	8009452 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	fbb2 f3f3 	udiv	r3, r2, r3
 8009488:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8009498:	4a15      	ldr	r2, [pc, #84]	; (80094f0 <_PrintUnsigned+0x128>)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	4413      	add	r3, r2
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	4619      	mov	r1, r3
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff ff14 	bl	80092d0 <_StoreChar>
    Digit /= Base;
 80094a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e3      	bne.n	8009480 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80094b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d011      	beq.n	80094e6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00e      	beq.n	80094e6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80094c8:	e006      	b.n	80094d8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	3b01      	subs	r3, #1
 80094ce:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80094d0:	2120      	movs	r1, #32
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fefc 	bl	80092d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <_PrintUnsigned+0x11e>
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d3f1      	bcc.n	80094ca <_PrintUnsigned+0x102>
      }
    }
  }
}
 80094e6:	bf00      	nop
 80094e8:	3728      	adds	r7, #40	; 0x28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	0800b4ac 	.word	0x0800b4ac

080094f4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af02      	add	r7, sp, #8
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
 8009500:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfb8      	it	lt
 8009508:	425b      	neglt	r3, r3
 800950a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800950c:	2301      	movs	r3, #1
 800950e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009510:	e007      	b.n	8009522 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	fb92 f3f3 	sdiv	r3, r2, r3
 800951a:	613b      	str	r3, [r7, #16]
    Width++;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	3301      	adds	r3, #1
 8009520:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	daf3      	bge.n	8009512 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	429a      	cmp	r2, r3
 8009530:	d901      	bls.n	8009536 <_PrintInt+0x42>
    Width = NumDigits;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <_PrintInt+0x5e>
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	db04      	blt.n	800954c <_PrintInt+0x58>
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <_PrintInt+0x5e>
    FieldWidth--;
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	3b01      	subs	r3, #1
 8009550:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <_PrintInt+0x6e>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d016      	beq.n	8009590 <_PrintInt+0x9c>
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d111      	bne.n	8009590 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00e      	beq.n	8009590 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009572:	e006      	b.n	8009582 <_PrintInt+0x8e>
        FieldWidth--;
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	3b01      	subs	r3, #1
 8009578:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800957a:	2120      	movs	r1, #32
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7ff fea7 	bl	80092d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <_PrintInt+0x9c>
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	429a      	cmp	r2, r3
 800958e:	d3f1      	bcc.n	8009574 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	da07      	bge.n	80095a6 <_PrintInt+0xb2>
    v = -v;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	425b      	negs	r3, r3
 800959a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800959c:	212d      	movs	r1, #45	; 0x2d
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff fe96 	bl	80092d0 <_StoreChar>
 80095a4:	e008      	b.n	80095b8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80095b0:	212b      	movs	r1, #43	; 0x2b
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff fe8c 	bl	80092d0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d019      	beq.n	80095f6 <_PrintInt+0x102>
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d114      	bne.n	80095f6 <_PrintInt+0x102>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d111      	bne.n	80095f6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00e      	beq.n	80095f6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80095d8:	e006      	b.n	80095e8 <_PrintInt+0xf4>
        FieldWidth--;
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	3b01      	subs	r3, #1
 80095de:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80095e0:	2130      	movs	r1, #48	; 0x30
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff fe74 	bl	80092d0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <_PrintInt+0x102>
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d3f1      	bcc.n	80095da <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff fedf 	bl	80093c8 <_PrintUnsigned>
}
 800960a:	bf00      	nop
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8009614:	b580      	push	{r7, lr}
 8009616:	b098      	sub	sp, #96	; 0x60
 8009618:	af02      	add	r7, sp, #8
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009620:	f3ef 8311 	mrs	r3, BASEPRI
 8009624:	f04f 0120 	mov.w	r1, #32
 8009628:	f381 8811 	msr	BASEPRI, r1
 800962c:	633b      	str	r3, [r7, #48]	; 0x30
 800962e:	48b7      	ldr	r0, [pc, #732]	; (800990c <_VPrintTarget+0x2f8>)
 8009630:	f7ff fbee 	bl	8008e10 <_PreparePacket>
 8009634:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8009636:	4bb5      	ldr	r3, [pc, #724]	; (800990c <_VPrintTarget+0x2f8>)
 8009638:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800963a:	2300      	movs	r3, #0
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	3301      	adds	r3, #1
 8009646:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3301      	adds	r3, #1
 8009658:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800965a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 8183 	beq.w	800996a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8009664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009668:	2b25      	cmp	r3, #37	; 0x25
 800966a:	f040 8170 	bne.w	800994e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800966e:	2300      	movs	r3, #0
 8009670:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8009672:	2301      	movs	r3, #1
 8009674:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800967e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009682:	3b23      	subs	r3, #35	; 0x23
 8009684:	2b0d      	cmp	r3, #13
 8009686:	d83f      	bhi.n	8009708 <_VPrintTarget+0xf4>
 8009688:	a201      	add	r2, pc, #4	; (adr r2, 8009690 <_VPrintTarget+0x7c>)
 800968a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968e:	bf00      	nop
 8009690:	080096f9 	.word	0x080096f9
 8009694:	08009709 	.word	0x08009709
 8009698:	08009709 	.word	0x08009709
 800969c:	08009709 	.word	0x08009709
 80096a0:	08009709 	.word	0x08009709
 80096a4:	08009709 	.word	0x08009709
 80096a8:	08009709 	.word	0x08009709
 80096ac:	08009709 	.word	0x08009709
 80096b0:	080096e9 	.word	0x080096e9
 80096b4:	08009709 	.word	0x08009709
 80096b8:	080096c9 	.word	0x080096c9
 80096bc:	08009709 	.word	0x08009709
 80096c0:	08009709 	.word	0x08009709
 80096c4:	080096d9 	.word	0x080096d9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80096c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3301      	adds	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e01a      	b.n	800970e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80096d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096da:	f043 0302 	orr.w	r3, r3, #2
 80096de:	64bb      	str	r3, [r7, #72]	; 0x48
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	e012      	b.n	800970e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80096e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ea:	f043 0304 	orr.w	r3, r3, #4
 80096ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	e00a      	b.n	800970e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80096f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096fa:	f043 0308 	orr.w	r3, r3, #8
 80096fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	e002      	b.n	800970e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8009708:	2300      	movs	r3, #0
 800970a:	653b      	str	r3, [r7, #80]	; 0x50
 800970c:	bf00      	nop
        }
      } while (v);
 800970e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1b0      	bne.n	8009676 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8009714:	2300      	movs	r3, #0
 8009716:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8009720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009724:	2b2f      	cmp	r3, #47	; 0x2f
 8009726:	d912      	bls.n	800974e <_VPrintTarget+0x13a>
 8009728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800972c:	2b39      	cmp	r3, #57	; 0x39
 800972e:	d80e      	bhi.n	800974e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8009736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	461a      	mov	r2, r3
 8009742:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009746:	4413      	add	r3, r2
 8009748:	3b30      	subs	r3, #48	; 0x30
 800974a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800974c:	e7e4      	b.n	8009718 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800974e:	2300      	movs	r3, #0
 8009750:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800975a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800975e:	2b2e      	cmp	r3, #46	; 0x2e
 8009760:	d11d      	bne.n	800979e <_VPrintTarget+0x18a>
        sFormat++;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3301      	adds	r3, #1
 8009766:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8009770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009774:	2b2f      	cmp	r3, #47	; 0x2f
 8009776:	d912      	bls.n	800979e <_VPrintTarget+0x18a>
 8009778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800977c:	2b39      	cmp	r3, #57	; 0x39
 800977e:	d80e      	bhi.n	800979e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8009786:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009788:	4613      	mov	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	461a      	mov	r2, r3
 8009792:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009796:	4413      	add	r3, r2
 8009798:	3b30      	subs	r3, #48	; 0x30
 800979a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800979c:	e7e4      	b.n	8009768 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80097a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097aa:	2b6c      	cmp	r3, #108	; 0x6c
 80097ac:	d003      	beq.n	80097b6 <_VPrintTarget+0x1a2>
 80097ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097b2:	2b68      	cmp	r3, #104	; 0x68
 80097b4:	d107      	bne.n	80097c6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3301      	adds	r3, #1
 80097c2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80097c4:	e7ef      	b.n	80097a6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80097c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097ca:	2b25      	cmp	r3, #37	; 0x25
 80097cc:	f000 80b3 	beq.w	8009936 <_VPrintTarget+0x322>
 80097d0:	2b25      	cmp	r3, #37	; 0x25
 80097d2:	f2c0 80b7 	blt.w	8009944 <_VPrintTarget+0x330>
 80097d6:	2b78      	cmp	r3, #120	; 0x78
 80097d8:	f300 80b4 	bgt.w	8009944 <_VPrintTarget+0x330>
 80097dc:	2b58      	cmp	r3, #88	; 0x58
 80097de:	f2c0 80b1 	blt.w	8009944 <_VPrintTarget+0x330>
 80097e2:	3b58      	subs	r3, #88	; 0x58
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	f200 80ad 	bhi.w	8009944 <_VPrintTarget+0x330>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <_VPrintTarget+0x1dc>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	080098e7 	.word	0x080098e7
 80097f4:	08009945 	.word	0x08009945
 80097f8:	08009945 	.word	0x08009945
 80097fc:	08009945 	.word	0x08009945
 8009800:	08009945 	.word	0x08009945
 8009804:	08009945 	.word	0x08009945
 8009808:	08009945 	.word	0x08009945
 800980c:	08009945 	.word	0x08009945
 8009810:	08009945 	.word	0x08009945
 8009814:	08009945 	.word	0x08009945
 8009818:	08009945 	.word	0x08009945
 800981c:	08009875 	.word	0x08009875
 8009820:	0800989b 	.word	0x0800989b
 8009824:	08009945 	.word	0x08009945
 8009828:	08009945 	.word	0x08009945
 800982c:	08009945 	.word	0x08009945
 8009830:	08009945 	.word	0x08009945
 8009834:	08009945 	.word	0x08009945
 8009838:	08009945 	.word	0x08009945
 800983c:	08009945 	.word	0x08009945
 8009840:	08009945 	.word	0x08009945
 8009844:	08009945 	.word	0x08009945
 8009848:	08009945 	.word	0x08009945
 800984c:	08009945 	.word	0x08009945
 8009850:	08009911 	.word	0x08009911
 8009854:	08009945 	.word	0x08009945
 8009858:	08009945 	.word	0x08009945
 800985c:	08009945 	.word	0x08009945
 8009860:	08009945 	.word	0x08009945
 8009864:	080098c1 	.word	0x080098c1
 8009868:	08009945 	.word	0x08009945
 800986c:	08009945 	.word	0x08009945
 8009870:	080098e7 	.word	0x080098e7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	1d19      	adds	r1, r3, #4
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6011      	str	r1, [r2, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8009882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8009888:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800988c:	f107 0314 	add.w	r3, r7, #20
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff fd1c 	bl	80092d0 <_StoreChar>
        break;
 8009898:	e055      	b.n	8009946 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	1d19      	adds	r1, r3, #4
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	6011      	str	r1, [r2, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80098a8:	f107 0014 	add.w	r0, r7, #20
 80098ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b6:	220a      	movs	r2, #10
 80098b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098ba:	f7ff fe1b 	bl	80094f4 <_PrintInt>
        break;
 80098be:	e042      	b.n	8009946 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	1d19      	adds	r1, r3, #4
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	6011      	str	r1, [r2, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80098ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098d0:	f107 0014 	add.w	r0, r7, #20
 80098d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098de:	220a      	movs	r2, #10
 80098e0:	f7ff fd72 	bl	80093c8 <_PrintUnsigned>
        break;
 80098e4:	e02f      	b.n	8009946 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	1d19      	adds	r1, r3, #4
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6011      	str	r1, [r2, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80098f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098f6:	f107 0014 	add.w	r0, r7, #20
 80098fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009904:	2210      	movs	r2, #16
 8009906:	f7ff fd5f 	bl	80093c8 <_PrintUnsigned>
        break;
 800990a:	e01c      	b.n	8009946 <_VPrintTarget+0x332>
 800990c:	240148c0 	.word	0x240148c0
      case 'p':
        v = va_arg(*pParamList, int);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	1d19      	adds	r1, r3, #4
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6011      	str	r1, [r2, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800991e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009920:	f107 0014 	add.w	r0, r7, #20
 8009924:	2300      	movs	r3, #0
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	2308      	movs	r3, #8
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	2308      	movs	r3, #8
 800992e:	2210      	movs	r2, #16
 8009930:	f7ff fd4a 	bl	80093c8 <_PrintUnsigned>
        break;
 8009934:	e007      	b.n	8009946 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8009936:	f107 0314 	add.w	r3, r7, #20
 800993a:	2125      	movs	r1, #37	; 0x25
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fcc7 	bl	80092d0 <_StoreChar>
        break;
 8009942:	e000      	b.n	8009946 <_VPrintTarget+0x332>
      default:
        break;
 8009944:	bf00      	nop
      }
      sFormat++;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	e007      	b.n	800995e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800994e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009952:	f107 0314 	add.w	r3, r7, #20
 8009956:	4611      	mov	r1, r2
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff fcb9 	bl	80092d0 <_StoreChar>
    }
  } while (*sFormat);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	f47f ae72 	bne.w	800964c <_VPrintTarget+0x38>
 8009968:	e000      	b.n	800996c <_VPrintTarget+0x358>
      break;
 800996a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	2b00      	cmp	r3, #0
 8009970:	d041      	beq.n	80099f6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8009972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	643b      	str	r3, [r7, #64]	; 0x40
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009982:	e00b      	b.n	800999c <_VPrintTarget+0x388>
 8009984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009986:	b2da      	uxtb	r2, r3
 8009988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998a:	1c59      	adds	r1, r3, #1
 800998c:	6439      	str	r1, [r7, #64]	; 0x40
 800998e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	701a      	strb	r2, [r3, #0]
 8009996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009998:	09db      	lsrs	r3, r3, #7
 800999a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800999c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999e:	2b7f      	cmp	r3, #127	; 0x7f
 80099a0:	d8f0      	bhi.n	8009984 <_VPrintTarget+0x370>
 80099a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	643a      	str	r2, [r7, #64]	; 0x40
 80099a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099b0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80099b6:	2300      	movs	r3, #0
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
 80099ba:	e00b      	b.n	80099d4 <_VPrintTarget+0x3c0>
 80099bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	1c59      	adds	r1, r3, #1
 80099c4:	63b9      	str	r1, [r7, #56]	; 0x38
 80099c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d0:	09db      	lsrs	r3, r3, #7
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34
 80099d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d6:	2b7f      	cmp	r3, #127	; 0x7f
 80099d8:	d8f0      	bhi.n	80099bc <_VPrintTarget+0x3a8>
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	63ba      	str	r2, [r7, #56]	; 0x38
 80099e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099e2:	b2d2      	uxtb	r2, r2
 80099e4:	701a      	strb	r2, [r3, #0]
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	69b9      	ldr	r1, [r7, #24]
 80099ee:	221a      	movs	r2, #26
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fafd 	bl	8008ff0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80099fc:	bf00      	nop
 80099fe:	3758      	adds	r7, #88	; 0x58
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009a12:	2300      	movs	r3, #0
 8009a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a18:	4917      	ldr	r1, [pc, #92]	; (8009a78 <SEGGER_SYSVIEW_Init+0x74>)
 8009a1a:	4818      	ldr	r0, [pc, #96]	; (8009a7c <SEGGER_SYSVIEW_Init+0x78>)
 8009a1c:	f7ff f8d8 	bl	8008bd0 <SEGGER_RTT_AllocUpBuffer>
 8009a20:	4603      	mov	r3, r0
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	4b16      	ldr	r3, [pc, #88]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a26:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a2a:	785a      	ldrb	r2, [r3, #1]
 8009a2c:	4b14      	ldr	r3, [pc, #80]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a2e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009a30:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a32:	7e1b      	ldrb	r3, [r3, #24]
 8009a34:	4618      	mov	r0, r3
 8009a36:	2300      	movs	r3, #0
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	2308      	movs	r3, #8
 8009a3c:	4a11      	ldr	r2, [pc, #68]	; (8009a84 <SEGGER_SYSVIEW_Init+0x80>)
 8009a3e:	490f      	ldr	r1, [pc, #60]	; (8009a7c <SEGGER_SYSVIEW_Init+0x78>)
 8009a40:	f7ff f94a 	bl	8008cd8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <SEGGER_SYSVIEW_Init+0x84>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a0c      	ldr	r2, [pc, #48]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a50:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8009a52:	4a0b      	ldr	r2, [pc, #44]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009a58:	4a09      	ldr	r2, [pc, #36]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009a5e:	4a08      	ldr	r2, [pc, #32]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009a64:	4a06      	ldr	r2, [pc, #24]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <SEGGER_SYSVIEW_Init+0x7c>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009a70:	bf00      	nop
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	24013888 	.word	0x24013888
 8009a7c:	0800b440 	.word	0x0800b440
 8009a80:	24014890 	.word	0x24014890
 8009a84:	24014888 	.word	0x24014888
 8009a88:	e0001004 	.word	0xe0001004

08009a8c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009a94:	4a04      	ldr	r2, [pc, #16]	; (8009aa8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6113      	str	r3, [r2, #16]
}
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	24014890 	.word	0x24014890

08009aac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ab8:	f04f 0120 	mov.w	r1, #32
 8009abc:	f381 8811 	msr	BASEPRI, r1
 8009ac0:	60fb      	str	r3, [r7, #12]
 8009ac2:	4808      	ldr	r0, [pc, #32]	; (8009ae4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009ac4:	f7ff f9a4 	bl	8008e10 <_PreparePacket>
 8009ac8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	68b8      	ldr	r0, [r7, #8]
 8009ad0:	f7ff fa8e 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f383 8811 	msr	BASEPRI, r3
}
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	240148c0 	.word	0x240148c0

08009ae8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009af2:	f3ef 8311 	mrs	r3, BASEPRI
 8009af6:	f04f 0120 	mov.w	r1, #32
 8009afa:	f381 8811 	msr	BASEPRI, r1
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	4816      	ldr	r0, [pc, #88]	; (8009b5c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8009b02:	f7ff f985 	bl	8008e10 <_PreparePacket>
 8009b06:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	61fb      	str	r3, [r7, #28]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	61bb      	str	r3, [r7, #24]
 8009b14:	e00b      	b.n	8009b2e <SEGGER_SYSVIEW_RecordU32+0x46>
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	1c59      	adds	r1, r3, #1
 8009b1e:	61f9      	str	r1, [r7, #28]
 8009b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b24:	b2d2      	uxtb	r2, r2
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	09db      	lsrs	r3, r3, #7
 8009b2c:	61bb      	str	r3, [r7, #24]
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b7f      	cmp	r3, #127	; 0x7f
 8009b32:	d8f0      	bhi.n	8009b16 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	61fa      	str	r2, [r7, #28]
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	b2d2      	uxtb	r2, r2
 8009b3e:	701a      	strb	r2, [r3, #0]
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	6938      	ldr	r0, [r7, #16]
 8009b4a:	f7ff fa51 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f383 8811 	msr	BASEPRI, r3
}
 8009b54:	bf00      	nop
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	240148c0 	.word	0x240148c0

08009b60 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08c      	sub	sp, #48	; 0x30
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8009b70:	f04f 0120 	mov.w	r1, #32
 8009b74:	f381 8811 	msr	BASEPRI, r1
 8009b78:	61fb      	str	r3, [r7, #28]
 8009b7a:	4825      	ldr	r0, [pc, #148]	; (8009c10 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009b7c:	f7ff f948 	bl	8008e10 <_PreparePacket>
 8009b80:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b8e:	e00b      	b.n	8009ba8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	1c59      	adds	r1, r3, #1
 8009b98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	09db      	lsrs	r3, r3, #7
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	2b7f      	cmp	r3, #127	; 0x7f
 8009bac:	d8f0      	bhi.n	8009b90 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	701a      	strb	r2, [r3, #0]
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	623b      	str	r3, [r7, #32]
 8009bc6:	e00b      	b.n	8009be0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	1c59      	adds	r1, r3, #1
 8009bd0:	6279      	str	r1, [r7, #36]	; 0x24
 8009bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bd6:	b2d2      	uxtb	r2, r2
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	09db      	lsrs	r3, r3, #7
 8009bde:	623b      	str	r3, [r7, #32]
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	2b7f      	cmp	r3, #127	; 0x7f
 8009be4:	d8f0      	bhi.n	8009bc8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	627a      	str	r2, [r7, #36]	; 0x24
 8009bec:	6a3a      	ldr	r2, [r7, #32]
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	6979      	ldr	r1, [r7, #20]
 8009bfa:	69b8      	ldr	r0, [r7, #24]
 8009bfc:	f7ff f9f8 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f383 8811 	msr	BASEPRI, r3
}
 8009c06:	bf00      	nop
 8009c08:	3730      	adds	r7, #48	; 0x30
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	240148c0 	.word	0x240148c0

08009c14 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08e      	sub	sp, #56	; 0x38
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
 8009c20:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8009c22:	f3ef 8311 	mrs	r3, BASEPRI
 8009c26:	f04f 0120 	mov.w	r1, #32
 8009c2a:	f381 8811 	msr	BASEPRI, r1
 8009c2e:	61fb      	str	r3, [r7, #28]
 8009c30:	4832      	ldr	r0, [pc, #200]	; (8009cfc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8009c32:	f7ff f8ed 	bl	8008e10 <_PreparePacket>
 8009c36:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	633b      	str	r3, [r7, #48]	; 0x30
 8009c44:	e00b      	b.n	8009c5e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	1c59      	adds	r1, r3, #1
 8009c4e:	6379      	str	r1, [r7, #52]	; 0x34
 8009c50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	09db      	lsrs	r3, r3, #7
 8009c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	2b7f      	cmp	r3, #127	; 0x7f
 8009c62:	d8f0      	bhi.n	8009c46 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8009c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	637a      	str	r2, [r7, #52]	; 0x34
 8009c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c7c:	e00b      	b.n	8009c96 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	1c59      	adds	r1, r3, #1
 8009c86:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	09db      	lsrs	r3, r3, #7
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	2b7f      	cmp	r3, #127	; 0x7f
 8009c9a:	d8f0      	bhi.n	8009c7e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ca4:	b2d2      	uxtb	r2, r2
 8009ca6:	701a      	strb	r2, [r3, #0]
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	623b      	str	r3, [r7, #32]
 8009cb4:	e00b      	b.n	8009cce <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	1c59      	adds	r1, r3, #1
 8009cbe:	6279      	str	r1, [r7, #36]	; 0x24
 8009cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009cc4:	b2d2      	uxtb	r2, r2
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	09db      	lsrs	r3, r3, #7
 8009ccc:	623b      	str	r3, [r7, #32]
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8009cd2:	d8f0      	bhi.n	8009cb6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	627a      	str	r2, [r7, #36]	; 0x24
 8009cda:	6a3a      	ldr	r2, [r7, #32]
 8009cdc:	b2d2      	uxtb	r2, r2
 8009cde:	701a      	strb	r2, [r3, #0]
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	6979      	ldr	r1, [r7, #20]
 8009ce8:	69b8      	ldr	r0, [r7, #24]
 8009cea:	f7ff f981 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	f383 8811 	msr	BASEPRI, r3
}
 8009cf4:	bf00      	nop
 8009cf6:	3738      	adds	r7, #56	; 0x38
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	240148c0 	.word	0x240148c0

08009d00 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b090      	sub	sp, #64	; 0x40
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8009d12:	f04f 0120 	mov.w	r1, #32
 8009d16:	f381 8811 	msr	BASEPRI, r1
 8009d1a:	61fb      	str	r3, [r7, #28]
 8009d1c:	4840      	ldr	r0, [pc, #256]	; (8009e20 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009d1e:	f7ff f877 	bl	8008e10 <_PreparePacket>
 8009d22:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d30:	e00b      	b.n	8009d4a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d38:	1c59      	adds	r1, r3, #1
 8009d3a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009d3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d40:	b2d2      	uxtb	r2, r2
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	09db      	lsrs	r3, r3, #7
 8009d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d4e:	d8f0      	bhi.n	8009d32 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d58:	b2d2      	uxtb	r2, r2
 8009d5a:	701a      	strb	r2, [r3, #0]
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	637b      	str	r3, [r7, #52]	; 0x34
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	633b      	str	r3, [r7, #48]	; 0x30
 8009d68:	e00b      	b.n	8009d82 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d70:	1c59      	adds	r1, r3, #1
 8009d72:	6379      	str	r1, [r7, #52]	; 0x34
 8009d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d78:	b2d2      	uxtb	r2, r2
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	09db      	lsrs	r3, r3, #7
 8009d80:	633b      	str	r3, [r7, #48]	; 0x30
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	2b7f      	cmp	r3, #127	; 0x7f
 8009d86:	d8f0      	bhi.n	8009d6a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	637a      	str	r2, [r7, #52]	; 0x34
 8009d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d90:	b2d2      	uxtb	r2, r2
 8009d92:	701a      	strb	r2, [r3, #0]
 8009d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009da0:	e00b      	b.n	8009dba <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	1c59      	adds	r1, r3, #1
 8009daa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009db0:	b2d2      	uxtb	r2, r2
 8009db2:	701a      	strb	r2, [r3, #0]
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	09db      	lsrs	r3, r3, #7
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8009dbe:	d8f0      	bhi.n	8009da2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8009dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc8:	b2d2      	uxtb	r2, r2
 8009dca:	701a      	strb	r2, [r3, #0]
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd6:	623b      	str	r3, [r7, #32]
 8009dd8:	e00b      	b.n	8009df2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	1c59      	adds	r1, r3, #1
 8009de2:	6279      	str	r1, [r7, #36]	; 0x24
 8009de4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009de8:	b2d2      	uxtb	r2, r2
 8009dea:	701a      	strb	r2, [r3, #0]
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	09db      	lsrs	r3, r3, #7
 8009df0:	623b      	str	r3, [r7, #32]
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	2b7f      	cmp	r3, #127	; 0x7f
 8009df6:	d8f0      	bhi.n	8009dda <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8009dfe:	6a3a      	ldr	r2, [r7, #32]
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	701a      	strb	r2, [r3, #0]
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	6979      	ldr	r1, [r7, #20]
 8009e0c:	69b8      	ldr	r0, [r7, #24]
 8009e0e:	f7ff f8ef 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	f383 8811 	msr	BASEPRI, r3
}
 8009e18:	bf00      	nop
 8009e1a:	3740      	adds	r7, #64	; 0x40
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	240148c0 	.word	0x240148c0

08009e24 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08c      	sub	sp, #48	; 0x30
 8009e28:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009e2a:	4b59      	ldr	r3, [pc, #356]	; (8009f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009e30:	f3ef 8311 	mrs	r3, BASEPRI
 8009e34:	f04f 0120 	mov.w	r1, #32
 8009e38:	f381 8811 	msr	BASEPRI, r1
 8009e3c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009e3e:	4b54      	ldr	r3, [pc, #336]	; (8009f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8009e40:	785b      	ldrb	r3, [r3, #1]
 8009e42:	220a      	movs	r2, #10
 8009e44:	4953      	ldr	r1, [pc, #332]	; (8009f94 <SEGGER_SYSVIEW_Start+0x170>)
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7f6 fa52 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8009e52:	f7fe fb8f 	bl	8008574 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009e56:	200a      	movs	r0, #10
 8009e58:	f7ff fe28 	bl	8009aac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8009e60:	f04f 0120 	mov.w	r1, #32
 8009e64:	f381 8811 	msr	BASEPRI, r1
 8009e68:	60bb      	str	r3, [r7, #8]
 8009e6a:	484b      	ldr	r0, [pc, #300]	; (8009f98 <SEGGER_SYSVIEW_Start+0x174>)
 8009e6c:	f7fe ffd0 	bl	8008e10 <_PreparePacket>
 8009e70:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e7a:	4b45      	ldr	r3, [pc, #276]	; (8009f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e80:	e00b      	b.n	8009e9a <SEGGER_SYSVIEW_Start+0x76>
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	1c59      	adds	r1, r3, #1
 8009e8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	09db      	lsrs	r3, r3, #7
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8009e9e:	d8f0      	bhi.n	8009e82 <SEGGER_SYSVIEW_Start+0x5e>
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ea8:	b2d2      	uxtb	r2, r2
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb4:	4b36      	ldr	r3, [pc, #216]	; (8009f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	623b      	str	r3, [r7, #32]
 8009eba:	e00b      	b.n	8009ed4 <SEGGER_SYSVIEW_Start+0xb0>
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	1c59      	adds	r1, r3, #1
 8009ec4:	6279      	str	r1, [r7, #36]	; 0x24
 8009ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009eca:	b2d2      	uxtb	r2, r2
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	09db      	lsrs	r3, r3, #7
 8009ed2:	623b      	str	r3, [r7, #32]
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8009ed8:	d8f0      	bhi.n	8009ebc <SEGGER_SYSVIEW_Start+0x98>
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	627a      	str	r2, [r7, #36]	; 0x24
 8009ee0:	6a3a      	ldr	r2, [r7, #32]
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	61fb      	str	r3, [r7, #28]
 8009eee:	4b28      	ldr	r3, [pc, #160]	; (8009f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	61bb      	str	r3, [r7, #24]
 8009ef4:	e00b      	b.n	8009f0e <SEGGER_SYSVIEW_Start+0xea>
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	1c59      	adds	r1, r3, #1
 8009efe:	61f9      	str	r1, [r7, #28]
 8009f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f04:	b2d2      	uxtb	r2, r2
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	09db      	lsrs	r3, r3, #7
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b7f      	cmp	r3, #127	; 0x7f
 8009f12:	d8f0      	bhi.n	8009ef6 <SEGGER_SYSVIEW_Start+0xd2>
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	61fa      	str	r2, [r7, #28]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	b2d2      	uxtb	r2, r2
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	e00b      	b.n	8009f46 <SEGGER_SYSVIEW_Start+0x122>
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	1c59      	adds	r1, r3, #1
 8009f36:	6179      	str	r1, [r7, #20]
 8009f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f3c:	b2d2      	uxtb	r2, r2
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	09db      	lsrs	r3, r3, #7
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2b7f      	cmp	r3, #127	; 0x7f
 8009f4a:	d8f0      	bhi.n	8009f2e <SEGGER_SYSVIEW_Start+0x10a>
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	617a      	str	r2, [r7, #20]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	b2d2      	uxtb	r2, r2
 8009f56:	701a      	strb	r2, [r3, #0]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009f5c:	2218      	movs	r2, #24
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7ff f845 	bl	8008ff0 <_SendPacket>
      RECORD_END();
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009f6c:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009f74:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009f7a:	f000 f9eb 	bl	800a354 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009f7e:	f000 f9b1 	bl	800a2e4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009f82:	f000 fc23 	bl	800a7cc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009f86:	bf00      	nop
 8009f88:	3730      	adds	r7, #48	; 0x30
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	24014890 	.word	0x24014890
 8009f94:	0800b4a0 	.word	0x0800b4a0
 8009f98:	240148c0 	.word	0x240148c0

08009f9c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8009fa6:	f04f 0120 	mov.w	r1, #32
 8009faa:	f381 8811 	msr	BASEPRI, r1
 8009fae:	607b      	str	r3, [r7, #4]
 8009fb0:	480b      	ldr	r0, [pc, #44]	; (8009fe0 <SEGGER_SYSVIEW_Stop+0x44>)
 8009fb2:	f7fe ff2d 	bl	8008e10 <_PreparePacket>
 8009fb6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <SEGGER_SYSVIEW_Stop+0x48>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d007      	beq.n	8009fd0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009fc0:	220b      	movs	r2, #11
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6838      	ldr	r0, [r7, #0]
 8009fc6:	f7ff f813 	bl	8008ff0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <SEGGER_SYSVIEW_Stop+0x48>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f383 8811 	msr	BASEPRI, r3
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	240148c0 	.word	0x240148c0
 8009fe4:	24014890 	.word	0x24014890

08009fe8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08c      	sub	sp, #48	; 0x30
 8009fec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009fee:	f3ef 8311 	mrs	r3, BASEPRI
 8009ff2:	f04f 0120 	mov.w	r1, #32
 8009ff6:	f381 8811 	msr	BASEPRI, r1
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	4845      	ldr	r0, [pc, #276]	; (800a114 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009ffe:	f7fe ff07 	bl	8008e10 <_PreparePacket>
 800a002:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a00c:	4b42      	ldr	r3, [pc, #264]	; (800a118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	62bb      	str	r3, [r7, #40]	; 0x28
 800a012:	e00b      	b.n	800a02c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	b2da      	uxtb	r2, r3
 800a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01a:	1c59      	adds	r1, r3, #1
 800a01c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a01e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a022:	b2d2      	uxtb	r2, r2
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	09db      	lsrs	r3, r3, #7
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	2b7f      	cmp	r3, #127	; 0x7f
 800a030:	d8f0      	bhi.n	800a014 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	1c5a      	adds	r2, r3, #1
 800a036:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	701a      	strb	r2, [r3, #0]
 800a03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a040:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
 800a046:	4b34      	ldr	r3, [pc, #208]	; (800a118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	623b      	str	r3, [r7, #32]
 800a04c:	e00b      	b.n	800a066 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	b2da      	uxtb	r2, r3
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	1c59      	adds	r1, r3, #1
 800a056:	6279      	str	r1, [r7, #36]	; 0x24
 800a058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	701a      	strb	r2, [r3, #0]
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	09db      	lsrs	r3, r3, #7
 800a064:	623b      	str	r3, [r7, #32]
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	2b7f      	cmp	r3, #127	; 0x7f
 800a06a:	d8f0      	bhi.n	800a04e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	627a      	str	r2, [r7, #36]	; 0x24
 800a072:	6a3a      	ldr	r2, [r7, #32]
 800a074:	b2d2      	uxtb	r2, r2
 800a076:	701a      	strb	r2, [r3, #0]
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	4b25      	ldr	r3, [pc, #148]	; (800a118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	61bb      	str	r3, [r7, #24]
 800a086:	e00b      	b.n	800a0a0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	1c59      	adds	r1, r3, #1
 800a090:	61f9      	str	r1, [r7, #28]
 800a092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	09db      	lsrs	r3, r3, #7
 800a09e:	61bb      	str	r3, [r7, #24]
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a0a4:	d8f0      	bhi.n	800a088 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	61fa      	str	r2, [r7, #28]
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	617b      	str	r3, [r7, #20]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	613b      	str	r3, [r7, #16]
 800a0be:	e00b      	b.n	800a0d8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	1c59      	adds	r1, r3, #1
 800a0c8:	6179      	str	r1, [r7, #20]
 800a0ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	09db      	lsrs	r3, r3, #7
 800a0d6:	613b      	str	r3, [r7, #16]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	2b7f      	cmp	r3, #127	; 0x7f
 800a0dc:	d8f0      	bhi.n	800a0c0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	617a      	str	r2, [r7, #20]
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	701a      	strb	r2, [r3, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a0ee:	2218      	movs	r2, #24
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	68b8      	ldr	r0, [r7, #8]
 800a0f4:	f7fe ff7c 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a0fe:	4b06      	ldr	r3, [pc, #24]	; (800a118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a106:	4b04      	ldr	r3, [pc, #16]	; (800a118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	4798      	blx	r3
  }
}
 800a10c:	bf00      	nop
 800a10e:	3730      	adds	r7, #48	; 0x30
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	240148c0 	.word	0x240148c0
 800a118:	24014890 	.word	0x24014890

0800a11c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b092      	sub	sp, #72	; 0x48
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a124:	f3ef 8311 	mrs	r3, BASEPRI
 800a128:	f04f 0120 	mov.w	r1, #32
 800a12c:	f381 8811 	msr	BASEPRI, r1
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	486a      	ldr	r0, [pc, #424]	; (800a2dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a134:	f7fe fe6c 	bl	8008e10 <_PreparePacket>
 800a138:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	647b      	str	r3, [r7, #68]	; 0x44
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b66      	ldr	r3, [pc, #408]	; (800a2e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	643b      	str	r3, [r7, #64]	; 0x40
 800a14e:	e00b      	b.n	800a168 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a152:	b2da      	uxtb	r2, r3
 800a154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a156:	1c59      	adds	r1, r3, #1
 800a158:	6479      	str	r1, [r7, #68]	; 0x44
 800a15a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	701a      	strb	r2, [r3, #0]
 800a162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a164:	09db      	lsrs	r3, r3, #7
 800a166:	643b      	str	r3, [r7, #64]	; 0x40
 800a168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16a:	2b7f      	cmp	r3, #127	; 0x7f
 800a16c:	d8f0      	bhi.n	800a150 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a170:	1c5a      	adds	r2, r3, #1
 800a172:	647a      	str	r2, [r7, #68]	; 0x44
 800a174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]
 800a17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a17c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	63bb      	str	r3, [r7, #56]	; 0x38
 800a188:	e00b      	b.n	800a1a2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a190:	1c59      	adds	r1, r3, #1
 800a192:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	09db      	lsrs	r3, r3, #7
 800a1a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a4:	2b7f      	cmp	r3, #127	; 0x7f
 800a1a6:	d8f0      	bhi.n	800a18a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1aa:	1c5a      	adds	r2, r3, #1
 800a1ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a1ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1b0:	b2d2      	uxtb	r2, r2
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7fe fdd5 	bl	8008d70 <_EncodeStr>
 800a1c6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a1c8:	2209      	movs	r2, #9
 800a1ca:	68f9      	ldr	r1, [r7, #12]
 800a1cc:	6938      	ldr	r0, [r7, #16]
 800a1ce:	f7fe ff0f 	bl	8008ff0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4b40      	ldr	r3, [pc, #256]	; (800a2e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	633b      	str	r3, [r7, #48]	; 0x30
 800a1e6:	e00b      	b.n	800a200 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ee:	1c59      	adds	r1, r3, #1
 800a1f0:	6379      	str	r1, [r7, #52]	; 0x34
 800a1f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a1f6:	b2d2      	uxtb	r2, r2
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	09db      	lsrs	r3, r3, #7
 800a1fe:	633b      	str	r3, [r7, #48]	; 0x30
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	2b7f      	cmp	r3, #127	; 0x7f
 800a204:	d8f0      	bhi.n	800a1e8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	637a      	str	r2, [r7, #52]	; 0x34
 800a20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a214:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a220:	e00b      	b.n	800a23a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	b2da      	uxtb	r2, r3
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	1c59      	adds	r1, r3, #1
 800a22a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a22c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	701a      	strb	r2, [r3, #0]
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	09db      	lsrs	r3, r3, #7
 800a238:	62bb      	str	r3, [r7, #40]	; 0x28
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	2b7f      	cmp	r3, #127	; 0x7f
 800a23e:	d8f0      	bhi.n	800a222 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	1c5a      	adds	r2, r3, #1
 800a244:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a248:	b2d2      	uxtb	r2, r2
 800a24a:	701a      	strb	r2, [r3, #0]
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	623b      	str	r3, [r7, #32]
 800a25a:	e00b      	b.n	800a274 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	1c59      	adds	r1, r3, #1
 800a264:	6279      	str	r1, [r7, #36]	; 0x24
 800a266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a26a:	b2d2      	uxtb	r2, r2
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	09db      	lsrs	r3, r3, #7
 800a272:	623b      	str	r3, [r7, #32]
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	2b7f      	cmp	r3, #127	; 0x7f
 800a278:	d8f0      	bhi.n	800a25c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	627a      	str	r2, [r7, #36]	; 0x24
 800a280:	6a3a      	ldr	r2, [r7, #32]
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	61fb      	str	r3, [r7, #28]
 800a28e:	2300      	movs	r3, #0
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e00b      	b.n	800a2ac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	b2da      	uxtb	r2, r3
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	1c59      	adds	r1, r3, #1
 800a29c:	61f9      	str	r1, [r7, #28]
 800a29e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	09db      	lsrs	r3, r3, #7
 800a2aa:	61bb      	str	r3, [r7, #24]
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a2b0:	d8f0      	bhi.n	800a294 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	61fa      	str	r2, [r7, #28]
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a2c2:	2215      	movs	r2, #21
 800a2c4:	68f9      	ldr	r1, [r7, #12]
 800a2c6:	6938      	ldr	r0, [r7, #16]
 800a2c8:	f7fe fe92 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f383 8811 	msr	BASEPRI, r3
}
 800a2d2:	bf00      	nop
 800a2d4:	3748      	adds	r7, #72	; 0x48
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	240148c0 	.word	0x240148c0
 800a2e0:	24014890 	.word	0x24014890

0800a2e4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a2e8:	4b07      	ldr	r3, [pc, #28]	; (800a308 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d008      	beq.n	800a302 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a2fa:	4b03      	ldr	r3, [pc, #12]	; (800a308 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	4798      	blx	r3
  }
}
 800a302:	bf00      	nop
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	24014890 	.word	0x24014890

0800a30c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a314:	f3ef 8311 	mrs	r3, BASEPRI
 800a318:	f04f 0120 	mov.w	r1, #32
 800a31c:	f381 8811 	msr	BASEPRI, r1
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	480b      	ldr	r0, [pc, #44]	; (800a350 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a324:	f7fe fd74 	bl	8008e10 <_PreparePacket>
 800a328:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a32a:	2280      	movs	r2, #128	; 0x80
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	6938      	ldr	r0, [r7, #16]
 800a330:	f7fe fd1e 	bl	8008d70 <_EncodeStr>
 800a334:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a336:	220e      	movs	r2, #14
 800a338:	68f9      	ldr	r1, [r7, #12]
 800a33a:	6938      	ldr	r0, [r7, #16]
 800a33c:	f7fe fe58 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f383 8811 	msr	BASEPRI, r3
}
 800a346:	bf00      	nop
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	240148c0 	.word	0x240148c0

0800a354 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a35a:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d01a      	beq.n	800a398 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a362:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d015      	beq.n	800a398 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a36c:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4798      	blx	r3
 800a374:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a378:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a37a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	f04f 0300 	mov.w	r3, #0
 800a386:	000a      	movs	r2, r1
 800a388:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a38a:	4613      	mov	r3, r2
 800a38c:	461a      	mov	r2, r3
 800a38e:	4621      	mov	r1, r4
 800a390:	200d      	movs	r0, #13
 800a392:	f7ff fbe5 	bl	8009b60 <SEGGER_SYSVIEW_RecordU32x2>
 800a396:	e006      	b.n	800a3a6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4619      	mov	r1, r3
 800a39e:	200c      	movs	r0, #12
 800a3a0:	f7ff fba2 	bl	8009ae8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd90      	pop	{r4, r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	24014890 	.word	0x24014890
 800a3b4:	e0001004 	.word	0xe0001004

0800a3b8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a3be:	f3ef 8311 	mrs	r3, BASEPRI
 800a3c2:	f04f 0120 	mov.w	r1, #32
 800a3c6:	f381 8811 	msr	BASEPRI, r1
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	4819      	ldr	r0, [pc, #100]	; (800a434 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a3ce:	f7fe fd1f 	bl	8008e10 <_PreparePacket>
 800a3d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a3d8:	4b17      	ldr	r3, [pc, #92]	; (800a438 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	617b      	str	r3, [r7, #20]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	613b      	str	r3, [r7, #16]
 800a3ea:	e00b      	b.n	800a404 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	1c59      	adds	r1, r3, #1
 800a3f4:	6179      	str	r1, [r7, #20]
 800a3f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	09db      	lsrs	r3, r3, #7
 800a402:	613b      	str	r3, [r7, #16]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b7f      	cmp	r3, #127	; 0x7f
 800a408:	d8f0      	bhi.n	800a3ec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	617a      	str	r2, [r7, #20]
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a41a:	2202      	movs	r2, #2
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	68b8      	ldr	r0, [r7, #8]
 800a420:	f7fe fde6 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f383 8811 	msr	BASEPRI, r3
}
 800a42a:	bf00      	nop
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	240148c0 	.word	0x240148c0
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a442:	f3ef 8311 	mrs	r3, BASEPRI
 800a446:	f04f 0120 	mov.w	r1, #32
 800a44a:	f381 8811 	msr	BASEPRI, r1
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	4807      	ldr	r0, [pc, #28]	; (800a470 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a452:	f7fe fcdd 	bl	8008e10 <_PreparePacket>
 800a456:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a458:	2203      	movs	r2, #3
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6838      	ldr	r0, [r7, #0]
 800a45e:	f7fe fdc7 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f383 8811 	msr	BASEPRI, r3
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	240148c0 	.word	0x240148c0

0800a474 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a47a:	f3ef 8311 	mrs	r3, BASEPRI
 800a47e:	f04f 0120 	mov.w	r1, #32
 800a482:	f381 8811 	msr	BASEPRI, r1
 800a486:	607b      	str	r3, [r7, #4]
 800a488:	4807      	ldr	r0, [pc, #28]	; (800a4a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a48a:	f7fe fcc1 	bl	8008e10 <_PreparePacket>
 800a48e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a490:	2212      	movs	r2, #18
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6838      	ldr	r0, [r7, #0]
 800a496:	f7fe fdab 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f383 8811 	msr	BASEPRI, r3
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	240148c0 	.word	0x240148c0

0800a4ac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a4b2:	f3ef 8311 	mrs	r3, BASEPRI
 800a4b6:	f04f 0120 	mov.w	r1, #32
 800a4ba:	f381 8811 	msr	BASEPRI, r1
 800a4be:	607b      	str	r3, [r7, #4]
 800a4c0:	4807      	ldr	r0, [pc, #28]	; (800a4e0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a4c2:	f7fe fca5 	bl	8008e10 <_PreparePacket>
 800a4c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a4c8:	2211      	movs	r2, #17
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6838      	ldr	r0, [r7, #0]
 800a4ce:	f7fe fd8f 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f383 8811 	msr	BASEPRI, r3
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	240148c0 	.word	0x240148c0

0800a4e4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a4ec:	f3ef 8311 	mrs	r3, BASEPRI
 800a4f0:	f04f 0120 	mov.w	r1, #32
 800a4f4:	f381 8811 	msr	BASEPRI, r1
 800a4f8:	617b      	str	r3, [r7, #20]
 800a4fa:	4819      	ldr	r0, [pc, #100]	; (800a560 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a4fc:	f7fe fc88 	bl	8008e10 <_PreparePacket>
 800a500:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a506:	4b17      	ldr	r3, [pc, #92]	; (800a564 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	61fb      	str	r3, [r7, #28]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	61bb      	str	r3, [r7, #24]
 800a518:	e00b      	b.n	800a532 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	1c59      	adds	r1, r3, #1
 800a522:	61f9      	str	r1, [r7, #28]
 800a524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a528:	b2d2      	uxtb	r2, r2
 800a52a:	701a      	strb	r2, [r3, #0]
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	09db      	lsrs	r3, r3, #7
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2b7f      	cmp	r3, #127	; 0x7f
 800a536:	d8f0      	bhi.n	800a51a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	1c5a      	adds	r2, r3, #1
 800a53c:	61fa      	str	r2, [r7, #28]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	b2d2      	uxtb	r2, r2
 800a542:	701a      	strb	r2, [r3, #0]
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a548:	2208      	movs	r2, #8
 800a54a:	68f9      	ldr	r1, [r7, #12]
 800a54c:	6938      	ldr	r0, [r7, #16]
 800a54e:	f7fe fd4f 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f383 8811 	msr	BASEPRI, r3
}
 800a558:	bf00      	nop
 800a55a:	3720      	adds	r7, #32
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	240148c0 	.word	0x240148c0
 800a564:	24014890 	.word	0x24014890

0800a568 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a570:	f3ef 8311 	mrs	r3, BASEPRI
 800a574:	f04f 0120 	mov.w	r1, #32
 800a578:	f381 8811 	msr	BASEPRI, r1
 800a57c:	617b      	str	r3, [r7, #20]
 800a57e:	4819      	ldr	r0, [pc, #100]	; (800a5e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a580:	f7fe fc46 	bl	8008e10 <_PreparePacket>
 800a584:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a58a:	4b17      	ldr	r3, [pc, #92]	; (800a5e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	61fb      	str	r3, [r7, #28]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	61bb      	str	r3, [r7, #24]
 800a59c:	e00b      	b.n	800a5b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	1c59      	adds	r1, r3, #1
 800a5a6:	61f9      	str	r1, [r7, #28]
 800a5a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5ac:	b2d2      	uxtb	r2, r2
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	09db      	lsrs	r3, r3, #7
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	2b7f      	cmp	r3, #127	; 0x7f
 800a5ba:	d8f0      	bhi.n	800a59e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	61fa      	str	r2, [r7, #28]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	b2d2      	uxtb	r2, r2
 800a5c6:	701a      	strb	r2, [r3, #0]
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a5cc:	2204      	movs	r2, #4
 800a5ce:	68f9      	ldr	r1, [r7, #12]
 800a5d0:	6938      	ldr	r0, [r7, #16]
 800a5d2:	f7fe fd0d 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f383 8811 	msr	BASEPRI, r3
}
 800a5dc:	bf00      	nop
 800a5de:	3720      	adds	r7, #32
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	240148c0 	.word	0x240148c0
 800a5e8:	24014890 	.word	0x24014890

0800a5ec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a5f4:	f3ef 8311 	mrs	r3, BASEPRI
 800a5f8:	f04f 0120 	mov.w	r1, #32
 800a5fc:	f381 8811 	msr	BASEPRI, r1
 800a600:	617b      	str	r3, [r7, #20]
 800a602:	4819      	ldr	r0, [pc, #100]	; (800a668 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a604:	f7fe fc04 	bl	8008e10 <_PreparePacket>
 800a608:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a60e:	4b17      	ldr	r3, [pc, #92]	; (800a66c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	61fb      	str	r3, [r7, #28]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	e00b      	b.n	800a63a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	b2da      	uxtb	r2, r3
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	1c59      	adds	r1, r3, #1
 800a62a:	61f9      	str	r1, [r7, #28]
 800a62c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a630:	b2d2      	uxtb	r2, r2
 800a632:	701a      	strb	r2, [r3, #0]
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	09db      	lsrs	r3, r3, #7
 800a638:	61bb      	str	r3, [r7, #24]
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b7f      	cmp	r3, #127	; 0x7f
 800a63e:	d8f0      	bhi.n	800a622 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	61fa      	str	r2, [r7, #28]
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	b2d2      	uxtb	r2, r2
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a650:	2206      	movs	r2, #6
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	6938      	ldr	r0, [r7, #16]
 800a656:	f7fe fccb 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f383 8811 	msr	BASEPRI, r3
}
 800a660:	bf00      	nop
 800a662:	3720      	adds	r7, #32
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	240148c0 	.word	0x240148c0
 800a66c:	24014890 	.word	0x24014890

0800a670 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a678:	4b04      	ldr	r3, [pc, #16]	; (800a68c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	1ad3      	subs	r3, r2, r3
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	24014890 	.word	0x24014890

0800a690 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	; 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a69a:	4b3b      	ldr	r3, [pc, #236]	; (800a788 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d06d      	beq.n	800a77e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800a6a2:	4b39      	ldr	r3, [pc, #228]	; (800a788 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6ac:	e008      	b.n	800a6c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d007      	beq.n	800a6ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	3301      	adds	r3, #1
 800a6be:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d3f2      	bcc.n	800a6ae <SEGGER_SYSVIEW_SendModule+0x1e>
 800a6c8:	e000      	b.n	800a6cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a6ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d055      	beq.n	800a77e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a6d2:	f3ef 8311 	mrs	r3, BASEPRI
 800a6d6:	f04f 0120 	mov.w	r1, #32
 800a6da:	f381 8811 	msr	BASEPRI, r1
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	482a      	ldr	r0, [pc, #168]	; (800a78c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800a6e2:	f7fe fb95 	bl	8008e10 <_PreparePacket>
 800a6e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	623b      	str	r3, [r7, #32]
 800a6f4:	e00b      	b.n	800a70e <SEGGER_SYSVIEW_SendModule+0x7e>
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	1c59      	adds	r1, r3, #1
 800a6fe:	6279      	str	r1, [r7, #36]	; 0x24
 800a700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a704:	b2d2      	uxtb	r2, r2
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	09db      	lsrs	r3, r3, #7
 800a70c:	623b      	str	r3, [r7, #32]
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	2b7f      	cmp	r3, #127	; 0x7f
 800a712:	d8f0      	bhi.n	800a6f6 <SEGGER_SYSVIEW_SendModule+0x66>
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	627a      	str	r2, [r7, #36]	; 0x24
 800a71a:	6a3a      	ldr	r2, [r7, #32]
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	61fb      	str	r3, [r7, #28]
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	61bb      	str	r3, [r7, #24]
 800a72e:	e00b      	b.n	800a748 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	b2da      	uxtb	r2, r3
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	1c59      	adds	r1, r3, #1
 800a738:	61f9      	str	r1, [r7, #28]
 800a73a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a73e:	b2d2      	uxtb	r2, r2
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	09db      	lsrs	r3, r3, #7
 800a746:	61bb      	str	r3, [r7, #24]
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	2b7f      	cmp	r3, #127	; 0x7f
 800a74c:	d8f0      	bhi.n	800a730 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	61fa      	str	r2, [r7, #28]
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2280      	movs	r2, #128	; 0x80
 800a764:	4619      	mov	r1, r3
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7fe fb02 	bl	8008d70 <_EncodeStr>
 800a76c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a76e:	2216      	movs	r2, #22
 800a770:	68f9      	ldr	r1, [r7, #12]
 800a772:	6938      	ldr	r0, [r7, #16]
 800a774:	f7fe fc3c 	bl	8008ff0 <_SendPacket>
      RECORD_END();
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800a77e:	bf00      	nop
 800a780:	3730      	adds	r7, #48	; 0x30
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	240148b8 	.word	0x240148b8
 800a78c:	240148c0 	.word	0x240148c0

0800a790 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a796:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00f      	beq.n	800a7be <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a79e:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1f2      	bne.n	800a7a4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	240148b8 	.word	0x240148b8

0800a7cc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a7d2:	f3ef 8311 	mrs	r3, BASEPRI
 800a7d6:	f04f 0120 	mov.w	r1, #32
 800a7da:	f381 8811 	msr	BASEPRI, r1
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	4817      	ldr	r0, [pc, #92]	; (800a840 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a7e2:	f7fe fb15 	bl	8008e10 <_PreparePacket>
 800a7e6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	617b      	str	r3, [r7, #20]
 800a7f0:	4b14      	ldr	r3, [pc, #80]	; (800a844 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	613b      	str	r3, [r7, #16]
 800a7f6:	e00b      	b.n	800a810 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	1c59      	adds	r1, r3, #1
 800a800:	6179      	str	r1, [r7, #20]
 800a802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	701a      	strb	r2, [r3, #0]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	09db      	lsrs	r3, r3, #7
 800a80e:	613b      	str	r3, [r7, #16]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2b7f      	cmp	r3, #127	; 0x7f
 800a814:	d8f0      	bhi.n	800a7f8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	617a      	str	r2, [r7, #20]
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	701a      	strb	r2, [r3, #0]
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a826:	221b      	movs	r2, #27
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	68b8      	ldr	r0, [r7, #8]
 800a82c:	f7fe fbe0 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f383 8811 	msr	BASEPRI, r3
}
 800a836:	bf00      	nop
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	240148c0 	.word	0x240148c0
 800a844:	240148bc 	.word	0x240148bc

0800a848 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800a848:	b40f      	push	{r0, r1, r2, r3}
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800a850:	f107 0314 	add.w	r3, r7, #20
 800a854:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800a856:	1d3b      	adds	r3, r7, #4
 800a858:	461a      	mov	r2, r3
 800a85a:	2100      	movs	r1, #0
 800a85c:	6938      	ldr	r0, [r7, #16]
 800a85e:	f7fe fed9 	bl	8009614 <_VPrintTarget>
  va_end(ParamList);
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a86c:	b004      	add	sp, #16
 800a86e:	4770      	bx	lr

0800a870 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a870:	b580      	push	{r7, lr}
 800a872:	b08a      	sub	sp, #40	; 0x28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a878:	f3ef 8311 	mrs	r3, BASEPRI
 800a87c:	f04f 0120 	mov.w	r1, #32
 800a880:	f381 8811 	msr	BASEPRI, r1
 800a884:	617b      	str	r3, [r7, #20]
 800a886:	4827      	ldr	r0, [pc, #156]	; (800a924 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a888:	f7fe fac2 	bl	8008e10 <_PreparePacket>
 800a88c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a88e:	2280      	movs	r2, #128	; 0x80
 800a890:	6879      	ldr	r1, [r7, #4]
 800a892:	6938      	ldr	r0, [r7, #16]
 800a894:	f7fe fa6c 	bl	8008d70 <_EncodeStr>
 800a898:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	627b      	str	r3, [r7, #36]	; 0x24
 800a89e:	2301      	movs	r3, #1
 800a8a0:	623b      	str	r3, [r7, #32]
 800a8a2:	e00b      	b.n	800a8bc <SEGGER_SYSVIEW_Warn+0x4c>
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	1c59      	adds	r1, r3, #1
 800a8ac:	6279      	str	r1, [r7, #36]	; 0x24
 800a8ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	09db      	lsrs	r3, r3, #7
 800a8ba:	623b      	str	r3, [r7, #32]
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	2b7f      	cmp	r3, #127	; 0x7f
 800a8c0:	d8f0      	bhi.n	800a8a4 <SEGGER_SYSVIEW_Warn+0x34>
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	627a      	str	r2, [r7, #36]	; 0x24
 800a8c8:	6a3a      	ldr	r2, [r7, #32]
 800a8ca:	b2d2      	uxtb	r2, r2
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	61fb      	str	r3, [r7, #28]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61bb      	str	r3, [r7, #24]
 800a8da:	e00b      	b.n	800a8f4 <SEGGER_SYSVIEW_Warn+0x84>
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	1c59      	adds	r1, r3, #1
 800a8e4:	61f9      	str	r1, [r7, #28]
 800a8e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8ea:	b2d2      	uxtb	r2, r2
 800a8ec:	701a      	strb	r2, [r3, #0]
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	09db      	lsrs	r3, r3, #7
 800a8f2:	61bb      	str	r3, [r7, #24]
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a8f8:	d8f0      	bhi.n	800a8dc <SEGGER_SYSVIEW_Warn+0x6c>
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	61fa      	str	r2, [r7, #28]
 800a900:	69ba      	ldr	r2, [r7, #24]
 800a902:	b2d2      	uxtb	r2, r2
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a90a:	221a      	movs	r2, #26
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	6938      	ldr	r0, [r7, #16]
 800a910:	f7fe fb6e 	bl	8008ff0 <_SendPacket>
  RECORD_END();
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f383 8811 	msr	BASEPRI, r3
}
 800a91a:	bf00      	nop
 800a91c:	3728      	adds	r7, #40	; 0x28
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	240148c0 	.word	0x240148c0

0800a928 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a92c:	4b13      	ldr	r3, [pc, #76]	; (800a97c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a92e:	7e1b      	ldrb	r3, [r3, #24]
 800a930:	4619      	mov	r1, r3
 800a932:	4a13      	ldr	r2, [pc, #76]	; (800a980 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a934:	460b      	mov	r3, r1
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	440b      	add	r3, r1
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	4413      	add	r3, r2
 800a93e:	336c      	adds	r3, #108	; 0x6c
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b0e      	ldr	r3, [pc, #56]	; (800a97c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a944:	7e1b      	ldrb	r3, [r3, #24]
 800a946:	4618      	mov	r0, r3
 800a948:	490d      	ldr	r1, [pc, #52]	; (800a980 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a94a:	4603      	mov	r3, r0
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	4403      	add	r3, r0
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	440b      	add	r3, r1
 800a954:	3370      	adds	r3, #112	; 0x70
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d00b      	beq.n	800a974 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a95c:	4b07      	ldr	r3, [pc, #28]	; (800a97c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a95e:	789b      	ldrb	r3, [r3, #2]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d107      	bne.n	800a974 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a966:	2201      	movs	r2, #1
 800a968:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a96a:	f7fe fa5d 	bl	8008e28 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a96e:	4b03      	ldr	r3, [pc, #12]	; (800a97c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a970:	2200      	movs	r2, #0
 800a972:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800a974:	4b01      	ldr	r3, [pc, #4]	; (800a97c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a976:	781b      	ldrb	r3, [r3, #0]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	24014890 	.word	0x24014890
 800a980:	240133d0 	.word	0x240133d0

0800a984 <__libc_init_array>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4d0d      	ldr	r5, [pc, #52]	; (800a9bc <__libc_init_array+0x38>)
 800a988:	4c0d      	ldr	r4, [pc, #52]	; (800a9c0 <__libc_init_array+0x3c>)
 800a98a:	1b64      	subs	r4, r4, r5
 800a98c:	10a4      	asrs	r4, r4, #2
 800a98e:	2600      	movs	r6, #0
 800a990:	42a6      	cmp	r6, r4
 800a992:	d109      	bne.n	800a9a8 <__libc_init_array+0x24>
 800a994:	4d0b      	ldr	r5, [pc, #44]	; (800a9c4 <__libc_init_array+0x40>)
 800a996:	4c0c      	ldr	r4, [pc, #48]	; (800a9c8 <__libc_init_array+0x44>)
 800a998:	f000 fcc0 	bl	800b31c <_init>
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	42a6      	cmp	r6, r4
 800a9a4:	d105      	bne.n	800a9b2 <__libc_init_array+0x2e>
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ac:	4798      	blx	r3
 800a9ae:	3601      	adds	r6, #1
 800a9b0:	e7ee      	b.n	800a990 <__libc_init_array+0xc>
 800a9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b6:	4798      	blx	r3
 800a9b8:	3601      	adds	r6, #1
 800a9ba:	e7f2      	b.n	800a9a2 <__libc_init_array+0x1e>
 800a9bc:	0800b4f8 	.word	0x0800b4f8
 800a9c0:	0800b4f8 	.word	0x0800b4f8
 800a9c4:	0800b4f8 	.word	0x0800b4f8
 800a9c8:	0800b4fc 	.word	0x0800b4fc

0800a9cc <memcmp>:
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	3901      	subs	r1, #1
 800a9d0:	4402      	add	r2, r0
 800a9d2:	4290      	cmp	r0, r2
 800a9d4:	d101      	bne.n	800a9da <memcmp+0xe>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	e005      	b.n	800a9e6 <memcmp+0x1a>
 800a9da:	7803      	ldrb	r3, [r0, #0]
 800a9dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	d001      	beq.n	800a9e8 <memcmp+0x1c>
 800a9e4:	1b18      	subs	r0, r3, r4
 800a9e6:	bd10      	pop	{r4, pc}
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	e7f2      	b.n	800a9d2 <memcmp+0x6>

0800a9ec <memcpy>:
 800a9ec:	440a      	add	r2, r1
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9f4:	d100      	bne.n	800a9f8 <memcpy+0xc>
 800a9f6:	4770      	bx	lr
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa02:	4291      	cmp	r1, r2
 800aa04:	d1f9      	bne.n	800a9fa <memcpy+0xe>
 800aa06:	bd10      	pop	{r4, pc}

0800aa08 <memset>:
 800aa08:	4402      	add	r2, r0
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d100      	bne.n	800aa12 <memset+0xa>
 800aa10:	4770      	bx	lr
 800aa12:	f803 1b01 	strb.w	r1, [r3], #1
 800aa16:	e7f9      	b.n	800aa0c <memset+0x4>

0800aa18 <sniprintf>:
 800aa18:	b40c      	push	{r2, r3}
 800aa1a:	b530      	push	{r4, r5, lr}
 800aa1c:	4b17      	ldr	r3, [pc, #92]	; (800aa7c <sniprintf+0x64>)
 800aa1e:	1e0c      	subs	r4, r1, #0
 800aa20:	681d      	ldr	r5, [r3, #0]
 800aa22:	b09d      	sub	sp, #116	; 0x74
 800aa24:	da08      	bge.n	800aa38 <sniprintf+0x20>
 800aa26:	238b      	movs	r3, #139	; 0x8b
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2e:	b01d      	add	sp, #116	; 0x74
 800aa30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa34:	b002      	add	sp, #8
 800aa36:	4770      	bx	lr
 800aa38:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa40:	bf14      	ite	ne
 800aa42:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa46:	4623      	moveq	r3, r4
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	9307      	str	r3, [sp, #28]
 800aa4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa50:	9002      	str	r0, [sp, #8]
 800aa52:	9006      	str	r0, [sp, #24]
 800aa54:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa5a:	ab21      	add	r3, sp, #132	; 0x84
 800aa5c:	a902      	add	r1, sp, #8
 800aa5e:	4628      	mov	r0, r5
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	f000 f869 	bl	800ab38 <_svfiprintf_r>
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	bfbc      	itt	lt
 800aa6a:	238b      	movlt	r3, #139	; 0x8b
 800aa6c:	602b      	strlt	r3, [r5, #0]
 800aa6e:	2c00      	cmp	r4, #0
 800aa70:	d0dd      	beq.n	800aa2e <sniprintf+0x16>
 800aa72:	9b02      	ldr	r3, [sp, #8]
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
 800aa78:	e7d9      	b.n	800aa2e <sniprintf+0x16>
 800aa7a:	bf00      	nop
 800aa7c:	24000020 	.word	0x24000020

0800aa80 <__ssputs_r>:
 800aa80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa84:	688e      	ldr	r6, [r1, #8]
 800aa86:	429e      	cmp	r6, r3
 800aa88:	4682      	mov	sl, r0
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	4690      	mov	r8, r2
 800aa8e:	461f      	mov	r7, r3
 800aa90:	d838      	bhi.n	800ab04 <__ssputs_r+0x84>
 800aa92:	898a      	ldrh	r2, [r1, #12]
 800aa94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa98:	d032      	beq.n	800ab00 <__ssputs_r+0x80>
 800aa9a:	6825      	ldr	r5, [r4, #0]
 800aa9c:	6909      	ldr	r1, [r1, #16]
 800aa9e:	eba5 0901 	sub.w	r9, r5, r1
 800aaa2:	6965      	ldr	r5, [r4, #20]
 800aaa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaac:	3301      	adds	r3, #1
 800aaae:	444b      	add	r3, r9
 800aab0:	106d      	asrs	r5, r5, #1
 800aab2:	429d      	cmp	r5, r3
 800aab4:	bf38      	it	cc
 800aab6:	461d      	movcc	r5, r3
 800aab8:	0553      	lsls	r3, r2, #21
 800aaba:	d531      	bpl.n	800ab20 <__ssputs_r+0xa0>
 800aabc:	4629      	mov	r1, r5
 800aabe:	f000 fb55 	bl	800b16c <_malloc_r>
 800aac2:	4606      	mov	r6, r0
 800aac4:	b950      	cbnz	r0, 800aadc <__ssputs_r+0x5c>
 800aac6:	230c      	movs	r3, #12
 800aac8:	f8ca 3000 	str.w	r3, [sl]
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295
 800aad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aadc:	6921      	ldr	r1, [r4, #16]
 800aade:	464a      	mov	r2, r9
 800aae0:	f7ff ff84 	bl	800a9ec <memcpy>
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aaea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaee:	81a3      	strh	r3, [r4, #12]
 800aaf0:	6126      	str	r6, [r4, #16]
 800aaf2:	6165      	str	r5, [r4, #20]
 800aaf4:	444e      	add	r6, r9
 800aaf6:	eba5 0509 	sub.w	r5, r5, r9
 800aafa:	6026      	str	r6, [r4, #0]
 800aafc:	60a5      	str	r5, [r4, #8]
 800aafe:	463e      	mov	r6, r7
 800ab00:	42be      	cmp	r6, r7
 800ab02:	d900      	bls.n	800ab06 <__ssputs_r+0x86>
 800ab04:	463e      	mov	r6, r7
 800ab06:	6820      	ldr	r0, [r4, #0]
 800ab08:	4632      	mov	r2, r6
 800ab0a:	4641      	mov	r1, r8
 800ab0c:	f000 faa8 	bl	800b060 <memmove>
 800ab10:	68a3      	ldr	r3, [r4, #8]
 800ab12:	1b9b      	subs	r3, r3, r6
 800ab14:	60a3      	str	r3, [r4, #8]
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	4433      	add	r3, r6
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e7db      	b.n	800aad8 <__ssputs_r+0x58>
 800ab20:	462a      	mov	r2, r5
 800ab22:	f000 fb97 	bl	800b254 <_realloc_r>
 800ab26:	4606      	mov	r6, r0
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d1e1      	bne.n	800aaf0 <__ssputs_r+0x70>
 800ab2c:	6921      	ldr	r1, [r4, #16]
 800ab2e:	4650      	mov	r0, sl
 800ab30:	f000 fab0 	bl	800b094 <_free_r>
 800ab34:	e7c7      	b.n	800aac6 <__ssputs_r+0x46>
	...

0800ab38 <_svfiprintf_r>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4698      	mov	r8, r3
 800ab3e:	898b      	ldrh	r3, [r1, #12]
 800ab40:	061b      	lsls	r3, r3, #24
 800ab42:	b09d      	sub	sp, #116	; 0x74
 800ab44:	4607      	mov	r7, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	4614      	mov	r4, r2
 800ab4a:	d50e      	bpl.n	800ab6a <_svfiprintf_r+0x32>
 800ab4c:	690b      	ldr	r3, [r1, #16]
 800ab4e:	b963      	cbnz	r3, 800ab6a <_svfiprintf_r+0x32>
 800ab50:	2140      	movs	r1, #64	; 0x40
 800ab52:	f000 fb0b 	bl	800b16c <_malloc_r>
 800ab56:	6028      	str	r0, [r5, #0]
 800ab58:	6128      	str	r0, [r5, #16]
 800ab5a:	b920      	cbnz	r0, 800ab66 <_svfiprintf_r+0x2e>
 800ab5c:	230c      	movs	r3, #12
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	e0d1      	b.n	800ad0a <_svfiprintf_r+0x1d2>
 800ab66:	2340      	movs	r3, #64	; 0x40
 800ab68:	616b      	str	r3, [r5, #20]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6e:	2320      	movs	r3, #32
 800ab70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab78:	2330      	movs	r3, #48	; 0x30
 800ab7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad24 <_svfiprintf_r+0x1ec>
 800ab7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab82:	f04f 0901 	mov.w	r9, #1
 800ab86:	4623      	mov	r3, r4
 800ab88:	469a      	mov	sl, r3
 800ab8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8e:	b10a      	cbz	r2, 800ab94 <_svfiprintf_r+0x5c>
 800ab90:	2a25      	cmp	r2, #37	; 0x25
 800ab92:	d1f9      	bne.n	800ab88 <_svfiprintf_r+0x50>
 800ab94:	ebba 0b04 	subs.w	fp, sl, r4
 800ab98:	d00b      	beq.n	800abb2 <_svfiprintf_r+0x7a>
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4638      	mov	r0, r7
 800aba2:	f7ff ff6d 	bl	800aa80 <__ssputs_r>
 800aba6:	3001      	adds	r0, #1
 800aba8:	f000 80aa 	beq.w	800ad00 <_svfiprintf_r+0x1c8>
 800abac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abae:	445a      	add	r2, fp
 800abb0:	9209      	str	r2, [sp, #36]	; 0x24
 800abb2:	f89a 3000 	ldrb.w	r3, [sl]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 80a2 	beq.w	800ad00 <_svfiprintf_r+0x1c8>
 800abbc:	2300      	movs	r3, #0
 800abbe:	f04f 32ff 	mov.w	r2, #4294967295
 800abc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc6:	f10a 0a01 	add.w	sl, sl, #1
 800abca:	9304      	str	r3, [sp, #16]
 800abcc:	9307      	str	r3, [sp, #28]
 800abce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abd2:	931a      	str	r3, [sp, #104]	; 0x68
 800abd4:	4654      	mov	r4, sl
 800abd6:	2205      	movs	r2, #5
 800abd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abdc:	4851      	ldr	r0, [pc, #324]	; (800ad24 <_svfiprintf_r+0x1ec>)
 800abde:	f7f5 fbd7 	bl	8000390 <memchr>
 800abe2:	9a04      	ldr	r2, [sp, #16]
 800abe4:	b9d8      	cbnz	r0, 800ac1e <_svfiprintf_r+0xe6>
 800abe6:	06d0      	lsls	r0, r2, #27
 800abe8:	bf44      	itt	mi
 800abea:	2320      	movmi	r3, #32
 800abec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abf0:	0711      	lsls	r1, r2, #28
 800abf2:	bf44      	itt	mi
 800abf4:	232b      	movmi	r3, #43	; 0x2b
 800abf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abfa:	f89a 3000 	ldrb.w	r3, [sl]
 800abfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ac00:	d015      	beq.n	800ac2e <_svfiprintf_r+0xf6>
 800ac02:	9a07      	ldr	r2, [sp, #28]
 800ac04:	4654      	mov	r4, sl
 800ac06:	2000      	movs	r0, #0
 800ac08:	f04f 0c0a 	mov.w	ip, #10
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac12:	3b30      	subs	r3, #48	; 0x30
 800ac14:	2b09      	cmp	r3, #9
 800ac16:	d94e      	bls.n	800acb6 <_svfiprintf_r+0x17e>
 800ac18:	b1b0      	cbz	r0, 800ac48 <_svfiprintf_r+0x110>
 800ac1a:	9207      	str	r2, [sp, #28]
 800ac1c:	e014      	b.n	800ac48 <_svfiprintf_r+0x110>
 800ac1e:	eba0 0308 	sub.w	r3, r0, r8
 800ac22:	fa09 f303 	lsl.w	r3, r9, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	46a2      	mov	sl, r4
 800ac2c:	e7d2      	b.n	800abd4 <_svfiprintf_r+0x9c>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	1d19      	adds	r1, r3, #4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	9103      	str	r1, [sp, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfbb      	ittet	lt
 800ac3a:	425b      	neglt	r3, r3
 800ac3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ac40:	9307      	strge	r3, [sp, #28]
 800ac42:	9307      	strlt	r3, [sp, #28]
 800ac44:	bfb8      	it	lt
 800ac46:	9204      	strlt	r2, [sp, #16]
 800ac48:	7823      	ldrb	r3, [r4, #0]
 800ac4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ac4c:	d10c      	bne.n	800ac68 <_svfiprintf_r+0x130>
 800ac4e:	7863      	ldrb	r3, [r4, #1]
 800ac50:	2b2a      	cmp	r3, #42	; 0x2a
 800ac52:	d135      	bne.n	800acc0 <_svfiprintf_r+0x188>
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	9203      	str	r2, [sp, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bfb8      	it	lt
 800ac60:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac64:	3402      	adds	r4, #2
 800ac66:	9305      	str	r3, [sp, #20]
 800ac68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad34 <_svfiprintf_r+0x1fc>
 800ac6c:	7821      	ldrb	r1, [r4, #0]
 800ac6e:	2203      	movs	r2, #3
 800ac70:	4650      	mov	r0, sl
 800ac72:	f7f5 fb8d 	bl	8000390 <memchr>
 800ac76:	b140      	cbz	r0, 800ac8a <_svfiprintf_r+0x152>
 800ac78:	2340      	movs	r3, #64	; 0x40
 800ac7a:	eba0 000a 	sub.w	r0, r0, sl
 800ac7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac82:	9b04      	ldr	r3, [sp, #16]
 800ac84:	4303      	orrs	r3, r0
 800ac86:	3401      	adds	r4, #1
 800ac88:	9304      	str	r3, [sp, #16]
 800ac8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8e:	4826      	ldr	r0, [pc, #152]	; (800ad28 <_svfiprintf_r+0x1f0>)
 800ac90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac94:	2206      	movs	r2, #6
 800ac96:	f7f5 fb7b 	bl	8000390 <memchr>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d038      	beq.n	800ad10 <_svfiprintf_r+0x1d8>
 800ac9e:	4b23      	ldr	r3, [pc, #140]	; (800ad2c <_svfiprintf_r+0x1f4>)
 800aca0:	bb1b      	cbnz	r3, 800acea <_svfiprintf_r+0x1b2>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	3307      	adds	r3, #7
 800aca6:	f023 0307 	bic.w	r3, r3, #7
 800acaa:	3308      	adds	r3, #8
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb0:	4433      	add	r3, r6
 800acb2:	9309      	str	r3, [sp, #36]	; 0x24
 800acb4:	e767      	b.n	800ab86 <_svfiprintf_r+0x4e>
 800acb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acba:	460c      	mov	r4, r1
 800acbc:	2001      	movs	r0, #1
 800acbe:	e7a5      	b.n	800ac0c <_svfiprintf_r+0xd4>
 800acc0:	2300      	movs	r3, #0
 800acc2:	3401      	adds	r4, #1
 800acc4:	9305      	str	r3, [sp, #20]
 800acc6:	4619      	mov	r1, r3
 800acc8:	f04f 0c0a 	mov.w	ip, #10
 800accc:	4620      	mov	r0, r4
 800acce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acd2:	3a30      	subs	r2, #48	; 0x30
 800acd4:	2a09      	cmp	r2, #9
 800acd6:	d903      	bls.n	800ace0 <_svfiprintf_r+0x1a8>
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0c5      	beq.n	800ac68 <_svfiprintf_r+0x130>
 800acdc:	9105      	str	r1, [sp, #20]
 800acde:	e7c3      	b.n	800ac68 <_svfiprintf_r+0x130>
 800ace0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace4:	4604      	mov	r4, r0
 800ace6:	2301      	movs	r3, #1
 800ace8:	e7f0      	b.n	800accc <_svfiprintf_r+0x194>
 800acea:	ab03      	add	r3, sp, #12
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	462a      	mov	r2, r5
 800acf0:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <_svfiprintf_r+0x1f8>)
 800acf2:	a904      	add	r1, sp, #16
 800acf4:	4638      	mov	r0, r7
 800acf6:	f3af 8000 	nop.w
 800acfa:	1c42      	adds	r2, r0, #1
 800acfc:	4606      	mov	r6, r0
 800acfe:	d1d6      	bne.n	800acae <_svfiprintf_r+0x176>
 800ad00:	89ab      	ldrh	r3, [r5, #12]
 800ad02:	065b      	lsls	r3, r3, #25
 800ad04:	f53f af2c 	bmi.w	800ab60 <_svfiprintf_r+0x28>
 800ad08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad0a:	b01d      	add	sp, #116	; 0x74
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4b06      	ldr	r3, [pc, #24]	; (800ad30 <_svfiprintf_r+0x1f8>)
 800ad18:	a904      	add	r1, sp, #16
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	f000 f87a 	bl	800ae14 <_printf_i>
 800ad20:	e7eb      	b.n	800acfa <_svfiprintf_r+0x1c2>
 800ad22:	bf00      	nop
 800ad24:	0800b4bc 	.word	0x0800b4bc
 800ad28:	0800b4c6 	.word	0x0800b4c6
 800ad2c:	00000000 	.word	0x00000000
 800ad30:	0800aa81 	.word	0x0800aa81
 800ad34:	0800b4c2 	.word	0x0800b4c2

0800ad38 <_printf_common>:
 800ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3c:	4616      	mov	r6, r2
 800ad3e:	4699      	mov	r9, r3
 800ad40:	688a      	ldr	r2, [r1, #8]
 800ad42:	690b      	ldr	r3, [r1, #16]
 800ad44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	bfb8      	it	lt
 800ad4c:	4613      	movlt	r3, r2
 800ad4e:	6033      	str	r3, [r6, #0]
 800ad50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad54:	4607      	mov	r7, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	b10a      	cbz	r2, 800ad5e <_printf_common+0x26>
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	6033      	str	r3, [r6, #0]
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	0699      	lsls	r1, r3, #26
 800ad62:	bf42      	ittt	mi
 800ad64:	6833      	ldrmi	r3, [r6, #0]
 800ad66:	3302      	addmi	r3, #2
 800ad68:	6033      	strmi	r3, [r6, #0]
 800ad6a:	6825      	ldr	r5, [r4, #0]
 800ad6c:	f015 0506 	ands.w	r5, r5, #6
 800ad70:	d106      	bne.n	800ad80 <_printf_common+0x48>
 800ad72:	f104 0a19 	add.w	sl, r4, #25
 800ad76:	68e3      	ldr	r3, [r4, #12]
 800ad78:	6832      	ldr	r2, [r6, #0]
 800ad7a:	1a9b      	subs	r3, r3, r2
 800ad7c:	42ab      	cmp	r3, r5
 800ad7e:	dc26      	bgt.n	800adce <_printf_common+0x96>
 800ad80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad84:	1e13      	subs	r3, r2, #0
 800ad86:	6822      	ldr	r2, [r4, #0]
 800ad88:	bf18      	it	ne
 800ad8a:	2301      	movne	r3, #1
 800ad8c:	0692      	lsls	r2, r2, #26
 800ad8e:	d42b      	bmi.n	800ade8 <_printf_common+0xb0>
 800ad90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad94:	4649      	mov	r1, r9
 800ad96:	4638      	mov	r0, r7
 800ad98:	47c0      	blx	r8
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	d01e      	beq.n	800addc <_printf_common+0xa4>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	68e5      	ldr	r5, [r4, #12]
 800ada2:	6832      	ldr	r2, [r6, #0]
 800ada4:	f003 0306 	and.w	r3, r3, #6
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	bf08      	it	eq
 800adac:	1aad      	subeq	r5, r5, r2
 800adae:	68a3      	ldr	r3, [r4, #8]
 800adb0:	6922      	ldr	r2, [r4, #16]
 800adb2:	bf0c      	ite	eq
 800adb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adb8:	2500      	movne	r5, #0
 800adba:	4293      	cmp	r3, r2
 800adbc:	bfc4      	itt	gt
 800adbe:	1a9b      	subgt	r3, r3, r2
 800adc0:	18ed      	addgt	r5, r5, r3
 800adc2:	2600      	movs	r6, #0
 800adc4:	341a      	adds	r4, #26
 800adc6:	42b5      	cmp	r5, r6
 800adc8:	d11a      	bne.n	800ae00 <_printf_common+0xc8>
 800adca:	2000      	movs	r0, #0
 800adcc:	e008      	b.n	800ade0 <_printf_common+0xa8>
 800adce:	2301      	movs	r3, #1
 800add0:	4652      	mov	r2, sl
 800add2:	4649      	mov	r1, r9
 800add4:	4638      	mov	r0, r7
 800add6:	47c0      	blx	r8
 800add8:	3001      	adds	r0, #1
 800adda:	d103      	bne.n	800ade4 <_printf_common+0xac>
 800addc:	f04f 30ff 	mov.w	r0, #4294967295
 800ade0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade4:	3501      	adds	r5, #1
 800ade6:	e7c6      	b.n	800ad76 <_printf_common+0x3e>
 800ade8:	18e1      	adds	r1, r4, r3
 800adea:	1c5a      	adds	r2, r3, #1
 800adec:	2030      	movs	r0, #48	; 0x30
 800adee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800adf2:	4422      	add	r2, r4
 800adf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800adf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adfc:	3302      	adds	r3, #2
 800adfe:	e7c7      	b.n	800ad90 <_printf_common+0x58>
 800ae00:	2301      	movs	r3, #1
 800ae02:	4622      	mov	r2, r4
 800ae04:	4649      	mov	r1, r9
 800ae06:	4638      	mov	r0, r7
 800ae08:	47c0      	blx	r8
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	d0e6      	beq.n	800addc <_printf_common+0xa4>
 800ae0e:	3601      	adds	r6, #1
 800ae10:	e7d9      	b.n	800adc6 <_printf_common+0x8e>
	...

0800ae14 <_printf_i>:
 800ae14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	7e0f      	ldrb	r7, [r1, #24]
 800ae1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae1c:	2f78      	cmp	r7, #120	; 0x78
 800ae1e:	4691      	mov	r9, r2
 800ae20:	4680      	mov	r8, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	469a      	mov	sl, r3
 800ae26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae2a:	d807      	bhi.n	800ae3c <_printf_i+0x28>
 800ae2c:	2f62      	cmp	r7, #98	; 0x62
 800ae2e:	d80a      	bhi.n	800ae46 <_printf_i+0x32>
 800ae30:	2f00      	cmp	r7, #0
 800ae32:	f000 80d8 	beq.w	800afe6 <_printf_i+0x1d2>
 800ae36:	2f58      	cmp	r7, #88	; 0x58
 800ae38:	f000 80a3 	beq.w	800af82 <_printf_i+0x16e>
 800ae3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae44:	e03a      	b.n	800aebc <_printf_i+0xa8>
 800ae46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae4a:	2b15      	cmp	r3, #21
 800ae4c:	d8f6      	bhi.n	800ae3c <_printf_i+0x28>
 800ae4e:	a101      	add	r1, pc, #4	; (adr r1, 800ae54 <_printf_i+0x40>)
 800ae50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae54:	0800aead 	.word	0x0800aead
 800ae58:	0800aec1 	.word	0x0800aec1
 800ae5c:	0800ae3d 	.word	0x0800ae3d
 800ae60:	0800ae3d 	.word	0x0800ae3d
 800ae64:	0800ae3d 	.word	0x0800ae3d
 800ae68:	0800ae3d 	.word	0x0800ae3d
 800ae6c:	0800aec1 	.word	0x0800aec1
 800ae70:	0800ae3d 	.word	0x0800ae3d
 800ae74:	0800ae3d 	.word	0x0800ae3d
 800ae78:	0800ae3d 	.word	0x0800ae3d
 800ae7c:	0800ae3d 	.word	0x0800ae3d
 800ae80:	0800afcd 	.word	0x0800afcd
 800ae84:	0800aef1 	.word	0x0800aef1
 800ae88:	0800afaf 	.word	0x0800afaf
 800ae8c:	0800ae3d 	.word	0x0800ae3d
 800ae90:	0800ae3d 	.word	0x0800ae3d
 800ae94:	0800afef 	.word	0x0800afef
 800ae98:	0800ae3d 	.word	0x0800ae3d
 800ae9c:	0800aef1 	.word	0x0800aef1
 800aea0:	0800ae3d 	.word	0x0800ae3d
 800aea4:	0800ae3d 	.word	0x0800ae3d
 800aea8:	0800afb7 	.word	0x0800afb7
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	1d1a      	adds	r2, r3, #4
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	602a      	str	r2, [r5, #0]
 800aeb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aebc:	2301      	movs	r3, #1
 800aebe:	e0a3      	b.n	800b008 <_printf_i+0x1f4>
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	6829      	ldr	r1, [r5, #0]
 800aec4:	0606      	lsls	r6, r0, #24
 800aec6:	f101 0304 	add.w	r3, r1, #4
 800aeca:	d50a      	bpl.n	800aee2 <_printf_i+0xce>
 800aecc:	680e      	ldr	r6, [r1, #0]
 800aece:	602b      	str	r3, [r5, #0]
 800aed0:	2e00      	cmp	r6, #0
 800aed2:	da03      	bge.n	800aedc <_printf_i+0xc8>
 800aed4:	232d      	movs	r3, #45	; 0x2d
 800aed6:	4276      	negs	r6, r6
 800aed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aedc:	485e      	ldr	r0, [pc, #376]	; (800b058 <_printf_i+0x244>)
 800aede:	230a      	movs	r3, #10
 800aee0:	e019      	b.n	800af16 <_printf_i+0x102>
 800aee2:	680e      	ldr	r6, [r1, #0]
 800aee4:	602b      	str	r3, [r5, #0]
 800aee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aeea:	bf18      	it	ne
 800aeec:	b236      	sxthne	r6, r6
 800aeee:	e7ef      	b.n	800aed0 <_printf_i+0xbc>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	6820      	ldr	r0, [r4, #0]
 800aef4:	1d19      	adds	r1, r3, #4
 800aef6:	6029      	str	r1, [r5, #0]
 800aef8:	0601      	lsls	r1, r0, #24
 800aefa:	d501      	bpl.n	800af00 <_printf_i+0xec>
 800aefc:	681e      	ldr	r6, [r3, #0]
 800aefe:	e002      	b.n	800af06 <_printf_i+0xf2>
 800af00:	0646      	lsls	r6, r0, #25
 800af02:	d5fb      	bpl.n	800aefc <_printf_i+0xe8>
 800af04:	881e      	ldrh	r6, [r3, #0]
 800af06:	4854      	ldr	r0, [pc, #336]	; (800b058 <_printf_i+0x244>)
 800af08:	2f6f      	cmp	r7, #111	; 0x6f
 800af0a:	bf0c      	ite	eq
 800af0c:	2308      	moveq	r3, #8
 800af0e:	230a      	movne	r3, #10
 800af10:	2100      	movs	r1, #0
 800af12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af16:	6865      	ldr	r5, [r4, #4]
 800af18:	60a5      	str	r5, [r4, #8]
 800af1a:	2d00      	cmp	r5, #0
 800af1c:	bfa2      	ittt	ge
 800af1e:	6821      	ldrge	r1, [r4, #0]
 800af20:	f021 0104 	bicge.w	r1, r1, #4
 800af24:	6021      	strge	r1, [r4, #0]
 800af26:	b90e      	cbnz	r6, 800af2c <_printf_i+0x118>
 800af28:	2d00      	cmp	r5, #0
 800af2a:	d04d      	beq.n	800afc8 <_printf_i+0x1b4>
 800af2c:	4615      	mov	r5, r2
 800af2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800af32:	fb03 6711 	mls	r7, r3, r1, r6
 800af36:	5dc7      	ldrb	r7, [r0, r7]
 800af38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af3c:	4637      	mov	r7, r6
 800af3e:	42bb      	cmp	r3, r7
 800af40:	460e      	mov	r6, r1
 800af42:	d9f4      	bls.n	800af2e <_printf_i+0x11a>
 800af44:	2b08      	cmp	r3, #8
 800af46:	d10b      	bne.n	800af60 <_printf_i+0x14c>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	07de      	lsls	r6, r3, #31
 800af4c:	d508      	bpl.n	800af60 <_printf_i+0x14c>
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	6861      	ldr	r1, [r4, #4]
 800af52:	4299      	cmp	r1, r3
 800af54:	bfde      	ittt	le
 800af56:	2330      	movle	r3, #48	; 0x30
 800af58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af60:	1b52      	subs	r2, r2, r5
 800af62:	6122      	str	r2, [r4, #16]
 800af64:	f8cd a000 	str.w	sl, [sp]
 800af68:	464b      	mov	r3, r9
 800af6a:	aa03      	add	r2, sp, #12
 800af6c:	4621      	mov	r1, r4
 800af6e:	4640      	mov	r0, r8
 800af70:	f7ff fee2 	bl	800ad38 <_printf_common>
 800af74:	3001      	adds	r0, #1
 800af76:	d14c      	bne.n	800b012 <_printf_i+0x1fe>
 800af78:	f04f 30ff 	mov.w	r0, #4294967295
 800af7c:	b004      	add	sp, #16
 800af7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af82:	4835      	ldr	r0, [pc, #212]	; (800b058 <_printf_i+0x244>)
 800af84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af88:	6829      	ldr	r1, [r5, #0]
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800af90:	6029      	str	r1, [r5, #0]
 800af92:	061d      	lsls	r5, r3, #24
 800af94:	d514      	bpl.n	800afc0 <_printf_i+0x1ac>
 800af96:	07df      	lsls	r7, r3, #31
 800af98:	bf44      	itt	mi
 800af9a:	f043 0320 	orrmi.w	r3, r3, #32
 800af9e:	6023      	strmi	r3, [r4, #0]
 800afa0:	b91e      	cbnz	r6, 800afaa <_printf_i+0x196>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	f023 0320 	bic.w	r3, r3, #32
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	2310      	movs	r3, #16
 800afac:	e7b0      	b.n	800af10 <_printf_i+0xfc>
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	f043 0320 	orr.w	r3, r3, #32
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	2378      	movs	r3, #120	; 0x78
 800afb8:	4828      	ldr	r0, [pc, #160]	; (800b05c <_printf_i+0x248>)
 800afba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800afbe:	e7e3      	b.n	800af88 <_printf_i+0x174>
 800afc0:	0659      	lsls	r1, r3, #25
 800afc2:	bf48      	it	mi
 800afc4:	b2b6      	uxthmi	r6, r6
 800afc6:	e7e6      	b.n	800af96 <_printf_i+0x182>
 800afc8:	4615      	mov	r5, r2
 800afca:	e7bb      	b.n	800af44 <_printf_i+0x130>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	6826      	ldr	r6, [r4, #0]
 800afd0:	6961      	ldr	r1, [r4, #20]
 800afd2:	1d18      	adds	r0, r3, #4
 800afd4:	6028      	str	r0, [r5, #0]
 800afd6:	0635      	lsls	r5, r6, #24
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	d501      	bpl.n	800afe0 <_printf_i+0x1cc>
 800afdc:	6019      	str	r1, [r3, #0]
 800afde:	e002      	b.n	800afe6 <_printf_i+0x1d2>
 800afe0:	0670      	lsls	r0, r6, #25
 800afe2:	d5fb      	bpl.n	800afdc <_printf_i+0x1c8>
 800afe4:	8019      	strh	r1, [r3, #0]
 800afe6:	2300      	movs	r3, #0
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	4615      	mov	r5, r2
 800afec:	e7ba      	b.n	800af64 <_printf_i+0x150>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	1d1a      	adds	r2, r3, #4
 800aff2:	602a      	str	r2, [r5, #0]
 800aff4:	681d      	ldr	r5, [r3, #0]
 800aff6:	6862      	ldr	r2, [r4, #4]
 800aff8:	2100      	movs	r1, #0
 800affa:	4628      	mov	r0, r5
 800affc:	f7f5 f9c8 	bl	8000390 <memchr>
 800b000:	b108      	cbz	r0, 800b006 <_printf_i+0x1f2>
 800b002:	1b40      	subs	r0, r0, r5
 800b004:	6060      	str	r0, [r4, #4]
 800b006:	6863      	ldr	r3, [r4, #4]
 800b008:	6123      	str	r3, [r4, #16]
 800b00a:	2300      	movs	r3, #0
 800b00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b010:	e7a8      	b.n	800af64 <_printf_i+0x150>
 800b012:	6923      	ldr	r3, [r4, #16]
 800b014:	462a      	mov	r2, r5
 800b016:	4649      	mov	r1, r9
 800b018:	4640      	mov	r0, r8
 800b01a:	47d0      	blx	sl
 800b01c:	3001      	adds	r0, #1
 800b01e:	d0ab      	beq.n	800af78 <_printf_i+0x164>
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	079b      	lsls	r3, r3, #30
 800b024:	d413      	bmi.n	800b04e <_printf_i+0x23a>
 800b026:	68e0      	ldr	r0, [r4, #12]
 800b028:	9b03      	ldr	r3, [sp, #12]
 800b02a:	4298      	cmp	r0, r3
 800b02c:	bfb8      	it	lt
 800b02e:	4618      	movlt	r0, r3
 800b030:	e7a4      	b.n	800af7c <_printf_i+0x168>
 800b032:	2301      	movs	r3, #1
 800b034:	4632      	mov	r2, r6
 800b036:	4649      	mov	r1, r9
 800b038:	4640      	mov	r0, r8
 800b03a:	47d0      	blx	sl
 800b03c:	3001      	adds	r0, #1
 800b03e:	d09b      	beq.n	800af78 <_printf_i+0x164>
 800b040:	3501      	adds	r5, #1
 800b042:	68e3      	ldr	r3, [r4, #12]
 800b044:	9903      	ldr	r1, [sp, #12]
 800b046:	1a5b      	subs	r3, r3, r1
 800b048:	42ab      	cmp	r3, r5
 800b04a:	dcf2      	bgt.n	800b032 <_printf_i+0x21e>
 800b04c:	e7eb      	b.n	800b026 <_printf_i+0x212>
 800b04e:	2500      	movs	r5, #0
 800b050:	f104 0619 	add.w	r6, r4, #25
 800b054:	e7f5      	b.n	800b042 <_printf_i+0x22e>
 800b056:	bf00      	nop
 800b058:	0800b4cd 	.word	0x0800b4cd
 800b05c:	0800b4de 	.word	0x0800b4de

0800b060 <memmove>:
 800b060:	4288      	cmp	r0, r1
 800b062:	b510      	push	{r4, lr}
 800b064:	eb01 0402 	add.w	r4, r1, r2
 800b068:	d902      	bls.n	800b070 <memmove+0x10>
 800b06a:	4284      	cmp	r4, r0
 800b06c:	4623      	mov	r3, r4
 800b06e:	d807      	bhi.n	800b080 <memmove+0x20>
 800b070:	1e43      	subs	r3, r0, #1
 800b072:	42a1      	cmp	r1, r4
 800b074:	d008      	beq.n	800b088 <memmove+0x28>
 800b076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b07a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b07e:	e7f8      	b.n	800b072 <memmove+0x12>
 800b080:	4402      	add	r2, r0
 800b082:	4601      	mov	r1, r0
 800b084:	428a      	cmp	r2, r1
 800b086:	d100      	bne.n	800b08a <memmove+0x2a>
 800b088:	bd10      	pop	{r4, pc}
 800b08a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b08e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b092:	e7f7      	b.n	800b084 <memmove+0x24>

0800b094 <_free_r>:
 800b094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b096:	2900      	cmp	r1, #0
 800b098:	d044      	beq.n	800b124 <_free_r+0x90>
 800b09a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09e:	9001      	str	r0, [sp, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0a6:	bfb8      	it	lt
 800b0a8:	18e4      	addlt	r4, r4, r3
 800b0aa:	f000 f913 	bl	800b2d4 <__malloc_lock>
 800b0ae:	4a1e      	ldr	r2, [pc, #120]	; (800b128 <_free_r+0x94>)
 800b0b0:	9801      	ldr	r0, [sp, #4]
 800b0b2:	6813      	ldr	r3, [r2, #0]
 800b0b4:	b933      	cbnz	r3, 800b0c4 <_free_r+0x30>
 800b0b6:	6063      	str	r3, [r4, #4]
 800b0b8:	6014      	str	r4, [r2, #0]
 800b0ba:	b003      	add	sp, #12
 800b0bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0c0:	f000 b90e 	b.w	800b2e0 <__malloc_unlock>
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d908      	bls.n	800b0da <_free_r+0x46>
 800b0c8:	6825      	ldr	r5, [r4, #0]
 800b0ca:	1961      	adds	r1, r4, r5
 800b0cc:	428b      	cmp	r3, r1
 800b0ce:	bf01      	itttt	eq
 800b0d0:	6819      	ldreq	r1, [r3, #0]
 800b0d2:	685b      	ldreq	r3, [r3, #4]
 800b0d4:	1949      	addeq	r1, r1, r5
 800b0d6:	6021      	streq	r1, [r4, #0]
 800b0d8:	e7ed      	b.n	800b0b6 <_free_r+0x22>
 800b0da:	461a      	mov	r2, r3
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	b10b      	cbz	r3, 800b0e4 <_free_r+0x50>
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	d9fa      	bls.n	800b0da <_free_r+0x46>
 800b0e4:	6811      	ldr	r1, [r2, #0]
 800b0e6:	1855      	adds	r5, r2, r1
 800b0e8:	42a5      	cmp	r5, r4
 800b0ea:	d10b      	bne.n	800b104 <_free_r+0x70>
 800b0ec:	6824      	ldr	r4, [r4, #0]
 800b0ee:	4421      	add	r1, r4
 800b0f0:	1854      	adds	r4, r2, r1
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	6011      	str	r1, [r2, #0]
 800b0f6:	d1e0      	bne.n	800b0ba <_free_r+0x26>
 800b0f8:	681c      	ldr	r4, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	6053      	str	r3, [r2, #4]
 800b0fe:	4421      	add	r1, r4
 800b100:	6011      	str	r1, [r2, #0]
 800b102:	e7da      	b.n	800b0ba <_free_r+0x26>
 800b104:	d902      	bls.n	800b10c <_free_r+0x78>
 800b106:	230c      	movs	r3, #12
 800b108:	6003      	str	r3, [r0, #0]
 800b10a:	e7d6      	b.n	800b0ba <_free_r+0x26>
 800b10c:	6825      	ldr	r5, [r4, #0]
 800b10e:	1961      	adds	r1, r4, r5
 800b110:	428b      	cmp	r3, r1
 800b112:	bf04      	itt	eq
 800b114:	6819      	ldreq	r1, [r3, #0]
 800b116:	685b      	ldreq	r3, [r3, #4]
 800b118:	6063      	str	r3, [r4, #4]
 800b11a:	bf04      	itt	eq
 800b11c:	1949      	addeq	r1, r1, r5
 800b11e:	6021      	streq	r1, [r4, #0]
 800b120:	6054      	str	r4, [r2, #4]
 800b122:	e7ca      	b.n	800b0ba <_free_r+0x26>
 800b124:	b003      	add	sp, #12
 800b126:	bd30      	pop	{r4, r5, pc}
 800b128:	240149a4 	.word	0x240149a4

0800b12c <sbrk_aligned>:
 800b12c:	b570      	push	{r4, r5, r6, lr}
 800b12e:	4e0e      	ldr	r6, [pc, #56]	; (800b168 <sbrk_aligned+0x3c>)
 800b130:	460c      	mov	r4, r1
 800b132:	6831      	ldr	r1, [r6, #0]
 800b134:	4605      	mov	r5, r0
 800b136:	b911      	cbnz	r1, 800b13e <sbrk_aligned+0x12>
 800b138:	f000 f8bc 	bl	800b2b4 <_sbrk_r>
 800b13c:	6030      	str	r0, [r6, #0]
 800b13e:	4621      	mov	r1, r4
 800b140:	4628      	mov	r0, r5
 800b142:	f000 f8b7 	bl	800b2b4 <_sbrk_r>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	d00a      	beq.n	800b160 <sbrk_aligned+0x34>
 800b14a:	1cc4      	adds	r4, r0, #3
 800b14c:	f024 0403 	bic.w	r4, r4, #3
 800b150:	42a0      	cmp	r0, r4
 800b152:	d007      	beq.n	800b164 <sbrk_aligned+0x38>
 800b154:	1a21      	subs	r1, r4, r0
 800b156:	4628      	mov	r0, r5
 800b158:	f000 f8ac 	bl	800b2b4 <_sbrk_r>
 800b15c:	3001      	adds	r0, #1
 800b15e:	d101      	bne.n	800b164 <sbrk_aligned+0x38>
 800b160:	f04f 34ff 	mov.w	r4, #4294967295
 800b164:	4620      	mov	r0, r4
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	240149a8 	.word	0x240149a8

0800b16c <_malloc_r>:
 800b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b170:	1ccd      	adds	r5, r1, #3
 800b172:	f025 0503 	bic.w	r5, r5, #3
 800b176:	3508      	adds	r5, #8
 800b178:	2d0c      	cmp	r5, #12
 800b17a:	bf38      	it	cc
 800b17c:	250c      	movcc	r5, #12
 800b17e:	2d00      	cmp	r5, #0
 800b180:	4607      	mov	r7, r0
 800b182:	db01      	blt.n	800b188 <_malloc_r+0x1c>
 800b184:	42a9      	cmp	r1, r5
 800b186:	d905      	bls.n	800b194 <_malloc_r+0x28>
 800b188:	230c      	movs	r3, #12
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	2600      	movs	r6, #0
 800b18e:	4630      	mov	r0, r6
 800b190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b194:	4e2e      	ldr	r6, [pc, #184]	; (800b250 <_malloc_r+0xe4>)
 800b196:	f000 f89d 	bl	800b2d4 <__malloc_lock>
 800b19a:	6833      	ldr	r3, [r6, #0]
 800b19c:	461c      	mov	r4, r3
 800b19e:	bb34      	cbnz	r4, 800b1ee <_malloc_r+0x82>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	f7ff ffc2 	bl	800b12c <sbrk_aligned>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	d14d      	bne.n	800b24a <_malloc_r+0xde>
 800b1ae:	6834      	ldr	r4, [r6, #0]
 800b1b0:	4626      	mov	r6, r4
 800b1b2:	2e00      	cmp	r6, #0
 800b1b4:	d140      	bne.n	800b238 <_malloc_r+0xcc>
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	eb04 0803 	add.w	r8, r4, r3
 800b1c0:	f000 f878 	bl	800b2b4 <_sbrk_r>
 800b1c4:	4580      	cmp	r8, r0
 800b1c6:	d13a      	bne.n	800b23e <_malloc_r+0xd2>
 800b1c8:	6821      	ldr	r1, [r4, #0]
 800b1ca:	3503      	adds	r5, #3
 800b1cc:	1a6d      	subs	r5, r5, r1
 800b1ce:	f025 0503 	bic.w	r5, r5, #3
 800b1d2:	3508      	adds	r5, #8
 800b1d4:	2d0c      	cmp	r5, #12
 800b1d6:	bf38      	it	cc
 800b1d8:	250c      	movcc	r5, #12
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4638      	mov	r0, r7
 800b1de:	f7ff ffa5 	bl	800b12c <sbrk_aligned>
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	d02b      	beq.n	800b23e <_malloc_r+0xd2>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	442b      	add	r3, r5
 800b1ea:	6023      	str	r3, [r4, #0]
 800b1ec:	e00e      	b.n	800b20c <_malloc_r+0xa0>
 800b1ee:	6822      	ldr	r2, [r4, #0]
 800b1f0:	1b52      	subs	r2, r2, r5
 800b1f2:	d41e      	bmi.n	800b232 <_malloc_r+0xc6>
 800b1f4:	2a0b      	cmp	r2, #11
 800b1f6:	d916      	bls.n	800b226 <_malloc_r+0xba>
 800b1f8:	1961      	adds	r1, r4, r5
 800b1fa:	42a3      	cmp	r3, r4
 800b1fc:	6025      	str	r5, [r4, #0]
 800b1fe:	bf18      	it	ne
 800b200:	6059      	strne	r1, [r3, #4]
 800b202:	6863      	ldr	r3, [r4, #4]
 800b204:	bf08      	it	eq
 800b206:	6031      	streq	r1, [r6, #0]
 800b208:	5162      	str	r2, [r4, r5]
 800b20a:	604b      	str	r3, [r1, #4]
 800b20c:	4638      	mov	r0, r7
 800b20e:	f104 060b 	add.w	r6, r4, #11
 800b212:	f000 f865 	bl	800b2e0 <__malloc_unlock>
 800b216:	f026 0607 	bic.w	r6, r6, #7
 800b21a:	1d23      	adds	r3, r4, #4
 800b21c:	1af2      	subs	r2, r6, r3
 800b21e:	d0b6      	beq.n	800b18e <_malloc_r+0x22>
 800b220:	1b9b      	subs	r3, r3, r6
 800b222:	50a3      	str	r3, [r4, r2]
 800b224:	e7b3      	b.n	800b18e <_malloc_r+0x22>
 800b226:	6862      	ldr	r2, [r4, #4]
 800b228:	42a3      	cmp	r3, r4
 800b22a:	bf0c      	ite	eq
 800b22c:	6032      	streq	r2, [r6, #0]
 800b22e:	605a      	strne	r2, [r3, #4]
 800b230:	e7ec      	b.n	800b20c <_malloc_r+0xa0>
 800b232:	4623      	mov	r3, r4
 800b234:	6864      	ldr	r4, [r4, #4]
 800b236:	e7b2      	b.n	800b19e <_malloc_r+0x32>
 800b238:	4634      	mov	r4, r6
 800b23a:	6876      	ldr	r6, [r6, #4]
 800b23c:	e7b9      	b.n	800b1b2 <_malloc_r+0x46>
 800b23e:	230c      	movs	r3, #12
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	4638      	mov	r0, r7
 800b244:	f000 f84c 	bl	800b2e0 <__malloc_unlock>
 800b248:	e7a1      	b.n	800b18e <_malloc_r+0x22>
 800b24a:	6025      	str	r5, [r4, #0]
 800b24c:	e7de      	b.n	800b20c <_malloc_r+0xa0>
 800b24e:	bf00      	nop
 800b250:	240149a4 	.word	0x240149a4

0800b254 <_realloc_r>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	4680      	mov	r8, r0
 800b25a:	4614      	mov	r4, r2
 800b25c:	460e      	mov	r6, r1
 800b25e:	b921      	cbnz	r1, 800b26a <_realloc_r+0x16>
 800b260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	4611      	mov	r1, r2
 800b266:	f7ff bf81 	b.w	800b16c <_malloc_r>
 800b26a:	b92a      	cbnz	r2, 800b278 <_realloc_r+0x24>
 800b26c:	f7ff ff12 	bl	800b094 <_free_r>
 800b270:	4625      	mov	r5, r4
 800b272:	4628      	mov	r0, r5
 800b274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b278:	f000 f838 	bl	800b2ec <_malloc_usable_size_r>
 800b27c:	4284      	cmp	r4, r0
 800b27e:	4607      	mov	r7, r0
 800b280:	d802      	bhi.n	800b288 <_realloc_r+0x34>
 800b282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b286:	d812      	bhi.n	800b2ae <_realloc_r+0x5a>
 800b288:	4621      	mov	r1, r4
 800b28a:	4640      	mov	r0, r8
 800b28c:	f7ff ff6e 	bl	800b16c <_malloc_r>
 800b290:	4605      	mov	r5, r0
 800b292:	2800      	cmp	r0, #0
 800b294:	d0ed      	beq.n	800b272 <_realloc_r+0x1e>
 800b296:	42bc      	cmp	r4, r7
 800b298:	4622      	mov	r2, r4
 800b29a:	4631      	mov	r1, r6
 800b29c:	bf28      	it	cs
 800b29e:	463a      	movcs	r2, r7
 800b2a0:	f7ff fba4 	bl	800a9ec <memcpy>
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	f7ff fef4 	bl	800b094 <_free_r>
 800b2ac:	e7e1      	b.n	800b272 <_realloc_r+0x1e>
 800b2ae:	4635      	mov	r5, r6
 800b2b0:	e7df      	b.n	800b272 <_realloc_r+0x1e>
	...

0800b2b4 <_sbrk_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d06      	ldr	r5, [pc, #24]	; (800b2d0 <_sbrk_r+0x1c>)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4608      	mov	r0, r1
 800b2be:	602b      	str	r3, [r5, #0]
 800b2c0:	f000 f81e 	bl	800b300 <_sbrk>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_sbrk_r+0x1a>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_sbrk_r+0x1a>
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	240149ac 	.word	0x240149ac

0800b2d4 <__malloc_lock>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__malloc_lock+0x8>)
 800b2d6:	f000 b811 	b.w	800b2fc <__retarget_lock_acquire_recursive>
 800b2da:	bf00      	nop
 800b2dc:	240149b0 	.word	0x240149b0

0800b2e0 <__malloc_unlock>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__malloc_unlock+0x8>)
 800b2e2:	f000 b80c 	b.w	800b2fe <__retarget_lock_release_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	240149b0 	.word	0x240149b0

0800b2ec <_malloc_usable_size_r>:
 800b2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f0:	1f18      	subs	r0, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	bfbc      	itt	lt
 800b2f6:	580b      	ldrlt	r3, [r1, r0]
 800b2f8:	18c0      	addlt	r0, r0, r3
 800b2fa:	4770      	bx	lr

0800b2fc <__retarget_lock_acquire_recursive>:
 800b2fc:	4770      	bx	lr

0800b2fe <__retarget_lock_release_recursive>:
 800b2fe:	4770      	bx	lr

0800b300 <_sbrk>:
 800b300:	4a04      	ldr	r2, [pc, #16]	; (800b314 <_sbrk+0x14>)
 800b302:	6811      	ldr	r1, [r2, #0]
 800b304:	4603      	mov	r3, r0
 800b306:	b909      	cbnz	r1, 800b30c <_sbrk+0xc>
 800b308:	4903      	ldr	r1, [pc, #12]	; (800b318 <_sbrk+0x18>)
 800b30a:	6011      	str	r1, [r2, #0]
 800b30c:	6810      	ldr	r0, [r2, #0]
 800b30e:	4403      	add	r3, r0
 800b310:	6013      	str	r3, [r2, #0]
 800b312:	4770      	bx	lr
 800b314:	240149b4 	.word	0x240149b4
 800b318:	240149b8 	.word	0x240149b8

0800b31c <_init>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr

0800b328 <_fini>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	bf00      	nop
 800b32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32e:	bc08      	pop	{r3}
 800b330:	469e      	mov	lr, r3
 800b332:	4770      	bx	lr
