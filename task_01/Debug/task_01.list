
task_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007580  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  080079c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00014898  2400007c  08007a44  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24014914  08007a44  00024914  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019178  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000031df  00000000  00000000  00039222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000015c0  00000000  00000000  0003c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001438  00000000  00000000  0003d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032404  00000000  00000000  0003ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00018fec  00000000  00000000  00071204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00146cdc  00000000  00000000  0008a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d0ecc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005f4c  00000000  00000000  001d0f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007818 	.word	0x08007818

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08007818 	.word	0x08007818

080002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000380 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000302:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000304:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000306:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000308:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800030a:	d332      	bcc.n	8000372 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800030c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800030e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000310:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000312:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000314:	d314      	bcc.n	8000340 <_CheckCase2>

08000316 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000316:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000318:	19d0      	adds	r0, r2, r7
 800031a:	bf00      	nop

0800031c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800031c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000320:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000324:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000326:	d005      	beq.n	8000334 <_CSDone>
        LDRB     R3,[R1], #+1
 8000328:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800032c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000330:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000332:	d1f3      	bne.n	800031c <_LoopCopyStraight>

08000334 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000334:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000338:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800033a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800033c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800033e:	4770      	bx	lr

08000340 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000340:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000342:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000344:	d319      	bcc.n	800037a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000346:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000348:	1b12      	subs	r2, r2, r4

0800034a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800034e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000352:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000356:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000358:	d005      	beq.n	8000366 <_No2ChunkNeeded>

0800035a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800035a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800035e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000362:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000364:	d1f9      	bne.n	800035a <_LoopCopyAfterWrapAround>

08000366 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000366:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800036a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800036c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800036e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000370:	4770      	bx	lr

08000372 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000372:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000374:	3801      	subs	r0, #1
        CMP      R0,R2
 8000376:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000378:	d2cd      	bcs.n	8000316 <_Case4>

0800037a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800037a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800037c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800037e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000380:	2401332c 	.word	0x2401332c
	...

08000390 <memchr>:
 8000390:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000394:	2a10      	cmp	r2, #16
 8000396:	db2b      	blt.n	80003f0 <memchr+0x60>
 8000398:	f010 0f07 	tst.w	r0, #7
 800039c:	d008      	beq.n	80003b0 <memchr+0x20>
 800039e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a2:	3a01      	subs	r2, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d02d      	beq.n	8000404 <memchr+0x74>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	b342      	cbz	r2, 8000400 <memchr+0x70>
 80003ae:	d1f6      	bne.n	800039e <memchr+0xe>
 80003b0:	b4f0      	push	{r4, r5, r6, r7}
 80003b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ba:	f022 0407 	bic.w	r4, r2, #7
 80003be:	f07f 0700 	mvns.w	r7, #0
 80003c2:	2300      	movs	r3, #0
 80003c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003c8:	3c08      	subs	r4, #8
 80003ca:	ea85 0501 	eor.w	r5, r5, r1
 80003ce:	ea86 0601 	eor.w	r6, r6, r1
 80003d2:	fa85 f547 	uadd8	r5, r5, r7
 80003d6:	faa3 f587 	sel	r5, r3, r7
 80003da:	fa86 f647 	uadd8	r6, r6, r7
 80003de:	faa5 f687 	sel	r6, r5, r7
 80003e2:	b98e      	cbnz	r6, 8000408 <memchr+0x78>
 80003e4:	d1ee      	bne.n	80003c4 <memchr+0x34>
 80003e6:	bcf0      	pop	{r4, r5, r6, r7}
 80003e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003ec:	f002 0207 	and.w	r2, r2, #7
 80003f0:	b132      	cbz	r2, 8000400 <memchr+0x70>
 80003f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f6:	3a01      	subs	r2, #1
 80003f8:	ea83 0301 	eor.w	r3, r3, r1
 80003fc:	b113      	cbz	r3, 8000404 <memchr+0x74>
 80003fe:	d1f8      	bne.n	80003f2 <memchr+0x62>
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr
 8000404:	3801      	subs	r0, #1
 8000406:	4770      	bx	lr
 8000408:	2d00      	cmp	r5, #0
 800040a:	bf06      	itte	eq
 800040c:	4635      	moveq	r5, r6
 800040e:	3803      	subeq	r0, #3
 8000410:	3807      	subne	r0, #7
 8000412:	f015 0f01 	tst.w	r5, #1
 8000416:	d107      	bne.n	8000428 <memchr+0x98>
 8000418:	3001      	adds	r0, #1
 800041a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800041e:	bf02      	ittt	eq
 8000420:	3001      	addeq	r0, #1
 8000422:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000426:	3001      	addeq	r0, #1
 8000428:	bcf0      	pop	{r4, r5, r6, r7}
 800042a:	3801      	subs	r0, #1
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000436:	f000 fb9b 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043a:	f000 f853 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043e:	f000 f8cf 	bl	80005e0 <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 8000442:	f000 f8c5 	bl	80005d0 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  //Enable CYCCNT counter to create timestamp of the Segger
  DWT_CTRL |= ( 1 << 0);
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <main+0x98>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <main+0x98>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Start();
  //SEGGER_UART_init(	250000);

  SEGGER_SYSVIEW_Conf();
 8000452:	f004 fc4d 	bl	8004cf0 <SEGGER_SYSVIEW_Conf>


  SEGGER_SYSVIEW_Start();
 8000456:	f005 ff93 	bl	8006380 <SEGGER_SYSVIEW_Start>
 // Segger intialization is completed

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	2302      	movs	r3, #2
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <main+0x9c>)
 8000466:	22c8      	movs	r2, #200	; 0xc8
 8000468:	4919      	ldr	r1, [pc, #100]	; (80004d0 <main+0xa0>)
 800046a:	481a      	ldr	r0, [pc, #104]	; (80004d4 <main+0xa4>)
 800046c:	f002 fd4c 	bl	8002f08 <xTaskCreate>
 8000470:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d00a      	beq.n	800048e <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800047c:	f383 8811 	msr	BASEPRI, r3
 8000480:	f3bf 8f6f 	isb	sy
 8000484:	f3bf 8f4f 	dsb	sy
 8000488:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800048a:	bf00      	nop
 800048c:	e7fe      	b.n	800048c <main+0x5c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2302      	movs	r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <main+0xa8>)
 8000498:	22c8      	movs	r2, #200	; 0xc8
 800049a:	4910      	ldr	r1, [pc, #64]	; (80004dc <main+0xac>)
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <main+0xb0>)
 800049e:	f002 fd33 	bl	8002f08 <xTaskCreate>
 80004a2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d00a      	beq.n	80004c0 <main+0x90>
        __asm volatile
 80004aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004ae:	f383 8811 	msr	BASEPRI, r3
 80004b2:	f3bf 8f6f 	isb	sy
 80004b6:	f3bf 8f4f 	dsb	sy
 80004ba:	60fb      	str	r3, [r7, #12]
    }
 80004bc:	bf00      	nop
 80004be:	e7fe      	b.n	80004be <main+0x8e>

  //start the freertos scheduler
  vTaskStartScheduler();
 80004c0:	f002 fe9c 	bl	80031fc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0x94>
 80004c6:	bf00      	nop
 80004c8:	e0001000 	.word	0xe0001000
 80004cc:	08007830 	.word	0x08007830
 80004d0:	08007848 	.word	0x08007848
 80004d4:	08000839 	.word	0x08000839
 80004d8:	08007850 	.word	0x08007850
 80004dc:	08007868 	.word	0x08007868
 80004e0:	08000875 	.word	0x08000875

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b09c      	sub	sp, #112	; 0x70
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ee:	224c      	movs	r2, #76	; 0x4c
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f006 fd06 	bl	8006f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2220      	movs	r2, #32
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f006 fd00 	bl	8006f04 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <SystemClock_Config+0xe4>)
 8000506:	f04f 32ff 	mov.w	r2, #4294967295
 800050a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800050e:	2004      	movs	r0, #4
 8000510:	f000 fe34 	bl	800117c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000514:	2300      	movs	r3, #0
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	4b2c      	ldr	r3, [pc, #176]	; (80005cc <SystemClock_Config+0xe8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <SystemClock_Config+0xe8>)
 800051e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <SystemClock_Config+0xe8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000530:	bf00      	nop
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <SystemClock_Config+0xe8>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800053a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053e:	d1f8      	bne.n	8000532 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000540:	2321      	movs	r3, #33	; 0x21
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000544:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	2302      	movs	r3, #2
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000556:	2301      	movs	r3, #1
 8000558:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 800055a:	2346      	movs	r3, #70	; 0x46
 800055c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055e:	2302      	movs	r3, #2
 8000560:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000562:	2304      	movs	r3, #4
 8000564:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000566:	2302      	movs	r3, #2
 8000568:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800056a:	230c      	movs	r3, #12
 800056c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800056e:	2300      	movs	r3, #0
 8000570:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fe58 	bl	8001230 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000586:	f000 f9a5 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	233f      	movs	r3, #63	; 0x3f
 800058c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800059a:	2340      	movs	r3, #64	; 0x40
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2107      	movs	r1, #7
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fa6f 	bl	8001a94 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005bc:	f000 f98a 	bl	80008d4 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3770      	adds	r7, #112	; 0x70
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	58024400 	.word	0x58024400
 80005cc:	58024800 	.word	0x58024800

080005d0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b88      	ldr	r3, [pc, #544]	; (8000818 <MX_GPIO_Init+0x238>)
 80005f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005fc:	4a86      	ldr	r2, [pc, #536]	; (8000818 <MX_GPIO_Init+0x238>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000606:	4b84      	ldr	r3, [pc, #528]	; (8000818 <MX_GPIO_Init+0x238>)
 8000608:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	623b      	str	r3, [r7, #32]
 8000612:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000614:	4b80      	ldr	r3, [pc, #512]	; (8000818 <MX_GPIO_Init+0x238>)
 8000616:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800061a:	4a7f      	ldr	r2, [pc, #508]	; (8000818 <MX_GPIO_Init+0x238>)
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000624:	4b7c      	ldr	r3, [pc, #496]	; (8000818 <MX_GPIO_Init+0x238>)
 8000626:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062a:	f003 0320 	and.w	r3, r3, #32
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b79      	ldr	r3, [pc, #484]	; (8000818 <MX_GPIO_Init+0x238>)
 8000634:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000638:	4a77      	ldr	r2, [pc, #476]	; (8000818 <MX_GPIO_Init+0x238>)
 800063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000642:	4b75      	ldr	r3, [pc, #468]	; (8000818 <MX_GPIO_Init+0x238>)
 8000644:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	4b71      	ldr	r3, [pc, #452]	; (8000818 <MX_GPIO_Init+0x238>)
 8000652:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000656:	4a70      	ldr	r2, [pc, #448]	; (8000818 <MX_GPIO_Init+0x238>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000660:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <MX_GPIO_Init+0x238>)
 8000662:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4b6a      	ldr	r3, [pc, #424]	; (8000818 <MX_GPIO_Init+0x238>)
 8000670:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000674:	4a68      	ldr	r2, [pc, #416]	; (8000818 <MX_GPIO_Init+0x238>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800067e:	4b66      	ldr	r3, [pc, #408]	; (8000818 <MX_GPIO_Init+0x238>)
 8000680:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800068c:	4b62      	ldr	r3, [pc, #392]	; (8000818 <MX_GPIO_Init+0x238>)
 800068e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000692:	4a61      	ldr	r2, [pc, #388]	; (8000818 <MX_GPIO_Init+0x238>)
 8000694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000698:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800069c:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <MX_GPIO_Init+0x238>)
 800069e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b5b      	ldr	r3, [pc, #364]	; (8000818 <MX_GPIO_Init+0x238>)
 80006ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b0:	4a59      	ldr	r2, [pc, #356]	; (8000818 <MX_GPIO_Init+0x238>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ba:	4b57      	ldr	r3, [pc, #348]	; (8000818 <MX_GPIO_Init+0x238>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c8:	4b53      	ldr	r3, [pc, #332]	; (8000818 <MX_GPIO_Init+0x238>)
 80006ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ce:	4a52      	ldr	r2, [pc, #328]	; (8000818 <MX_GPIO_Init+0x238>)
 80006d0:	f043 0310 	orr.w	r3, r3, #16
 80006d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006d8:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <MX_GPIO_Init+0x238>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ec:	484b      	ldr	r0, [pc, #300]	; (800081c <MX_GPIO_Init+0x23c>)
 80006ee:	f000 fd2b 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f244 0101 	movw	r1, #16385	; 0x4001
 80006f8:	4849      	ldr	r0, [pc, #292]	; (8000820 <MX_GPIO_Init+0x240>)
 80006fa:	f000 fd25 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	4848      	ldr	r0, [pc, #288]	; (8000824 <MX_GPIO_Init+0x244>)
 8000704:	f000 fd20 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4842      	ldr	r0, [pc, #264]	; (8000828 <MX_GPIO_Init+0x248>)
 800071e:	f000 fb63 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	4838      	ldr	r0, [pc, #224]	; (800081c <MX_GPIO_Init+0x23c>)
 800073c:	f000 fb54 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000740:	f244 0301 	movw	r3, #16385	; 0x4001
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	4619      	mov	r1, r3
 8000758:	4831      	ldr	r0, [pc, #196]	; (8000820 <MX_GPIO_Init+0x240>)
 800075a:	f000 fb45 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800075e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000770:	2307      	movs	r3, #7
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	4619      	mov	r1, r3
 800077a:	482c      	ldr	r0, [pc, #176]	; (800082c <MX_GPIO_Init+0x24c>)
 800077c:	f000 fb34 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000784:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4826      	ldr	r0, [pc, #152]	; (8000830 <MX_GPIO_Init+0x250>)
 8000796:	f000 fb27 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800079a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	4619      	mov	r1, r3
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <MX_GPIO_Init+0x254>)
 80007b0:	f000 fb1a 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007c6:	230a      	movs	r3, #10
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_GPIO_Init+0x254>)
 80007d2:	f000 fb09 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80007d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4811      	ldr	r0, [pc, #68]	; (8000834 <MX_GPIO_Init+0x254>)
 80007f0:	f000 fafa 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f4:	2302      	movs	r3, #2
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_GPIO_Init+0x244>)
 800080c:	f000 faec 	bl	8000de8 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3738      	adds	r7, #56	; 0x38
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400
 800081c:	58021400 	.word	0x58021400
 8000820:	58020400 	.word	0x58020400
 8000824:	58021000 	.word	0x58021000
 8000828:	58020800 	.word	0x58020800
 800082c:	58020c00 	.word	0x58020c00
 8000830:	58021800 	.word	0x58021800
 8000834:	58020000 	.word	0x58020000

08000838 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters){
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	; 0x70
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1){
//		printf("%s\n",(char*)parameters);
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000840:	f107 000c 	add.w	r0, r7, #12
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <task1_handler+0x34>)
 8000848:	2164      	movs	r1, #100	; 0x64
 800084a:	f006 fb63 	bl	8006f14 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4618      	mov	r0, r3
 8000854:	f006 faa4 	bl	8006da0 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <task1_handler+0x38>)
 800085a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 8000868:	e7ea      	b.n	8000840 <task1_handler+0x8>
 800086a:	bf00      	nop
 800086c:	08007870 	.word	0x08007870
 8000870:	e000ed04 	.word	0xe000ed04

08000874 <task2_handler>:
	}
}
static void task2_handler(void* parameters){
 8000874:	b580      	push	{r7, lr}
 8000876:	b09c      	sub	sp, #112	; 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		snprintf(msg,100,"%s\n",(char*)parameters);
 800087c:	f107 000c 	add.w	r0, r7, #12
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <task2_handler+0x34>)
 8000884:	2164      	movs	r1, #100	; 0x64
 8000886:	f006 fb45 	bl	8006f14 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4618      	mov	r0, r3
 8000890:	f006 fa86 	bl	8006da0 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <task2_handler+0x38>)
 8000896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n",(char*)parameters);
 80008a4:	e7ea      	b.n	800087c <task2_handler+0x8>
 80008a6:	bf00      	nop
 80008a8:	08007870 	.word	0x08007870
 80008ac:	e000ed04 	.word	0xe000ed04

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 f991 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40001000 	.word	0x40001000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_MspInit+0x30>)
 80008e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x30>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x30>)
 80008f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000904:	f003 fe70 	bl	80045e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58024400 	.word	0x58024400

08000914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b090      	sub	sp, #64	; 0x40
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b0f      	cmp	r3, #15
 8000920:	d827      	bhi.n	8000972 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000922:	2200      	movs	r2, #0
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	2036      	movs	r0, #54	; 0x36
 8000928:	f000 fa36 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800092c:	2036      	movs	r0, #54	; 0x36
 800092e:	f000 fa4d 	bl	8000dcc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000932:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <HAL_InitTick+0xc4>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <HAL_InitTick+0xc8>)
 800093a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <HAL_InitTick+0xc8>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <HAL_InitTick+0xc8>)
 800094a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000956:	f107 0210 	add.w	r2, r7, #16
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fc0d 	bl	8002180 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800096c:	2b00      	cmp	r3, #0
 800096e:	d106      	bne.n	800097e <HAL_InitTick+0x6a>
 8000970:	e001      	b.n	8000976 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e02b      	b.n	80009ce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000976:	f001 fbed 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 800097a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800097c:	e004      	b.n	8000988 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097e:	f001 fbe9 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8000982:	4603      	mov	r3, r0
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <HAL_InitTick+0xcc>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	0c9b      	lsrs	r3, r3, #18
 8000992:	3b01      	subs	r3, #1
 8000994:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_InitTick+0xd0>)
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <HAL_InitTick+0xd4>)
 800099a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_InitTick+0xd0>)
 800099e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009a4:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_InitTick+0xd0>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_InitTick+0xd0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_InitTick+0xd0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <HAL_InitTick+0xd0>)
 80009b8:	f001 fc24 	bl	8002204 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d104      	bne.n	80009cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <HAL_InitTick+0xd0>)
 80009c4:	f001 fc80 	bl	80022c8 <HAL_TIM_Base_Start_IT>
 80009c8:	4603      	mov	r3, r0
 80009ca:	e000      	b.n	80009ce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3740      	adds	r7, #64	; 0x40
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000008 	.word	0x24000008
 80009dc:	58024400 	.word	0x58024400
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	24000098 	.word	0x24000098
 80009e8:	40001000 	.word	0x40001000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <TIM6_DAC_IRQHandler+0x10>)
 8000a1e:	f001 fccb 	bl	80023b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000098 	.word	0x24000098

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a30:	4b32      	ldr	r3, [pc, #200]	; (8000afc <SystemInit+0xd0>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a31      	ldr	r2, [pc, #196]	; (8000afc <SystemInit+0xd0>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <SystemInit+0xd4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 030f 	and.w	r3, r3, #15
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d807      	bhi.n	8000a5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <SystemInit+0xd4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f023 030f 	bic.w	r3, r3, #15
 8000a54:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <SystemInit+0xd4>)
 8000a56:	f043 0303 	orr.w	r3, r3, #3
 8000a5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a5c:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <SystemInit+0xd8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <SystemInit+0xd8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <SystemInit+0xd8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <SystemInit+0xd8>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4924      	ldr	r1, [pc, #144]	; (8000b04 <SystemInit+0xd8>)
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <SystemInit+0xdc>)
 8000a76:	4013      	ands	r3, r2
 8000a78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <SystemInit+0xd4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 030c 	and.w	r3, r3, #12
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <SystemInit+0xd4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f023 030f 	bic.w	r3, r3, #15
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <SystemInit+0xd4>)
 8000a90:	f043 0303 	orr.w	r3, r3, #3
 8000a94:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <SystemInit+0xd8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <SystemInit+0xd8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <SystemInit+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <SystemInit+0xd8>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <SystemInit+0xe0>)
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <SystemInit+0xd8>)
 8000ab0:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <SystemInit+0xe4>)
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <SystemInit+0xd8>)
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <SystemInit+0xe8>)
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <SystemInit+0xd8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <SystemInit+0xd8>)
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <SystemInit+0xe8>)
 8000ac4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <SystemInit+0xd8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <SystemInit+0xd8>)
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <SystemInit+0xe8>)
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <SystemInit+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SystemInit+0xd8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <SystemInit+0xd8>)
 8000ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <SystemInit+0xd8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <SystemInit+0xec>)
 8000aec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000af0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	52002000 	.word	0x52002000
 8000b04:	58024400 	.word	0x58024400
 8000b08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b0c:	02020200 	.word	0x02020200
 8000b10:	01ff0000 	.word	0x01ff0000
 8000b14:	01010280 	.word	0x01010280
 8000b18:	52004000 	.word	0x52004000

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff ff84 	bl	8000a2c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f006 f999 	bl	8006e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fc6f 	bl	8000430 <main>
  bx  lr
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000b58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b5c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8000b60:	080079c8 	.word	0x080079c8
  ldr r2, =_sbss
 8000b64:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8000b68:	24014914 	.word	0x24014914

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 f903 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000b7c:	f001 f940 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8000b80:	4602      	mov	r2, r0
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_Init+0x68>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	4913      	ldr	r1, [pc, #76]	; (8000bdc <HAL_Init+0x6c>)
 8000b8e:	5ccb      	ldrb	r3, [r1, r3]
 8000b90:	f003 031f 	and.w	r3, r3, #31
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_Init+0x68>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_Init+0x6c>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	f003 031f 	and.w	r3, r3, #31
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_Init+0x70>)
 8000bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_Init+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff feaa 	bl	8000914 <HAL_InitTick>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e002      	b.n	8000bd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bca:	f7ff fe89 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	08007944 	.word	0x08007944
 8000be0:	24000004 	.word	0x24000004
 8000be4:	24000000 	.word	0x24000000

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2400000c 	.word	0x2400000c
 8000c0c:	240000e4 	.word	0x240000e4

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	240000e4 	.word	0x240000e4

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <__NVIC_SetPriorityGrouping+0x40>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x40>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	05fa0000 	.word	0x05fa0000

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da6:	f7ff ff63 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000daa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f7ff ffb3 	bl	8000d1c <NVIC_EncodePriority>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff82 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff56 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000df6:	4b89      	ldr	r3, [pc, #548]	; (800101c <HAL_GPIO_Init+0x234>)
 8000df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dfa:	e194      	b.n	8001126 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 8186 	beq.w	8001120 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <HAL_GPIO_Init+0x44>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 0201 	and.w	r2, r3, #1
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d017      	beq.n	8000eca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d123      	bne.n	8000f1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	69b9      	ldr	r1, [r7, #24]
 8000f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0203 	and.w	r2, r3, #3
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 80e0 	beq.w	8001120 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x238>)
 8000f62:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_GPIO_Init+0x238>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_GPIO_Init+0x238>)
 8000f72:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a29      	ldr	r2, [pc, #164]	; (8001024 <HAL_GPIO_Init+0x23c>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <HAL_GPIO_Init+0x240>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d052      	beq.n	8001050 <HAL_GPIO_Init+0x268>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a1f      	ldr	r2, [pc, #124]	; (800102c <HAL_GPIO_Init+0x244>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d031      	beq.n	8001016 <HAL_GPIO_Init+0x22e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <HAL_GPIO_Init+0x248>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d02b      	beq.n	8001012 <HAL_GPIO_Init+0x22a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_GPIO_Init+0x24c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d025      	beq.n	800100e <HAL_GPIO_Init+0x226>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <HAL_GPIO_Init+0x250>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d01f      	beq.n	800100a <HAL_GPIO_Init+0x222>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_GPIO_Init+0x254>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x21e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_GPIO_Init+0x258>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x21a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_GPIO_Init+0x25c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_GPIO_Init+0x260>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x212>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_GPIO_Init+0x264>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x20e>
 8000ff2:	2309      	movs	r3, #9
 8000ff4:	e02d      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	e02b      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	e029      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e027      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001002:	2306      	movs	r3, #6
 8001004:	e025      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001006:	2305      	movs	r3, #5
 8001008:	e023      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 800100a:	2304      	movs	r3, #4
 800100c:	e021      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 800100e:	2303      	movs	r3, #3
 8001010:	e01f      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001012:	2302      	movs	r3, #2
 8001014:	e01d      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 8001016:	2301      	movs	r3, #1
 8001018:	e01b      	b.n	8001052 <HAL_GPIO_Init+0x26a>
 800101a:	bf00      	nop
 800101c:	58000080 	.word	0x58000080
 8001020:	58024400 	.word	0x58024400
 8001024:	58000400 	.word	0x58000400
 8001028:	58020000 	.word	0x58020000
 800102c:	58020400 	.word	0x58020400
 8001030:	58020800 	.word	0x58020800
 8001034:	58020c00 	.word	0x58020c00
 8001038:	58021000 	.word	0x58021000
 800103c:	58021400 	.word	0x58021400
 8001040:	58021800 	.word	0x58021800
 8001044:	58021c00 	.word	0x58021c00
 8001048:	58022000 	.word	0x58022000
 800104c:	58022400 	.word	0x58022400
 8001050:	2300      	movs	r3, #0
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001062:	4938      	ldr	r1, [pc, #224]	; (8001144 <HAL_GPIO_Init+0x35c>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800109e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3301      	adds	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f ae63 	bne.w	8000dfc <HAL_GPIO_Init+0x14>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3724      	adds	r7, #36	; 0x24
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	58000400 	.word	0x58000400

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001164:	e003      	b.n	800116e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_PWREx_ConfigSupply+0xb0>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	2b06      	cmp	r3, #6
 800118e:	d00a      	beq.n	80011a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_PWREx_ConfigSupply+0xb0>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d001      	beq.n	80011a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e040      	b.n	8001224 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e03e      	b.n	8001224 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_PWREx_ConfigSupply+0xb0>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80011ae:	491f      	ldr	r1, [pc, #124]	; (800122c <HAL_PWREx_ConfigSupply+0xb0>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011b6:	f7ff fd2b 	bl	8000c10 <HAL_GetTick>
 80011ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011bc:	e009      	b.n	80011d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011be:	f7ff fd27 	bl	8000c10 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011cc:	d901      	bls.n	80011d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e028      	b.n	8001224 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_PWREx_ConfigSupply+0xb0>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011de:	d1ee      	bne.n	80011be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b1e      	cmp	r3, #30
 80011e4:	d008      	beq.n	80011f8 <HAL_PWREx_ConfigSupply+0x7c>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b2e      	cmp	r3, #46	; 0x2e
 80011ea:	d005      	beq.n	80011f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b1d      	cmp	r3, #29
 80011f0:	d002      	beq.n	80011f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b2d      	cmp	r3, #45	; 0x2d
 80011f6:	d114      	bne.n	8001222 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80011f8:	f7ff fd0a 	bl	8000c10 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011fe:	e009      	b.n	8001214 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001200:	f7ff fd06 	bl	8000c10 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800120e:	d901      	bls.n	8001214 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e007      	b.n	8001224 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_PWREx_ConfigSupply+0xb0>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d1ee      	bne.n	8001200 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	58024800 	.word	0x58024800

08001230 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f000 bc1f 	b.w	8001a82 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80b3 	beq.w	80013b8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001252:	4b95      	ldr	r3, [pc, #596]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800125c:	4b92      	ldr	r3, [pc, #584]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	2b10      	cmp	r3, #16
 8001266:	d007      	beq.n	8001278 <HAL_RCC_OscConfig+0x48>
 8001268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126a:	2b18      	cmp	r3, #24
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x64>
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d10d      	bne.n	8001294 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8098 	beq.w	80013b6 <HAL_RCC_OscConfig+0x186>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 8093 	bne.w	80013b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e3f6      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x7c>
 800129e:	4b82      	ldr	r3, [pc, #520]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a81      	ldr	r2, [pc, #516]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e058      	b.n	800135e <HAL_RCC_OscConfig+0x12e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d112      	bne.n	80012da <HAL_RCC_OscConfig+0xaa>
 80012b4:	4b7c      	ldr	r3, [pc, #496]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a7b      	ldr	r2, [pc, #492]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b79      	ldr	r3, [pc, #484]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a78      	ldr	r2, [pc, #480]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a75      	ldr	r2, [pc, #468]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e041      	b.n	800135e <HAL_RCC_OscConfig+0x12e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e2:	d112      	bne.n	800130a <HAL_RCC_OscConfig+0xda>
 80012e4:	4b70      	ldr	r3, [pc, #448]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a6f      	ldr	r2, [pc, #444]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b6d      	ldr	r3, [pc, #436]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a6c      	ldr	r2, [pc, #432]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e029      	b.n	800135e <HAL_RCC_OscConfig+0x12e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001312:	d112      	bne.n	800133a <HAL_RCC_OscConfig+0x10a>
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800131a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a60      	ldr	r2, [pc, #384]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b5e      	ldr	r3, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e011      	b.n	800135e <HAL_RCC_OscConfig+0x12e>
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5a      	ldr	r2, [pc, #360]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800134c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001358:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800135c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d013      	beq.n	800138e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fc53 	bl	8000c10 <HAL_GetTick>
 800136a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136e:	f7ff fc4f 	bl	8000c10 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e380      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001380:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x13e>
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fc3f 	bl	8000c10 <HAL_GetTick>
 8001392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fc3b 	bl	8000c10 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e36c      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x166>
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 808c 	beq.w	80014de <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ce:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_RCC_OscConfig+0x1bc>
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	2b18      	cmp	r3, #24
 80013e0:	d137      	bne.n	8001452 <HAL_RCC_OscConfig+0x222>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d132      	bne.n	8001452 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ec:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x1d4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e33e      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 0219 	bic.w	r2, r3, #25
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4925      	ldr	r1, [pc, #148]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fbfb 	bl	8000c10 <HAL_GetTick>
 800141a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fbf7 	bl	8000c10 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e328      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	4917      	ldr	r1, [pc, #92]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001450:	e045      	b.n	80014de <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d028      	beq.n	80014ac <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 0219 	bic.w	r2, r3, #25
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	4910      	ldr	r1, [pc, #64]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fbd0 	bl	8000c10 <HAL_GetTick>
 8001470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fbcc 	bl	8000c10 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e2fd      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	4901      	ldr	r1, [pc, #4]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
 80014a6:	e01a      	b.n	80014de <HAL_RCC_OscConfig+0x2ae>
 80014a8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ac:	4b97      	ldr	r3, [pc, #604]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a96      	ldr	r2, [pc, #600]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fbaa 	bl	8000c10 <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fba6 	bl	8000c10 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e2d7      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014d2:	4b8e      	ldr	r3, [pc, #568]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d06a      	beq.n	80015c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014f4:	4b85      	ldr	r3, [pc, #532]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d007      	beq.n	8001510 <HAL_RCC_OscConfig+0x2e0>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b18      	cmp	r3, #24
 8001504:	d11b      	bne.n	800153e <HAL_RCC_OscConfig+0x30e>
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d116      	bne.n	800153e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001510:	4b7e      	ldr	r3, [pc, #504]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x2f8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b80      	cmp	r3, #128	; 0x80
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e2ac      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001528:	4b78      	ldr	r3, [pc, #480]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	4975      	ldr	r1, [pc, #468]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001538:	4313      	orrs	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800153c:	e040      	b.n	80015c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d023      	beq.n	800158e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001546:	4b71      	ldr	r3, [pc, #452]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a70      	ldr	r2, [pc, #448]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fb5d 	bl	8000c10 <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800155a:	f7ff fb59 	bl	8000c10 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e28a      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800156c:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001578:	4b64      	ldr	r3, [pc, #400]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	4961      	ldr	r1, [pc, #388]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001588:	4313      	orrs	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
 800158c:	e018      	b.n	80015c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5e      	ldr	r2, [pc, #376]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fb39 	bl	8000c10 <HAL_GetTick>
 800159e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb35 	bl	8000c10 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e266      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015b4:	4b55      	ldr	r3, [pc, #340]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d036      	beq.n	800163a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d019      	beq.n	8001608 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80015d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fb16 	bl	8000c10 <HAL_GetTick>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fb12 	bl	8000c10 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e243      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80015fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3b8>
 8001606:	e018      	b.n	800163a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 800160a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160c:	4a3f      	ldr	r2, [pc, #252]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fafc 	bl	8000c10 <HAL_GetTick>
 8001618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff faf8 	bl	8000c10 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e229      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	2b00      	cmp	r3, #0
 8001644:	d036      	beq.n	80016b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d019      	beq.n	8001682 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2e      	ldr	r2, [pc, #184]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001658:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800165a:	f7ff fad9 	bl	8000c10 <HAL_GetTick>
 800165e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001662:	f7ff fad5 	bl	8000c10 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e206      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x432>
 8001680:	e018      	b.n	80016b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800168c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800168e:	f7ff fabf 	bl	8000c10 <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001696:	f7ff fabb 	bl	8000c10 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1ec      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80af 	beq.w	8001820 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_RCC_OscConfig+0x4e0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_RCC_OscConfig+0x4e0>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016ce:	f7ff fa9f 	bl	8000c10 <HAL_GetTick>
 80016d2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff fa9b 	bl	8000c10 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1cc      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_RCC_OscConfig+0x4e0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10b      	bne.n	8001714 <HAL_RCC_OscConfig+0x4e4>
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a02      	ldr	r2, [pc, #8]	; (800170c <HAL_RCC_OscConfig+0x4dc>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	e05b      	b.n	80017c2 <HAL_RCC_OscConfig+0x592>
 800170a:	bf00      	nop
 800170c:	58024400 	.word	0x58024400
 8001710:	58024800 	.word	0x58024800
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d112      	bne.n	8001742 <HAL_RCC_OscConfig+0x512>
 800171c:	4b9d      	ldr	r3, [pc, #628]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a9c      	ldr	r2, [pc, #624]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	4b9a      	ldr	r3, [pc, #616]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a99      	ldr	r2, [pc, #612]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800172e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b97      	ldr	r3, [pc, #604]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a96      	ldr	r2, [pc, #600]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	e03f      	b.n	80017c2 <HAL_RCC_OscConfig+0x592>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d112      	bne.n	8001770 <HAL_RCC_OscConfig+0x540>
 800174a:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a91      	ldr	r2, [pc, #580]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
 8001756:	4b8f      	ldr	r3, [pc, #572]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a8e      	ldr	r2, [pc, #568]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800175c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
 8001762:	4b8c      	ldr	r3, [pc, #560]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a8b      	ldr	r2, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
 800176e:	e028      	b.n	80017c2 <HAL_RCC_OscConfig+0x592>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b85      	cmp	r3, #133	; 0x85
 8001776:	d112      	bne.n	800179e <HAL_RCC_OscConfig+0x56e>
 8001778:	4b86      	ldr	r3, [pc, #536]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	4a85      	ldr	r2, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6713      	str	r3, [r2, #112]	; 0x70
 8001784:	4b83      	ldr	r3, [pc, #524]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	4a82      	ldr	r2, [pc, #520]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800178a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178e:	6713      	str	r3, [r2, #112]	; 0x70
 8001790:	4b80      	ldr	r3, [pc, #512]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a7f      	ldr	r2, [pc, #508]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	e011      	b.n	80017c2 <HAL_RCC_OscConfig+0x592>
 800179e:	4b7d      	ldr	r3, [pc, #500]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	4a7c      	ldr	r2, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70
 80017aa:	4b7a      	ldr	r3, [pc, #488]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a79      	ldr	r2, [pc, #484]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80017b0:	f023 0304 	bic.w	r3, r3, #4
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	4b77      	ldr	r3, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a76      	ldr	r2, [pc, #472]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80017bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d015      	beq.n	80017f6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa21 	bl	8000c10 <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fa1d 	bl	8000c10 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e14c      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ee      	beq.n	80017d2 <HAL_RCC_OscConfig+0x5a2>
 80017f4:	e014      	b.n	8001820 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fa0b 	bl	8000c10 <HAL_GetTick>
 80017fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fa07 	bl	8000c10 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e136      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1ee      	bne.n	80017fe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 812b 	beq.w	8001a80 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800182a:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001832:	2b18      	cmp	r3, #24
 8001834:	f000 80bb 	beq.w	80019ae <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	2b02      	cmp	r3, #2
 800183e:	f040 8095 	bne.w	800196c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a53      	ldr	r2, [pc, #332]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff f9df 	bl	8000c10 <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff f9db 	bl	8000c10 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e10c      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001878:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_OscConfig+0x768>)
 800187a:	4013      	ands	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	430a      	orrs	r2, r1
 8001888:	4942      	ldr	r1, [pc, #264]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800188a:	4313      	orrs	r3, r2
 800188c:	628b      	str	r3, [r1, #40]	; 0x28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	3b01      	subs	r3, #1
 8001894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	3b01      	subs	r3, #1
 800189e:	025b      	lsls	r3, r3, #9
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	3b01      	subs	r3, #1
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	3b01      	subs	r3, #1
 80018b8:	061b      	lsls	r3, r3, #24
 80018ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018be:	4935      	ldr	r1, [pc, #212]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	4a32      	ldr	r2, [pc, #200]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d4:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_OscConfig+0x76c>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	492d      	ldr	r1, [pc, #180]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	f023 020c 	bic.w	r2, r3, #12
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	4928      	ldr	r1, [pc, #160]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018f6:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f023 0202 	bic.w	r2, r3, #2
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4924      	ldr	r1, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001904:	4313      	orrs	r3, r2
 8001906:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800191a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a15      	ldr	r2, [pc, #84]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f964 	bl	8000c10 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f960 	bl	8000c10 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e091      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x71c>
 800196a:	e089      	b.n	8001a80 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_RCC_OscConfig+0x764>)
 8001972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f94a 	bl	8000c10 <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197e:	e00f      	b.n	80019a0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f946 	bl	8000c10 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d908      	bls.n	80019a0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e077      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
 8001992:	bf00      	nop
 8001994:	58024400 	.word	0x58024400
 8001998:	fffffc0c 	.word	0xfffffc0c
 800199c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a0:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e9      	bne.n	8001980 <HAL_RCC_OscConfig+0x750>
 80019ac:	e068      	b.n	8001a80 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d031      	beq.n	8001a26 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d12a      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d122      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d11a      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	0a5b      	lsrs	r3, r3, #9
 80019f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d111      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d108      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	0e1b      	lsrs	r3, r3, #24
 8001a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e02b      	b.n	8001a82 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	08db      	lsrs	r3, r3, #3
 8001a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a34:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d01f      	beq.n	8001a80 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a4c:	f7ff f8e0 	bl	8000c10 <HAL_GetTick>
 8001a50:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a52:	bf00      	nop
 8001a54:	f7ff f8dc 	bl	8000c10 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d0f9      	beq.n	8001a54 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 8001a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_RCC_OscConfig+0x860>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a6c:	00d2      	lsls	r2, r2, #3
 8001a6e:	4907      	ldr	r1, [pc, #28]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_RCC_OscConfig+0x85c>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	ffff0007 	.word	0xffff0007

08001a94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e19c      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 020f 	bic.w	r2, r3, #15
 8001abe:	4985      	ldr	r1, [pc, #532]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e184      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d908      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001af4:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4975      	ldr	r1, [pc, #468]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d908      	bls.n	8001b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	496a      	ldr	r1, [pc, #424]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d010      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d908      	bls.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	495e      	ldr	r1, [pc, #376]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d010      	beq.n	8001b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d908      	bls.n	8001b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b7e:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4953      	ldr	r1, [pc, #332]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d010      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d908      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f023 020f 	bic.w	r2, r3, #15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4947      	ldr	r1, [pc, #284]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d055      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4940      	ldr	r1, [pc, #256]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001be4:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d121      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0f6      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d115      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0ea      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0de      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0d6      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f023 0207 	bic.w	r2, r3, #7
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4925      	ldr	r1, [pc, #148]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c46:	f7fe ffe3 	bl	8000c10 <HAL_GetTick>
 8001c4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4e:	f7fe ffdf 	bl	8000c10 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0be      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d1eb      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d010      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d208      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f023 020f 	bic.w	r2, r3, #15
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d214      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	4906      	ldr	r1, [pc, #24]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_RCC_ClockConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e086      	b.n	8001de2 <HAL_RCC_ClockConfig+0x34e>
 8001cd4:	52002000 	.word	0x52002000
 8001cd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d010      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d208      	bcs.n	8001d0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	4939      	ldr	r1, [pc, #228]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d208      	bcs.n	8001d38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d26:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	492e      	ldr	r1, [pc, #184]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d208      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4922      	ldr	r1, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d010      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d208      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4917      	ldr	r1, [pc, #92]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001d94:	f000 f834 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	4912      	ldr	r1, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x35c>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_RCC_ClockConfig+0x358>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <HAL_RCC_ClockConfig+0x35c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x360>)
 8001dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x364>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x368>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fd9c 	bl	8000914 <HAL_InitTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	58024400 	.word	0x58024400
 8001df0:	08007944 	.word	0x08007944
 8001df4:	24000004 	.word	0x24000004
 8001df8:	24000000 	.word	0x24000000
 8001dfc:	24000008 	.word	0x24000008

08001e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e06:	4bb3      	ldr	r3, [pc, #716]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	f200 8155 	bhi.w	80020be <HAL_RCC_GetSysClockFreq+0x2be>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e81 	.word	0x08001e81
 8001e20:	080020bf 	.word	0x080020bf
 8001e24:	080020bf 	.word	0x080020bf
 8001e28:	080020bf 	.word	0x080020bf
 8001e2c:	080020bf 	.word	0x080020bf
 8001e30:	080020bf 	.word	0x080020bf
 8001e34:	080020bf 	.word	0x080020bf
 8001e38:	080020bf 	.word	0x080020bf
 8001e3c:	08001ea7 	.word	0x08001ea7
 8001e40:	080020bf 	.word	0x080020bf
 8001e44:	080020bf 	.word	0x080020bf
 8001e48:	080020bf 	.word	0x080020bf
 8001e4c:	080020bf 	.word	0x080020bf
 8001e50:	080020bf 	.word	0x080020bf
 8001e54:	080020bf 	.word	0x080020bf
 8001e58:	080020bf 	.word	0x080020bf
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	080020bf 	.word	0x080020bf
 8001e64:	080020bf 	.word	0x080020bf
 8001e68:	080020bf 	.word	0x080020bf
 8001e6c:	080020bf 	.word	0x080020bf
 8001e70:	080020bf 	.word	0x080020bf
 8001e74:	080020bf 	.word	0x080020bf
 8001e78:	080020bf 	.word	0x080020bf
 8001e7c:	08001eb3 	.word	0x08001eb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e80:	4b94      	ldr	r3, [pc, #592]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e8c:	4b91      	ldr	r3, [pc, #580]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	4a90      	ldr	r2, [pc, #576]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e9e:	e111      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ea0:	4b8d      	ldr	r3, [pc, #564]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ea2:	61bb      	str	r3, [r7, #24]
      break;
 8001ea4:	e10e      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ea6:	4b8d      	ldr	r3, [pc, #564]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ea8:	61bb      	str	r3, [r7, #24]
      break;
 8001eaa:	e10b      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001eac:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001eae:	61bb      	str	r3, [r7, #24]
      break;
 8001eb0:	e108      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eb2:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ebc:	4b85      	ldr	r3, [pc, #532]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ec8:	4b82      	ldr	r3, [pc, #520]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ed2:	4b80      	ldr	r3, [pc, #512]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80e1 	beq.w	80020b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	f000 8083 	beq.w	8002004 <HAL_RCC_GetSysClockFreq+0x204>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	f200 80a1 	bhi.w	8002048 <HAL_RCC_GetSysClockFreq+0x248>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x114>
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d056      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f12:	e099      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f14:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02d      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f20:	4b6c      	ldr	r3, [pc, #432]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4a:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f7a:	e087      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	eddf 6a58 	vldr	s13, [pc, #352]	; 80020e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fbe:	e065      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd2:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002002:	e043      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80020f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002026:	ed97 6a02 	vldr	s12, [r7, #8]
 800202a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800202e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800203a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002046:	e021      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002052:	eddf 6a26 	vldr	s13, [pc, #152]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8002056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800206a:	ed97 6a02 	vldr	s12, [r7, #8]
 800206e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800207a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800207e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800208a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	0a5b      	lsrs	r3, r3, #9
 8002092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002096:	3301      	adds	r3, #1
 8002098:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b0:	ee17 3a90 	vmov	r3, s15
 80020b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020c0:	61bb      	str	r3, [r7, #24]
      break;
 80020c2:	bf00      	nop
  }

  return sysclockfreq;
 80020c4:	69bb      	ldr	r3, [r7, #24]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	58024400 	.word	0x58024400
 80020d8:	03d09000 	.word	0x03d09000
 80020dc:	003d0900 	.word	0x003d0900
 80020e0:	007a1200 	.word	0x007a1200
 80020e4:	46000000 	.word	0x46000000
 80020e8:	4c742400 	.word	0x4c742400
 80020ec:	4a742400 	.word	0x4a742400
 80020f0:	4af42400 	.word	0x4af42400

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80020fa:	f7ff fe81 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_GetHCLKFreq+0x50>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490f      	ldr	r1, [pc, #60]	; (8002148 <HAL_RCC_GetHCLKFreq+0x54>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_GetHCLKFreq+0x50>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_GetHCLKFreq+0x54>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_RCC_GetHCLKFreq+0x58>)
 8002130:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <HAL_RCC_GetHCLKFreq+0x58>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	58024400 	.word	0x58024400
 8002148:	08007944 	.word	0x08007944
 800214c:	24000004 	.word	0x24000004
 8002150:	24000000 	.word	0x24000000

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002158:	f7ff ffcc 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCC_GetPCLK1Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	58024400 	.word	0x58024400
 800217c:	08007944 	.word	0x08007944

08002180 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	223f      	movs	r2, #63	; 0x3f
 800218e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCC_GetClockConfig+0x7c>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f003 0207 	and.w	r2, r3, #7
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_RCC_GetClockConfig+0x7c>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCC_GetClockConfig+0x7c>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_GetClockConfig+0x7c>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_RCC_GetClockConfig+0x7c>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_GetClockConfig+0x7c>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_RCC_GetClockConfig+0x7c>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_RCC_GetClockConfig+0x80>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 020f 	and.w	r2, r3, #15
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	601a      	str	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	58024400 	.word	0x58024400
 8002200:	52002000 	.word	0x52002000

08002204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e049      	b.n	80022aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f841 	bl	80022b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3304      	adds	r3, #4
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f000 fa00 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e054      	b.n	800238a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <HAL_TIM_Base_Start_IT+0xd0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x80>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d01d      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x80>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a22      	ldr	r2, [pc, #136]	; (800239c <HAL_TIM_Base_Start_IT+0xd4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x80>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x80>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x80>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x80>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_TIM_Base_Start_IT+0xe4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x80>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d115      	bne.n	8002374 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_TIM_Base_Start_IT+0xec>)
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b06      	cmp	r3, #6
 8002358:	d015      	beq.n	8002386 <HAL_TIM_Base_Start_IT+0xbe>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d011      	beq.n	8002386 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002372:	e008      	b.n	8002386 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e000      	b.n	8002388 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800
 80023a4:	40000c00 	.word	0x40000c00
 80023a8:	40010400 	.word	0x40010400
 80023ac:	40001800 	.word	0x40001800
 80023b0:	40014000 	.word	0x40014000
 80023b4:	00010007 	.word	0x00010007

080023b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0202 	mvn.w	r2, #2
 80023e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f905 	bl	800260a <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8f7 	bl	80025f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f908 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0204 	mvn.w	r2, #4
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f8db 	bl	800260a <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8cd 	bl	80025f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f8de 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d122      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b08      	cmp	r3, #8
 8002482:	d11b      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0208 	mvn.w	r2, #8
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2204      	movs	r2, #4
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8b1 	bl	800260a <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8a3 	bl	80025f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f8b4 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d122      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d11b      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2208      	movs	r2, #8
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f887 	bl	800260a <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f879 	bl	80025f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f88a 	bl	800261e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0201 	mvn.w	r2, #1
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe f9ba 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b80      	cmp	r3, #128	; 0x80
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f914 	bl	8002790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002576:	d10e      	bne.n	8002596 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d107      	bne.n	8002596 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800258e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f907 	bl	80027a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d10e      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d107      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f838 	bl	8002632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d10e      	bne.n	80025ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0220 	mvn.w	r2, #32
 80025e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f8c7 	bl	800277c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a40      	ldr	r2, [pc, #256]	; (800275c <TIM_Base_SetConfig+0x114>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d00f      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <TIM_Base_SetConfig+0x118>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <TIM_Base_SetConfig+0x11c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <TIM_Base_SetConfig+0x120>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3a      	ldr	r2, [pc, #232]	; (800276c <TIM_Base_SetConfig+0x124>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2f      	ldr	r2, [pc, #188]	; (800275c <TIM_Base_SetConfig+0x114>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d01b      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <TIM_Base_SetConfig+0x118>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d017      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <TIM_Base_SetConfig+0x11c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <TIM_Base_SetConfig+0x120>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00f      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a29      	ldr	r2, [pc, #164]	; (800276c <TIM_Base_SetConfig+0x124>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a28      	ldr	r2, [pc, #160]	; (8002770 <TIM_Base_SetConfig+0x128>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <TIM_Base_SetConfig+0x12c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <TIM_Base_SetConfig+0x9a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a26      	ldr	r2, [pc, #152]	; (8002778 <TIM_Base_SetConfig+0x130>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <TIM_Base_SetConfig+0x114>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00f      	beq.n	8002740 <TIM_Base_SetConfig+0xf8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <TIM_Base_SetConfig+0x124>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00b      	beq.n	8002740 <TIM_Base_SetConfig+0xf8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <TIM_Base_SetConfig+0x128>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0xf8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <TIM_Base_SetConfig+0x12c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0xf8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <TIM_Base_SetConfig+0x130>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00
 800276c:	40010400 	.word	0x40010400
 8002770:	40014000 	.word	0x40014000
 8002774:	40014400 	.word	0x40014400
 8002778:	40014800 	.word	0x40014800

0800277c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 0208 	add.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0208 	add.w	r2, r3, #8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f103 0208 	add.w	r2, r3, #8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d103      	bne.n	8002832 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e00c      	b.n	800284c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3308      	adds	r3, #8
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e002      	b.n	8002840 <vListInsert+0x2e>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d2f6      	bcs.n	800283a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6892      	ldr	r2, [r2, #8]
 800289a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6852      	ldr	r2, [r2, #4]
 80028a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d103      	bne.n	80028b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80028e2:	2301      	movs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <xQueueGenericReset+0x2e>
        __asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	60fb      	str	r3, [r7, #12]
    }
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d052      	beq.n	80029b2 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002910:	2b00      	cmp	r3, #0
 8002912:	d04e      	beq.n	80029b2 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	2100      	movs	r1, #0
 800291e:	fba3 2302 	umull	r2, r3, r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d000      	beq.n	8002928 <xQueueGenericReset+0x50>
 8002926:	2101      	movs	r1, #1
 8002928:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d141      	bne.n	80029b2 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 800292e:	f001 fed9 	bl	80046e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	6939      	ldr	r1, [r7, #16]
 800293c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	441a      	add	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2200      	movs	r2, #0
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	3b01      	subs	r3, #1
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	441a      	add	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	22ff      	movs	r2, #255	; 0xff
 800297a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00f      	beq.n	80029ac <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	3310      	adds	r3, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f000 ff87 	bl	80038a4 <xTaskRemoveFromEventList>
 8002996:	e009      	b.n	80029ac <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3310      	adds	r3, #16
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff0b 	bl	80027b8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	3324      	adds	r3, #36	; 0x24
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff06 	bl	80027b8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80029ac:	f001 feca 	bl	8004744 <vPortExitCritical>
 80029b0:	e001      	b.n	80029b6 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericReset+0xfa>
        __asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	60bb      	str	r3, [r7, #8]
    }
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80029d2:	697b      	ldr	r3, [r7, #20]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02e      	beq.n	8002a52 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80029f4:	2100      	movs	r1, #0
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	fba3 2302 	umull	r2, r3, r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d000      	beq.n	8002a04 <xQueueGenericCreate+0x28>
 8002a02:	2101      	movs	r1, #1
 8002a04:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d123      	bne.n	8002a52 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a12:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a16:	d81c      	bhi.n	8002a52 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3350      	adds	r3, #80	; 0x50
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 ff88 	bl	800493c <pvPortMalloc>
 8002a2c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01c      	beq.n	8002a6e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3350      	adds	r3, #80	; 0x50
 8002a3c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a3e:	79fa      	ldrb	r2, [r7, #7]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f814 	bl	8002a78 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002a50:	e00d      	b.n	8002a6e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <xQueueGenericCreate+0x92>
        __asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	613b      	str	r3, [r7, #16]
    }
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
    }
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e002      	b.n	8002a9a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	69b8      	ldr	r0, [r7, #24]
 8002aaa:	f7ff ff15 	bl	80028d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	2073      	movs	r0, #115	; 0x73
 8002abe:	f003 fb57 	bl	8006170 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b08f      	sub	sp, #60	; 0x3c
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <xQueueReceive+0x30>
        __asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	623b      	str	r3, [r7, #32]
    }
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <xQueueReceive+0x3e>
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <xQueueReceive+0x42>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueReceive+0x44>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xQueueReceive+0x5e>
        __asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61fb      	str	r3, [r7, #28]
    }
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b2a:	f001 f901 	bl	8003d30 <xTaskGetSchedulerState>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <xQueueReceive+0x6e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <xQueueReceive+0x72>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <xQueueReceive+0x74>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueReceive+0x8e>
        __asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	61bb      	str	r3, [r7, #24]
    }
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b5a:	f001 fdc3 	bl	80046e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d024      	beq.n	8002bb4 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b6e:	f000 f8b3 	bl	8002cd8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	4618      	mov	r0, r3
 8002b76:	f004 f827 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f004 f823 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002b82:	4602      	mov	r2, r0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2101      	movs	r1, #1
 8002b88:	9100      	str	r1, [sp, #0]
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	205c      	movs	r0, #92	; 0x5c
 8002b8e:	f003 fb65 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fe7c 	bl	80038a4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002bac:	f001 fdca 	bl	8004744 <vPortExitCritical>
                return pdPASS;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e08a      	b.n	8002cca <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d113      	bne.n	8002be2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002bba:	f001 fdc3 	bl	8004744 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 f801 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f003 fffd 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	9100      	str	r1, [sp, #0]
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	205c      	movs	r0, #92	; 0x5c
 8002bda:	f003 fb3f 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e073      	b.n	8002cca <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 ff33 	bl	8003a58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bf6:	f001 fda5 	bl	8004744 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bfa:	f000 fb61 	bl	80032c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bfe:	f001 fd71 	bl	80046e4 <vPortEnterCritical>
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d103      	bne.n	8002c18 <xQueueReceive+0x14c>
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d103      	bne.n	8002c2e <xQueueReceive+0x162>
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2e:	f001 fd89 	bl	8004744 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c32:	1d3a      	adds	r2, r7, #4
 8002c34:	f107 0310 	add.w	r3, r7, #16
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 ff22 	bl	8003a84 <xTaskCheckForTimeOut>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d124      	bne.n	8002c90 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c48:	f000 f8be 	bl	8002dc8 <prvIsQueueEmpty>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d018      	beq.n	8002c84 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	3324      	adds	r3, #36	; 0x24
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fdb6 	bl	80037cc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c62:	f000 f85f 	bl	8002d24 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c66:	f000 fb39 	bl	80032dc <xTaskResumeAll>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af74 	bne.w	8002b5a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <xQueueReceive+0x208>)
 8002c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	e76a      	b.n	8002b5a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c86:	f000 f84d 	bl	8002d24 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c8a:	f000 fb27 	bl	80032dc <xTaskResumeAll>
 8002c8e:	e764      	b.n	8002b5a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c92:	f000 f847 	bl	8002d24 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c96:	f000 fb21 	bl	80032dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c9c:	f000 f894 	bl	8002dc8 <prvIsQueueEmpty>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f43f af59 	beq.w	8002b5a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 ff8c 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f003 ff88 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	9100      	str	r1, [sp, #0]
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	205c      	movs	r0, #92	; 0x5c
 8002cc4:	f003 faca 	bl	800625c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002cc8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3734      	adds	r7, #52	; 0x34
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	441a      	add	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d303      	bcc.n	8002d0c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68d9      	ldr	r1, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	461a      	mov	r2, r3
 8002d16:	6838      	ldr	r0, [r7, #0]
 8002d18:	f004 f8e6 	bl	8006ee8 <memcpy>
    }
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d2c:	f001 fcda 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d36:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d38:	e011      	b.n	8002d5e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3324      	adds	r3, #36	; 0x24
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fdac 	bl	80038a4 <xTaskRemoveFromEventList>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002d52:	f000 fefd 	bl	8003b50 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	dce9      	bgt.n	8002d3a <prvUnlockQueue+0x16>
 8002d66:	e000      	b.n	8002d6a <prvUnlockQueue+0x46>
                    break;
 8002d68:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	22ff      	movs	r2, #255	; 0xff
 8002d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d72:	f001 fce7 	bl	8004744 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d76:	f001 fcb5 	bl	80046e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d80:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d82:	e011      	b.n	8002da8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d012      	beq.n	8002db2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3310      	adds	r3, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd87 	bl	80038a4 <xTaskRemoveFromEventList>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d9c:	f000 fed8 	bl	8003b50 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002da0:	7bbb      	ldrb	r3, [r7, #14]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	dce9      	bgt.n	8002d84 <prvUnlockQueue+0x60>
 8002db0:	e000      	b.n	8002db4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002db2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	22ff      	movs	r2, #255	; 0xff
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002dbc:	f001 fcc2 	bl	8004744 <vPortExitCritical>
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dd0:	f001 fc88 	bl	80046e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e001      	b.n	8002de6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002de6:	f001 fcad 	bl	8004744 <vPortExitCritical>

    return xReturn;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	60fb      	str	r3, [r7, #12]
    }
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d024      	beq.n	8002e6e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e01e      	b.n	8002e68 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <vQueueAddToRegistry+0xa8>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d105      	bne.n	8002e46 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <vQueueAddToRegistry+0xa8>)
 8002e40:	4413      	add	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
                    break;
 8002e44:	e013      	b.n	8002e6e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <vQueueAddToRegistry+0x6e>
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <vQueueAddToRegistry+0xa8>)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <vQueueAddToRegistry+0xa8>)
 8002e5e:	4413      	add	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b07      	cmp	r3, #7
 8002e6c:	d9dd      	bls.n	8002e2a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00f      	beq.n	8002e94 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 fea0 	bl	8006bc8 <SEGGER_SYSVIEW_ShrinkId>
 8002e88:	4601      	mov	r1, r0
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2071      	movs	r0, #113	; 0x71
 8002e90:	f003 f914 	bl	80060bc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002e94:	bf00      	nop
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	240000e8 	.word	0x240000e8

08002ea0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002eb0:	f001 fc18 	bl	80046e4 <vPortEnterCritical>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d103      	bne.n	8002eca <vQueueWaitForMessageRestricted+0x2a>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d103      	bne.n	8002ee0 <vQueueWaitForMessageRestricted+0x40>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee0:	f001 fc30 	bl	8004744 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3324      	adds	r3, #36	; 0x24
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fc8d 	bl	8003814 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff12 	bl	8002d24 <prvUnlockQueue>
    }
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fd0d 	bl	800493c <pvPortMalloc>
 8002f22:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d013      	beq.n	8002f52 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f2a:	205c      	movs	r0, #92	; 0x5c
 8002f2c:	f001 fd06 	bl	800493c <pvPortMalloc>
 8002f30:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002f38:	225c      	movs	r2, #92	; 0x5c
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	69f8      	ldr	r0, [r7, #28]
 8002f3e:	f003 ffe1 	bl	8006f04 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
 8002f48:	e005      	b.n	8002f56 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f001 fdb0 	bl	8004ab0 <vPortFree>
 8002f50:	e001      	b.n	8002f56 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9303      	str	r3, [sp, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f80e 	bl	8002f94 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f78:	69f8      	ldr	r0, [r7, #28]
 8002f7a:	f000 f899 	bl	80030b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e002      	b.n	8002f8a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
    }
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	461a      	mov	r2, r3
 8002fac:	21a5      	movs	r1, #165	; 0xa5
 8002fae:	f003 ffa9 	bl	8006f04 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002fbc:	440b      	add	r3, r1
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f023 0307 	bic.w	r3, r3, #7
 8002fca:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <prvInitialiseNewTask+0x58>
        __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	617b      	str	r3, [r7, #20]
    }
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01e      	beq.n	8003030 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e012      	b.n	800301e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	7819      	ldrb	r1, [r3, #0]
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	3334      	adds	r3, #52	; 0x34
 8003008:	460a      	mov	r2, r1
 800300a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3301      	adds	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d9e9      	bls.n	8002ff8 <prvInitialiseNewTask+0x64>
 8003024:	e000      	b.n	8003028 <prvInitialiseNewTask+0x94>
            {
                break;
 8003026:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	2b37      	cmp	r3, #55	; 0x37
 8003034:	d90a      	bls.n	800304c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	613b      	str	r3, [r7, #16]
    }
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	2b37      	cmp	r3, #55	; 0x37
 8003050:	d901      	bls.n	8003056 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003052:	2337      	movs	r3, #55	; 0x37
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003060:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	3304      	adds	r3, #4
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fbc6 	bl	80027f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	3318      	adds	r3, #24
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fbc1 	bl	80027f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	68f9      	ldr	r1, [r7, #12]
 8003090:	69b8      	ldr	r0, [r7, #24]
 8003092:	f001 f979 	bl	8004388 <pxPortInitialiseStack>
 8003096:	4602      	mov	r2, r0
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030a8:	bf00      	nop
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030b8:	f001 fb14 	bl	80046e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <prvAddNewTaskToReadyList+0x134>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a48      	ldr	r2, [pc, #288]	; (80031e4 <prvAddNewTaskToReadyList+0x134>)
 80030c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030c6:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <prvAddNewTaskToReadyList+0x138>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030ce:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <prvAddNewTaskToReadyList+0x138>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030d4:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <prvAddNewTaskToReadyList+0x134>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d110      	bne.n	80030fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030dc:	f000 fd56 	bl	8003b8c <prvInitialiseTaskLists>
 80030e0:	e00d      	b.n	80030fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030e2:	4b42      	ldr	r3, [pc, #264]	; (80031ec <prvAddNewTaskToReadyList+0x13c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <prvAddNewTaskToReadyList+0x138>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d802      	bhi.n	80030fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030f8:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <prvAddNewTaskToReadyList+0x138>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030fe:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <prvAddNewTaskToReadyList+0x140>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	4a3a      	ldr	r2, [pc, #232]	; (80031f0 <prvAddNewTaskToReadyList+0x140>)
 8003106:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <prvAddNewTaskToReadyList+0x140>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <prvAddNewTaskToReadyList+0x94>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fc8f 	bl	8006a3c <SEGGER_SYSVIEW_OnTaskCreate>
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	461d      	mov	r5, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461c      	mov	r4, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	1ae3      	subs	r3, r4, r3
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462b      	mov	r3, r5
 8003140:	f001 fe8e 	bl	8004e60 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fcfc 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <prvAddNewTaskToReadyList+0x144>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d903      	bls.n	8003160 <prvAddNewTaskToReadyList+0xb0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <prvAddNewTaskToReadyList+0x144>)
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	4924      	ldr	r1, [pc, #144]	; (80031f8 <prvAddNewTaskToReadyList+0x148>)
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3304      	adds	r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	3204      	adds	r2, #4
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <prvAddNewTaskToReadyList+0x148>)
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	615a      	str	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4912      	ldr	r1, [pc, #72]	; (80031f8 <prvAddNewTaskToReadyList+0x148>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	1c59      	adds	r1, r3, #1
 80031be:	480e      	ldr	r0, [pc, #56]	; (80031f8 <prvAddNewTaskToReadyList+0x148>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4403      	add	r3, r0
 80031ca:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80031cc:	f001 faba 	bl	8004744 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <prvAddNewTaskToReadyList+0x13c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <prvAddNewTaskToReadyList+0x12c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <prvAddNewTaskToReadyList+0x138>)
 80031da:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}
 80031e4:	240005fc 	.word	0x240005fc
 80031e8:	24000128 	.word	0x24000128
 80031ec:	24000608 	.word	0x24000608
 80031f0:	24000618 	.word	0x24000618
 80031f4:	24000604 	.word	0x24000604
 80031f8:	2400012c 	.word	0x2400012c

080031fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <vTaskStartScheduler+0xa4>)
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	2300      	movs	r3, #0
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2300      	movs	r3, #0
 800320c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003210:	4924      	ldr	r1, [pc, #144]	; (80032a4 <vTaskStartScheduler+0xa8>)
 8003212:	4825      	ldr	r0, [pc, #148]	; (80032a8 <vTaskStartScheduler+0xac>)
 8003214:	f7ff fe78 	bl	8002f08 <xTaskCreate>
 8003218:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8003220:	f000 fe12 	bl	8003e48 <xTimerCreateTimerTask>
 8003224:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d124      	bne.n	8003276 <vTaskStartScheduler+0x7a>
        __asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	60bb      	str	r3, [r7, #8]
    }
 800323e:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <vTaskStartScheduler+0xb0>)
 8003242:	f04f 32ff 	mov.w	r2, #4294967295
 8003246:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <vTaskStartScheduler+0xb4>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <vTaskStartScheduler+0xb8>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <vTaskStartScheduler+0xbc>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <vTaskStartScheduler+0xa4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d102      	bne.n	8003266 <vTaskStartScheduler+0x6a>
 8003260:	f003 fbd0 	bl	8006a04 <SEGGER_SYSVIEW_OnIdle>
 8003264:	e004      	b.n	8003270 <vTaskStartScheduler+0x74>
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <vTaskStartScheduler+0xbc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fc28 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003270:	f001 f918 	bl	80044a4 <xPortStartScheduler>
 8003274:	e00e      	b.n	8003294 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d10a      	bne.n	8003294 <vTaskStartScheduler+0x98>
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	607b      	str	r3, [r7, #4]
    }
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <vTaskStartScheduler+0xc0>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	24000620 	.word	0x24000620
 80032a4:	08007874 	.word	0x08007874
 80032a8:	08003b69 	.word	0x08003b69
 80032ac:	2400061c 	.word	0x2400061c
 80032b0:	24000608 	.word	0x24000608
 80032b4:	24000600 	.word	0x24000600
 80032b8:	24000128 	.word	0x24000128
 80032bc:	24000010 	.word	0x24000010

080032c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <vTaskSuspendAll+0x18>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	4a03      	ldr	r2, [pc, #12]	; (80032d8 <vTaskSuspendAll+0x18>)
 80032cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	24000624 	.word	0x24000624

080032dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <xTaskResumeAll+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <xTaskResumeAll+0x2c>
        __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	607b      	str	r3, [r7, #4]
    }
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003308:	f001 f9ec 	bl	80046e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800330c:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <xTaskResumeAll+0x1c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	4a63      	ldr	r2, [pc, #396]	; (80034a0 <xTaskResumeAll+0x1c4>)
 8003314:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003316:	4b62      	ldr	r3, [pc, #392]	; (80034a0 <xTaskResumeAll+0x1c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 80b9 	bne.w	8003492 <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003320:	4b60      	ldr	r3, [pc, #384]	; (80034a4 <xTaskResumeAll+0x1c8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80b4 	beq.w	8003492 <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800332a:	e08f      	b.n	800344c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800332c:	4b5e      	ldr	r3, [pc, #376]	; (80034a8 <xTaskResumeAll+0x1cc>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	6a12      	ldr	r2, [r2, #32]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	69d2      	ldr	r2, [r2, #28]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3318      	adds	r3, #24
 8003356:	429a      	cmp	r2, r3
 8003358:	d103      	bne.n	8003362 <xTaskResumeAll+0x86>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2200      	movs	r2, #0
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	68d2      	ldr	r2, [r2, #12]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	6892      	ldr	r2, [r2, #8]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3304      	adds	r3, #4
 8003394:	429a      	cmp	r2, r3
 8003396:	d103      	bne.n	80033a0 <xTaskResumeAll+0xc4>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2200      	movs	r2, #0
 80033a4:	615a      	str	r2, [r3, #20]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1e5a      	subs	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 fbc6 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <xTaskResumeAll+0x1d0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d903      	bls.n	80033cc <xTaskResumeAll+0xf0>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	4a38      	ldr	r2, [pc, #224]	; (80034ac <xTaskResumeAll+0x1d0>)
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	4937      	ldr	r1, [pc, #220]	; (80034b0 <xTaskResumeAll+0x1d4>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3304      	adds	r3, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	3204      	adds	r2, #4
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	1d1a      	adds	r2, r3, #4
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <xTaskResumeAll+0x1d4>)
 8003410:	441a      	add	r2, r3
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	615a      	str	r2, [r3, #20]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	4925      	ldr	r1, [pc, #148]	; (80034b0 <xTaskResumeAll+0x1d4>)
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c59      	adds	r1, r3, #1
 800342a:	4821      	ldr	r0, [pc, #132]	; (80034b0 <xTaskResumeAll+0x1d4>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <xTaskResumeAll+0x1d8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <xTaskResumeAll+0x1dc>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <xTaskResumeAll+0x1cc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	f47f af6b 	bne.w	800332c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800345c:	f000 fc4c 	bl	8003cf8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <xTaskResumeAll+0x1e0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800346c:	f000 f84a 	bl	8003504 <xTaskIncrementTick>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <xTaskResumeAll+0x1dc>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	3b01      	subs	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f1      	bne.n	800346c <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <xTaskResumeAll+0x1e0>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <xTaskResumeAll+0x1dc>)
 8003490:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003492:	f001 f957 	bl	8004744 <vPortExitCritical>

    return xAlreadyYielded;
 8003496:	697b      	ldr	r3, [r7, #20]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	24000624 	.word	0x24000624
 80034a4:	240005fc 	.word	0x240005fc
 80034a8:	240005bc 	.word	0x240005bc
 80034ac:	24000604 	.word	0x24000604
 80034b0:	2400012c 	.word	0x2400012c
 80034b4:	24000128 	.word	0x24000128
 80034b8:	24000610 	.word	0x24000610
 80034bc:	2400060c 	.word	0x2400060c

080034c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <xTaskGetTickCount+0x1c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	24000600 	.word	0x24000600

080034e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034e6:	f001 f9e9 	bl	80048bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <xTaskGetTickCountFromISR+0x20>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034f4:	683b      	ldr	r3, [r7, #0]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	24000600 	.word	0x24000600

08003504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350e:	4b70      	ldr	r3, [pc, #448]	; (80036d0 <xTaskIncrementTick+0x1cc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 80d2 	bne.w	80036bc <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003518:	4b6e      	ldr	r3, [pc, #440]	; (80036d4 <xTaskIncrementTick+0x1d0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003520:	4a6c      	ldr	r2, [pc, #432]	; (80036d4 <xTaskIncrementTick+0x1d0>)
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d120      	bne.n	800356e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800352c:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <xTaskIncrementTick+0x1d4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <xTaskIncrementTick+0x48>
        __asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	607b      	str	r3, [r7, #4]
    }
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xTaskIncrementTick+0x46>
 800354c:	4b62      	ldr	r3, [pc, #392]	; (80036d8 <xTaskIncrementTick+0x1d4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	4b62      	ldr	r3, [pc, #392]	; (80036dc <xTaskIncrementTick+0x1d8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <xTaskIncrementTick+0x1d4>)
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4a60      	ldr	r2, [pc, #384]	; (80036dc <xTaskIncrementTick+0x1d8>)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <xTaskIncrementTick+0x1dc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a5e      	ldr	r2, [pc, #376]	; (80036e0 <xTaskIncrementTick+0x1dc>)
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	f000 fbc5 	bl	8003cf8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800356e:	4b5d      	ldr	r3, [pc, #372]	; (80036e4 <xTaskIncrementTick+0x1e0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a3a      	ldr	r2, [r7, #32]
 8003574:	429a      	cmp	r2, r3
 8003576:	f0c0 80a6 	bcc.w	80036c6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800357a:	4b57      	ldr	r3, [pc, #348]	; (80036d8 <xTaskIncrementTick+0x1d4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d104      	bne.n	800358e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003584:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <xTaskIncrementTick+0x1e0>)
 8003586:	f04f 32ff 	mov.w	r2, #4294967295
 800358a:	601a      	str	r2, [r3, #0]
                    break;
 800358c:	e09b      	b.n	80036c6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358e:	4b52      	ldr	r3, [pc, #328]	; (80036d8 <xTaskIncrementTick+0x1d4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800359e:	6a3a      	ldr	r2, [r7, #32]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d203      	bcs.n	80035ae <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035a6:	4a4f      	ldr	r2, [pc, #316]	; (80036e4 <xTaskIncrementTick+0x1e0>)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80035ac:	e08b      	b.n	80036c6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	68d2      	ldr	r2, [r2, #12]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	6892      	ldr	r2, [r2, #8]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	3304      	adds	r3, #4
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d103      	bne.n	80035dc <xTaskIncrementTick+0xd8>
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01e      	beq.n	8003632 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	6a12      	ldr	r2, [r2, #32]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	69d2      	ldr	r2, [r2, #28]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	3318      	adds	r3, #24
 8003616:	429a      	cmp	r2, r3
 8003618:	d103      	bne.n	8003622 <xTaskIncrementTick+0x11e>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2200      	movs	r2, #0
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4618      	mov	r0, r3
 8003636:	f003 fa85 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <xTaskIncrementTick+0x1e4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d903      	bls.n	800364e <xTaskIncrementTick+0x14a>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <xTaskIncrementTick+0x1e4>)
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4926      	ldr	r1, [pc, #152]	; (80036ec <xTaskIncrementTick+0x1e8>)
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	3304      	adds	r3, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	3204      	adds	r2, #4
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4a16      	ldr	r2, [pc, #88]	; (80036ec <xTaskIncrementTick+0x1e8>)
 8003692:	441a      	add	r2, r3
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	615a      	str	r2, [r3, #20]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	4913      	ldr	r1, [pc, #76]	; (80036ec <xTaskIncrementTick+0x1e8>)
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	480f      	ldr	r0, [pc, #60]	; (80036ec <xTaskIncrementTick+0x1e8>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4403      	add	r3, r0
 80036b8:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ba:	e75e      	b.n	800357a <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <xTaskIncrementTick+0x1ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <xTaskIncrementTick+0x1ec>)
 80036c4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3728      	adds	r7, #40	; 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	24000624 	.word	0x24000624
 80036d4:	24000600 	.word	0x24000600
 80036d8:	240005b4 	.word	0x240005b4
 80036dc:	240005b8 	.word	0x240005b8
 80036e0:	24000614 	.word	0x24000614
 80036e4:	2400061c 	.word	0x2400061c
 80036e8:	24000604 	.word	0x24000604
 80036ec:	2400012c 	.word	0x2400012c
 80036f0:	2400060c 	.word	0x2400060c

080036f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <vTaskSwitchContext+0xc0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <vTaskSwitchContext+0xc4>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003708:	e04f      	b.n	80037aa <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <vTaskSwitchContext+0xc4>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <vTaskSwitchContext+0xc8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e010      	b.n	800373a <vTaskSwitchContext+0x46>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <vTaskSwitchContext+0x40>
        __asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	607b      	str	r3, [r7, #4]
    }
 8003730:	bf00      	nop
 8003732:	e7fe      	b.n	8003732 <vTaskSwitchContext+0x3e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4921      	ldr	r1, [pc, #132]	; (80037c0 <vTaskSwitchContext+0xcc>)
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0e4      	beq.n	8003718 <vTaskSwitchContext+0x24>
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <vTaskSwitchContext+0xcc>)
 800375a:	4413      	add	r3, r2
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3308      	adds	r3, #8
 8003770:	429a      	cmp	r2, r3
 8003772:	d104      	bne.n	800377e <vTaskSwitchContext+0x8a>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <vTaskSwitchContext+0xd0>)
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <vTaskSwitchContext+0xc8>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <vTaskSwitchContext+0xd0>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <vTaskSwitchContext+0xd4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d102      	bne.n	80037a0 <vTaskSwitchContext+0xac>
 800379a:	f003 f933 	bl	8006a04 <SEGGER_SYSVIEW_OnIdle>
}
 800379e:	e004      	b.n	80037aa <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <vTaskSwitchContext+0xd0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 f98b 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	24000624 	.word	0x24000624
 80037b8:	24000610 	.word	0x24000610
 80037bc:	24000604 	.word	0x24000604
 80037c0:	2400012c 	.word	0x2400012c
 80037c4:	24000128 	.word	0x24000128
 80037c8:	24000620 	.word	0x24000620

080037cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	60fb      	str	r3, [r7, #12]
    }
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <vTaskPlaceOnEventList+0x44>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3318      	adds	r3, #24
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff f809 	bl	8002812 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003800:	2101      	movs	r1, #1
 8003802:	6838      	ldr	r0, [r7, #0]
 8003804:	f000 fab2 	bl	8003d6c <prvAddCurrentTaskToDelayedList>
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	24000128 	.word	0x24000128

08003814 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	613b      	str	r3, [r7, #16]
    }
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	61da      	str	r2, [r3, #28]
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	621a      	str	r2, [r3, #32]
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	3218      	adds	r2, #24
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f103 0218 	add.w	r2, r3, #24
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	629a      	str	r2, [r3, #40]	; 0x28
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003884:	f04f 33ff 	mov.w	r3, #4294967295
 8003888:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800388a:	2024      	movs	r0, #36	; 0x24
 800388c:	f002 fbbc 	bl	8006008 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	68b8      	ldr	r0, [r7, #8]
 8003894:	f000 fa6a 	bl	8003d6c <prvAddCurrentTaskToDelayedList>
    }
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	24000128 	.word	0x24000128

080038a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	60fb      	str	r3, [r7, #12]
    }
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	6a12      	ldr	r2, [r2, #32]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	69d2      	ldr	r2, [r2, #28]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	3318      	adds	r3, #24
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d103      	bne.n	80038fe <xTaskRemoveFromEventList+0x5a>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	6a1a      	ldr	r2, [r3, #32]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2200      	movs	r2, #0
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390e:	4b4c      	ldr	r3, [pc, #304]	; (8003a40 <xTaskRemoveFromEventList+0x19c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d163      	bne.n	80039de <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	68d2      	ldr	r2, [r2, #12]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	6892      	ldr	r2, [r2, #8]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	3304      	adds	r3, #4
 8003938:	429a      	cmp	r2, r3
 800393a:	d103      	bne.n	8003944 <xTaskRemoveFromEventList+0xa0>
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	1e5a      	subs	r2, r3, #1
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	4618      	mov	r0, r3
 8003958:	f003 f8f4 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <xTaskRemoveFromEventList+0x1a0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d903      	bls.n	8003970 <xTaskRemoveFromEventList+0xcc>
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <xTaskRemoveFromEventList+0x1a0>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4934      	ldr	r1, [pc, #208]	; (8003a48 <xTaskRemoveFromEventList+0x1a4>)
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3304      	adds	r3, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	3204      	adds	r2, #4
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	1d1a      	adds	r2, r3, #4
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4a25      	ldr	r2, [pc, #148]	; (8003a48 <xTaskRemoveFromEventList+0x1a4>)
 80039b4:	441a      	add	r2, r3
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	615a      	str	r2, [r3, #20]
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039be:	4922      	ldr	r1, [pc, #136]	; (8003a48 <xTaskRemoveFromEventList+0x1a4>)
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1c59      	adds	r1, r3, #1
 80039ce:	481e      	ldr	r0, [pc, #120]	; (8003a48 <xTaskRemoveFromEventList+0x1a4>)
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4403      	add	r3, r0
 80039da:	6019      	str	r1, [r3, #0]
 80039dc:	e01b      	b.n	8003a16 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <xTaskRemoveFromEventList+0x1a8>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	61da      	str	r2, [r3, #28]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	621a      	str	r2, [r3, #32]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	6a3a      	ldr	r2, [r7, #32]
 80039f8:	3218      	adds	r2, #24
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f103 0218 	add.w	r2, r3, #24
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <xTaskRemoveFromEventList+0x1a8>)
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <xTaskRemoveFromEventList+0x1a8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <xTaskRemoveFromEventList+0x1a8>)
 8003a14:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <xTaskRemoveFromEventList+0x1ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d905      	bls.n	8003a30 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <xTaskRemoveFromEventList+0x1b0>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e001      	b.n	8003a34 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3728      	adds	r7, #40	; 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	24000624 	.word	0x24000624
 8003a44:	24000604 	.word	0x24000604
 8003a48:	2400012c 	.word	0x2400012c
 8003a4c:	240005bc 	.word	0x240005bc
 8003a50:	24000128 	.word	0x24000128
 8003a54:	24000610 	.word	0x24000610

08003a58 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <vTaskInternalSetTimeOutState+0x24>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <vTaskInternalSetTimeOutState+0x28>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	605a      	str	r2, [r3, #4]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	24000614 	.word	0x24000614
 8003a80:	24000600 	.word	0x24000600

08003a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	613b      	str	r3, [r7, #16]
    }
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
    }
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ac6:	f000 fe0d 	bl	80046e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003aca:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <xTaskCheckForTimeOut+0xc4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d102      	bne.n	8003aea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e026      	b.n	8003b38 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <xTaskCheckForTimeOut+0xc8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d00a      	beq.n	8003b0c <xTaskCheckForTimeOut+0x88>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d305      	bcc.n	8003b0c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e015      	b.n	8003b38 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20b      	bcs.n	8003b2e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	1ad2      	subs	r2, r2, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ff98 	bl	8003a58 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e004      	b.n	8003b38 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b38:	f000 fe04 	bl	8004744 <vPortExitCritical>

    return xReturn;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	24000600 	.word	0x24000600
 8003b4c:	24000614 	.word	0x24000614

08003b50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <vTaskMissedYield+0x14>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	24000610 	.word	0x24000610

08003b68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b70:	f000 f84c 	bl	8003c0c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <prvIdleTask+0x20>)
 8003b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b84:	e7f4      	b.n	8003b70 <prvIdleTask+0x8>
 8003b86:	bf00      	nop
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	e00c      	b.n	8003bb2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <prvInitialiseTaskLists+0x60>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fe06 	bl	80027b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b37      	cmp	r3, #55	; 0x37
 8003bb6:	d9ef      	bls.n	8003b98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bb8:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bba:	f7fe fdfd 	bl	80027b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bbe:	480d      	ldr	r0, [pc, #52]	; (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003bc0:	f7fe fdfa 	bl	80027b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003bc4:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <prvInitialiseTaskLists+0x6c>)
 8003bc6:	f7fe fdf7 	bl	80027b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003bca:	480c      	ldr	r0, [pc, #48]	; (8003bfc <prvInitialiseTaskLists+0x70>)
 8003bcc:	f7fe fdf4 	bl	80027b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003bd0:	480b      	ldr	r0, [pc, #44]	; (8003c00 <prvInitialiseTaskLists+0x74>)
 8003bd2:	f7fe fdf1 	bl	80027b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <prvInitialiseTaskLists+0x78>)
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <prvInitialiseTaskLists+0x7c>)
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2400012c 	.word	0x2400012c
 8003bf0:	2400058c 	.word	0x2400058c
 8003bf4:	240005a0 	.word	0x240005a0
 8003bf8:	240005bc 	.word	0x240005bc
 8003bfc:	240005d0 	.word	0x240005d0
 8003c00:	240005e8 	.word	0x240005e8
 8003c04:	240005b4 	.word	0x240005b4
 8003c08:	240005b8 	.word	0x240005b8

08003c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c12:	e019      	b.n	8003c48 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003c14:	f000 fd66 	bl	80046e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <prvCheckTasksWaitingTermination+0x50>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fe2d 	bl	8002884 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c32:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c3c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003c3e:	f000 fd81 	bl	8004744 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f848 	bl	8003cd8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e1      	bne.n	8003c14 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	240005d0 	.word	0x240005d0
 8003c60:	240005fc 	.word	0x240005fc
 8003c64:	240005e4 	.word	0x240005e4

08003c68 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003c74:	e005      	b.n	8003c82 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	607b      	str	r3, [r7, #4]
            ulCount++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2ba5      	cmp	r3, #165	; 0xa5
 8003c88:	d0f5      	beq.n	8003c76 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	b29b      	uxth	r3, r3
    }
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <uxTaskGetStackHighWaterMark+0x14>
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <uxTaskGetStackHighWaterMark+0x34>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	e000      	b.n	8003cb6 <uxTaskGetStackHighWaterMark+0x16>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003cbe:	6938      	ldr	r0, [r7, #16]
 8003cc0:	f7ff ffd2 	bl	8003c68 <prvTaskCheckFreeStackSpace>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
    }
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	24000128 	.word	0x24000128

08003cd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fee3 	bl	8004ab0 <vPortFree>
            vPortFree( pxTCB );
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fee0 	bl	8004ab0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <prvResetNextTaskUnblockTime+0x30>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <prvResetNextTaskUnblockTime+0x34>)
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d0e:	e005      	b.n	8003d1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <prvResetNextTaskUnblockTime+0x30>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <prvResetNextTaskUnblockTime+0x34>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	240005b4 	.word	0x240005b4
 8003d2c:	2400061c 	.word	0x2400061c

08003d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <xTaskGetSchedulerState+0x34>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	e008      	b.n	8003d56 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <xTaskGetSchedulerState+0x38>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	e001      	b.n	8003d56 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d56:	687b      	ldr	r3, [r7, #4]
    }
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	24000608 	.word	0x24000608
 8003d68:	24000624 	.word	0x24000624

08003d6c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d76:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d7c:	4b2d      	ldr	r3, [pc, #180]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fd7e 	bl	8002884 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d124      	bne.n	8003dda <prvAddCurrentTaskToDelayedList+0x6e>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d021      	beq.n	8003dda <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	6892      	ldr	r2, [r2, #8]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	3204      	adds	r2, #4
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	1d1a      	adds	r2, r3, #4
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003dca:	615a      	str	r2, [r3, #20]
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dd8:	e026      	b.n	8003e28 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d209      	bcs.n	8003e06 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <prvAddCurrentTaskToDelayedList+0xd0>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f7fe fd07 	bl	8002812 <vListInsert>
}
 8003e04:	e010      	b.n	8003e28 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e06:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7fe fcfd 	bl	8002812 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d202      	bcs.n	8003e28 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	24000600 	.word	0x24000600
 8003e34:	24000128 	.word	0x24000128
 8003e38:	240005e8 	.word	0x240005e8
 8003e3c:	240005b8 	.word	0x240005b8
 8003e40:	240005b4 	.word	0x240005b4
 8003e44:	2400061c 	.word	0x2400061c

08003e48 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e52:	f000 fa63 	bl	800431c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e56:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <xTimerCreateTimerTask+0x54>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <xTimerCreateTimerTask+0x58>)
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	2302      	movs	r3, #2
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e6c:	490d      	ldr	r1, [pc, #52]	; (8003ea4 <xTimerCreateTimerTask+0x5c>)
 8003e6e:	480e      	ldr	r0, [pc, #56]	; (8003ea8 <xTimerCreateTimerTask+0x60>)
 8003e70:	f7ff f84a 	bl	8002f08 <xTaskCreate>
 8003e74:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	603b      	str	r3, [r7, #0]
    }
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003e92:	687b      	ldr	r3, [r7, #4]
    }
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	24000658 	.word	0x24000658
 8003ea0:	2400065c 	.word	0x2400065c
 8003ea4:	0800787c 	.word	0x0800787c
 8003ea8:	08003f51 	.word	0x08003f51

08003eac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003eb8:	e008      	b.n	8003ecc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	18d1      	adds	r1, r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f8dd 	bl	8004098 <prvInsertTimerInActiveList>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ea      	bne.n	8003eba <prvReloadTimer+0xe>
        }
    }
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <prvProcessExpiredTimer+0x5c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe fcbb 	bl	8002884 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7ff ffc3 	bl	8003eac <prvReloadTimer>
 8003f26:	e008      	b.n	8003f3a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	4798      	blx	r3
    }
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	24000650 	.word	0x24000650

08003f50 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f58:	f107 0308 	add.w	r3, r7, #8
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f857 	bl	8004010 <prvGetNextExpireTime>
 8003f62:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4619      	mov	r1, r3
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f803 	bl	8003f74 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f6e:	f000 f8d5 	bl	800411c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f72:	e7f1      	b.n	8003f58 <prvTimerTask+0x8>

08003f74 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f7e:	f7ff f99f 	bl	80032c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f82:	f107 0308 	add.w	r3, r7, #8
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f866 	bl	8004058 <prvSampleTimeNow>
 8003f8c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d130      	bne.n	8003ff6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <prvProcessTimerOrBlockTask+0x3c>
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d806      	bhi.n	8003fb0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fa2:	f7ff f99b 	bl	80032dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fa6:	68f9      	ldr	r1, [r7, #12]
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ffa1 	bl	8003ef0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003fae:	e024      	b.n	8003ffa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <prvProcessTimerOrBlockTask+0x90>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <prvProcessTimerOrBlockTask+0x50>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <prvProcessTimerOrBlockTask+0x52>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <prvProcessTimerOrBlockTask+0x94>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f7fe ff63 	bl	8002ea0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003fda:	f7ff f97f 	bl	80032dc <xTaskResumeAll>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <prvProcessTimerOrBlockTask+0x98>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
    }
 8003ff4:	e001      	b.n	8003ffa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ff6:	f7ff f971 	bl	80032dc <xTaskResumeAll>
    }
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	24000654 	.word	0x24000654
 8004008:	24000658 	.word	0x24000658
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004018:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <prvGetNextExpireTime+0x44>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <prvGetNextExpireTime+0x16>
 8004022:	2201      	movs	r2, #1
 8004024:	e000      	b.n	8004028 <prvGetNextExpireTime+0x18>
 8004026:	2200      	movs	r2, #0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <prvGetNextExpireTime+0x44>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e001      	b.n	8004044 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004044:	68fb      	ldr	r3, [r7, #12]
    }
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	24000650 	.word	0x24000650

08004058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004060:	f7ff fa2e 	bl	80034c0 <xTaskGetTickCount>
 8004064:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <prvSampleTimeNow+0x3c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	429a      	cmp	r2, r3
 800406e:	d205      	bcs.n	800407c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004070:	f000 f92e 	bl	80042d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e002      	b.n	8004082 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004082:	4a04      	ldr	r2, [pc, #16]	; (8004094 <prvSampleTimeNow+0x3c>)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004088:	68fb      	ldr	r3, [r7, #12]
    }
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	24000660 	.word	0x24000660

08004098 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d812      	bhi.n	80040e4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad2      	subs	r2, r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e01b      	b.n	800410a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <prvInsertTimerInActiveList+0x7c>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7fe fb98 	bl	8002812 <vListInsert>
 80040e2:	e012      	b.n	800410a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d206      	bcs.n	80040fa <prvInsertTimerInActiveList+0x62>
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e007      	b.n	800410a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <prvInsertTimerInActiveList+0x80>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f7fe fb84 	bl	8002812 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800410a:	697b      	ldr	r3, [r7, #20]
    }
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	24000654 	.word	0x24000654
 8004118:	24000650 	.word	0x24000650

0800411c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004122:	e0c2      	b.n	80042aa <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	da18      	bge.n	800415c <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	3304      	adds	r3, #4
 800412e:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <prvProcessReceivedCommands+0x30>
        __asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	61bb      	str	r3, [r7, #24]
    }
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6850      	ldr	r0, [r2, #4]
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	6892      	ldr	r2, [r2, #8]
 8004158:	4611      	mov	r1, r2
 800415a:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f2c0 80a2 	blt.w	80042a8 <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	3304      	adds	r3, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe fb85 	bl	8002884 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800417a:	463b      	mov	r3, r7
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff6b 	bl	8004058 <prvSampleTimeNow>
 8004182:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3b01      	subs	r3, #1
 8004188:	2b08      	cmp	r3, #8
 800418a:	f200 808e 	bhi.w	80042aa <prvProcessReceivedCommands+0x18e>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <prvProcessReceivedCommands+0x78>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041b9 	.word	0x080041b9
 800419c:	08004221 	.word	0x08004221
 80041a0:	08004235 	.word	0x08004235
 80041a4:	0800427f 	.word	0x0800427f
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080041b9 	.word	0x080041b9
 80041b0:	08004221 	.word	0x08004221
 80041b4:	08004235 	.word	0x08004235
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	18d1      	adds	r1, r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	6a38      	ldr	r0, [r7, #32]
 80041d8:	f7ff ff5e 	bl	8004098 <prvInsertTimerInActiveList>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d063      	beq.n	80042aa <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	4619      	mov	r1, r3
 80041fc:	6a38      	ldr	r0, [r7, #32]
 80041fe:	f7ff fe55 	bl	8003eac <prvReloadTimer>
 8004202:	e008      	b.n	8004216 <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	6a38      	ldr	r0, [r7, #32]
 800421c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800421e:	e044      	b.n	80042aa <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004232:	e03a      	b.n	80042aa <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <prvProcessReceivedCommands+0x14e>
        __asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	617b      	str	r3, [r7, #20]
    }
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	18d1      	adds	r1, r2, r3
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	6a38      	ldr	r0, [r7, #32]
 8004278:	f7ff ff0e 	bl	8004098 <prvInsertTimerInActiveList>
                        break;
 800427c:	e015      	b.n	80042aa <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 800428c:	6a38      	ldr	r0, [r7, #32]
 800428e:	f000 fc0f 	bl	8004ab0 <vPortFree>
 8004292:	e00a      	b.n	80042aa <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042a6:	e000      	b.n	80042aa <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80042a8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <prvProcessReceivedCommands+0x1b0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	1d39      	adds	r1, r7, #4
 80042b0:	2200      	movs	r2, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fc0a 	bl	8002acc <xQueueReceive>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f af32 	bne.w	8004124 <prvProcessReceivedCommands+0x8>
        }
    }
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3728      	adds	r7, #40	; 0x28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	24000658 	.word	0x24000658

080042d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042d6:	e009      	b.n	80042ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <prvSwitchTimerLists+0x44>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80042e2:	f04f 31ff 	mov.w	r1, #4294967295
 80042e6:	6838      	ldr	r0, [r7, #0]
 80042e8:	f7ff fe02 	bl	8003ef0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <prvSwitchTimerLists+0x44>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <prvSwitchTimerLists+0x44>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <prvSwitchTimerLists+0x48>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <prvSwitchTimerLists+0x44>)
 8004302:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <prvSwitchTimerLists+0x48>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6013      	str	r3, [r2, #0]
    }
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	24000650 	.word	0x24000650
 8004318:	24000654 	.word	0x24000654

0800431c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004320:	f000 f9e0 	bl	80046e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <prvCheckForValidListAndQueue+0x54>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800432c:	4811      	ldr	r0, [pc, #68]	; (8004374 <prvCheckForValidListAndQueue+0x58>)
 800432e:	f7fe fa43 	bl	80027b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004332:	4811      	ldr	r0, [pc, #68]	; (8004378 <prvCheckForValidListAndQueue+0x5c>)
 8004334:	f7fe fa40 	bl	80027b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <prvCheckForValidListAndQueue+0x60>)
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <prvCheckForValidListAndQueue+0x58>)
 800433c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <prvCheckForValidListAndQueue+0x64>)
 8004340:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <prvCheckForValidListAndQueue+0x5c>)
 8004342:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004344:	2200      	movs	r2, #0
 8004346:	2110      	movs	r1, #16
 8004348:	200a      	movs	r0, #10
 800434a:	f7fe fb47 	bl	80029dc <xQueueGenericCreate>
 800434e:	4603      	mov	r3, r0
 8004350:	4a07      	ldr	r2, [pc, #28]	; (8004370 <prvCheckForValidListAndQueue+0x54>)
 8004352:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <prvCheckForValidListAndQueue+0x54>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <prvCheckForValidListAndQueue+0x54>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4908      	ldr	r1, [pc, #32]	; (8004384 <prvCheckForValidListAndQueue+0x68>)
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fd46 	bl	8002df4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004368:	f000 f9ec 	bl	8004744 <vPortExitCritical>
    }
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}
 8004370:	24000658 	.word	0x24000658
 8004374:	24000628 	.word	0x24000628
 8004378:	2400063c 	.word	0x2400063c
 800437c:	24000650 	.word	0x24000650
 8004380:	24000654 	.word	0x24000654
 8004384:	08007884 	.word	0x08007884

08004388 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b04      	subs	r3, #4
 8004398:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b04      	subs	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 0201 	bic.w	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043b8:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <pxPortInitialiseStack+0x64>)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b14      	subs	r3, #20
 80043c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3b04      	subs	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f06f 0202 	mvn.w	r2, #2
 80043d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b20      	subs	r3, #32
 80043dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	080043f1 	.word	0x080043f1

080043f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <prvTaskExitError+0x54>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d00a      	beq.n	800441a <prvTaskExitError+0x2a>
        __asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
    }
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <prvTaskExitError+0x28>
        __asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
    }
 800442c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800442e:	bf00      	nop
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0fc      	beq.n	8004430 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	24000014 	.word	0x24000014
	...

08004450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	4770      	bx	lr
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst2>:
 8004470:	24000128 	.word	0x24000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <prvPortStartFirstTask+0x24>)
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f380 8808 	msr	MSP, r0
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8814 	msr	CONTROL, r0
 800448a:	b662      	cpsie	i
 800448c:	b661      	cpsie	f
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	df00      	svc	0
 8004498:	bf00      	nop
 800449a:	0000      	.short	0x0000
 800449c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop

080044a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044aa:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a46      	ldr	r2, [pc, #280]	; (80045c8 <xPortStartScheduler+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x26>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044ca:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <xPortStartScheduler+0x120>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <xPortStartScheduler+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10a      	bne.n	80044ea <xPortStartScheduler+0x46>
        __asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	60fb      	str	r3, [r7, #12]
    }
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ea:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <xPortStartScheduler+0x12c>)
 80044ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	22ff      	movs	r2, #255	; 0xff
 80044fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <xPortStartScheduler+0x130>)
 8004510:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <xPortStartScheduler+0x134>)
 8004514:	2207      	movs	r2, #7
 8004516:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004518:	e009      	b.n	800452e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <xPortStartScheduler+0x134>)
 8004522:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d0ef      	beq.n	800451a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <xPortStartScheduler+0x134>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1c3 0307 	rsb	r3, r3, #7
 8004542:	2b04      	cmp	r3, #4
 8004544:	d00a      	beq.n	800455c <xPortStartScheduler+0xb8>
        __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60bb      	str	r3, [r7, #8]
    }
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <xPortStartScheduler+0x134>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <xPortStartScheduler+0x134>)
 8004564:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <xPortStartScheduler+0x134>)
 8004570:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <xPortStartScheduler+0x138>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <xPortStartScheduler+0x138>)
 8004580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004584:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <xPortStartScheduler+0x138>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a14      	ldr	r2, [pc, #80]	; (80045dc <xPortStartScheduler+0x138>)
 800458c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004592:	f000 f963 	bl	800485c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <xPortStartScheduler+0x13c>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800459c:	f000 f982 	bl	80048a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <xPortStartScheduler+0x140>)
 80045a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045ac:	f7ff ff64 	bl	8004478 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045b0:	f7ff f8a0 	bl	80036f4 <vTaskSwitchContext>
    prvTaskExitError();
 80045b4:	f7ff ff1c 	bl	80043f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	e000ed00 	.word	0xe000ed00
 80045c8:	410fc271 	.word	0x410fc271
 80045cc:	410fc270 	.word	0x410fc270
 80045d0:	e000e400 	.word	0xe000e400
 80045d4:	24000664 	.word	0x24000664
 80045d8:	24000668 	.word	0x24000668
 80045dc:	e000ed20 	.word	0xe000ed20
 80045e0:	24000014 	.word	0x24000014
 80045e4:	e000ef34 	.word	0xe000ef34

080045e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <vInitPrioGroupValue+0xe4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a37      	ldr	r2, [pc, #220]	; (80046d0 <vInitPrioGroupValue+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <vInitPrioGroupValue+0x26>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	613b      	str	r3, [r7, #16]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <vInitPrioGroupValue+0xe4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <vInitPrioGroupValue+0xec>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10a      	bne.n	800462e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	60fb      	str	r3, [r7, #12]
    }
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <vInitPrioGroupValue+0xf0>)
 8004630:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <vInitPrioGroupValue+0xf4>)
 8004654:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800465c:	e009      	b.n	8004672 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3b01      	subs	r3, #1
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004666:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d0ef      	beq.n	800465e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	d00a      	beq.n	80046a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60bb      	str	r3, [r7, #8]
    }
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b2:	4a0b      	ldr	r2, [pc, #44]	; (80046e0 <vInitPrioGroupValue+0xf8>)
 80046b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00
 80046d0:	410fc271 	.word	0x410fc271
 80046d4:	410fc270 	.word	0x410fc270
 80046d8:	e000e400 	.word	0xe000e400
 80046dc:	24000664 	.word	0x24000664
 80046e0:	24000668 	.word	0x24000668

080046e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
        __asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	607b      	str	r3, [r7, #4]
    }
 80046fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <vPortEnterCritical+0x58>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	4a0d      	ldr	r2, [pc, #52]	; (800473c <vPortEnterCritical+0x58>)
 8004706:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <vPortEnterCritical+0x58>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10f      	bne.n	8004730 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortEnterCritical+0x5c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <vPortEnterCritical+0x4c>
        __asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	603b      	str	r3, [r7, #0]
    }
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <vPortEnterCritical+0x4a>
    }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	24000014 	.word	0x24000014
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <vPortExitCritical+0x50>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <vPortExitCritical+0x24>
        __asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	607b      	str	r3, [r7, #4]
    }
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <vPortExitCritical+0x50>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <vPortExitCritical+0x50>)
 8004770:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <vPortExitCritical+0x50>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d105      	bne.n	8004786 <vPortExitCritical+0x42>
 800477a:	2300      	movs	r3, #0
 800477c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004784:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	24000014 	.word	0x24000014
	...

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <pxCurrentTCBConst>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f01e 0f10 	tst.w	lr, #16
 80047b0:	bf08      	it	eq
 80047b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047c4:	f380 8811 	msr	BASEPRI, r0
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f7fe ff90 	bl	80036f4 <vTaskSwitchContext>
 80047d4:	f04f 0000 	mov.w	r0, #0
 80047d8:	f380 8811 	msr	BASEPRI, r0
 80047dc:	bc09      	pop	{r0, r3}
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	6808      	ldr	r0, [r1, #0]
 80047e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e6:	f01e 0f10 	tst.w	lr, #16
 80047ea:	bf08      	it	eq
 80047ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047f0:	f380 8809 	msr	PSP, r0
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w

08004800 <pxCurrentTCBConst>:
 8004800:	24000128 	.word	0x24000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
        __asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
    }
 8004820:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004822:	f002 f875 	bl	8006910 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004826:	f7fe fe6d 	bl	8003504 <xTaskIncrementTick>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d006      	beq.n	800483e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004830:	f002 f8cc 	bl	80069cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <SysTick_Handler+0x50>)
 8004836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e001      	b.n	8004842 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800483e:	f002 f8a9 	bl	8006994 <SEGGER_SYSVIEW_RecordExitISR>
 8004842:	2300      	movs	r3, #0
 8004844:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f383 8811 	msr	BASEPRI, r3
    }
 800484c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	24000000 	.word	0x24000000
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
 80048b2:	0000      	.short	0x0000
 80048b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop

080048bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048c2:	f3ef 8305 	mrs	r3, IPSR
 80048c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d914      	bls.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <vPortValidateInterruptPriority+0x70>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <vPortValidateInterruptPriority+0x74>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	7afa      	ldrb	r2, [r7, #11]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20a      	bcs.n	80048f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
    }
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <vPortValidateInterruptPriority+0x78>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <vPortValidateInterruptPriority+0x7c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d90a      	bls.n	800491e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	603b      	str	r3, [r7, #0]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vPortValidateInterruptPriority+0x60>
    }
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e3f0 	.word	0xe000e3f0
 8004930:	24000664 	.word	0x24000664
 8004934:	e000ed0c 	.word	0xe000ed0c
 8004938:	24000668 	.word	0x24000668

0800493c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004948:	f7fe fcba 	bl	80032c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <pvPortMalloc+0x160>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004954:	f000 f908 	bl	8004b68 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d012      	beq.n	8004984 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800495e:	2208      	movs	r2, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	3308      	adds	r3, #8
 800496a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	43db      	mvns	r3, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d804      	bhi.n	8004980 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	4413      	add	r3, r2
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	e001      	b.n	8004984 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db70      	blt.n	8004a6c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d06d      	beq.n	8004a6c <pvPortMalloc+0x130>
 8004990:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <pvPortMalloc+0x164>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d868      	bhi.n	8004a6c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800499a:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <pvPortMalloc+0x168>)
 800499c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800499e:	4b41      	ldr	r3, [pc, #260]	; (8004aa4 <pvPortMalloc+0x168>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049a4:	e004      	b.n	80049b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d903      	bls.n	80049c2 <pvPortMalloc+0x86>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f1      	bne.n	80049a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <pvPortMalloc+0x160>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d04f      	beq.n	8004a6c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2208      	movs	r2, #8
 80049d2:	4413      	add	r3, r2
 80049d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	1ad2      	subs	r2, r2, r3
 80049e6:	2308      	movs	r3, #8
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d91f      	bls.n	8004a2e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <pvPortMalloc+0xda>
        __asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	613b      	str	r3, [r7, #16]
    }
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	1ad2      	subs	r2, r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f000 f8f9 	bl	8004c20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a3a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a3c:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <pvPortMalloc+0x16c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d203      	bcs.n	8004a50 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <pvPortMalloc+0x164>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <pvPortMalloc+0x16c>)
 8004a4e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <pvPortMalloc+0x170>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	4a10      	ldr	r2, [pc, #64]	; (8004aac <pvPortMalloc+0x170>)
 8004a6a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a6c:	f7fe fc36 	bl	80032dc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <pvPortMalloc+0x154>
        __asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60fb      	str	r3, [r7, #12]
    }
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <pvPortMalloc+0x152>
    return pvReturn;
 8004a90:	69fb      	ldr	r3, [r7, #28]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3728      	adds	r7, #40	; 0x28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	24013274 	.word	0x24013274
 8004aa0:	24013278 	.word	0x24013278
 8004aa4:	2401326c 	.word	0x2401326c
 8004aa8:	2401327c 	.word	0x2401327c
 8004aac:	24013280 	.word	0x24013280

08004ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d049      	beq.n	8004b56 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	db0a      	blt.n	8004aee <vPortFree+0x3e>
        __asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
    }
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <vPortFree+0x5c>
        __asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	60bb      	str	r3, [r7, #8]
    }
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0fdb      	lsrs	r3, r3, #31
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01c      	beq.n	8004b56 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d118      	bne.n	8004b56 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b30:	f7fe fbc6 	bl	80032c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <vPortFree+0xb0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <vPortFree+0xb0>)
 8004b40:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b42:	6938      	ldr	r0, [r7, #16]
 8004b44:	f000 f86c 	bl	8004c20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <vPortFree+0xb4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <vPortFree+0xb4>)
 8004b50:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b52:	f7fe fbc3 	bl	80032dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	24013278 	.word	0x24013278
 8004b64:	24013284 	.word	0x24013284

08004b68 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b6e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <prvHeapInit+0xa4>)
 8004b76:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3307      	adds	r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <prvHeapInit+0xa4>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <prvHeapInit+0xa8>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <prvHeapInit+0xa8>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0307 	bic.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <prvHeapInit+0xac>)
 8004bc8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <prvHeapInit+0xac>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <prvHeapInit+0xac>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <prvHeapInit+0xac>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <prvHeapInit+0xb0>)
 8004bf6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <prvHeapInit+0xb4>)
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	2400066c 	.word	0x2400066c
 8004c10:	2401326c 	.word	0x2401326c
 8004c14:	24013274 	.word	0x24013274
 8004c18:	2401327c 	.word	0x2401327c
 8004c1c:	24013278 	.word	0x24013278

08004c20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <prvInsertBlockIntoFreeList+0xac>)
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e002      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x14>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d8f7      	bhi.n	8004c2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d108      	bne.n	8004c62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	441a      	add	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d118      	bne.n	8004ca8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d00d      	beq.n	8004c9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e008      	b.n	8004cb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e003      	b.n	8004cb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d002      	beq.n	8004cbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	2401326c 	.word	0x2401326c
 8004cd0:	24013274 	.word	0x24013274

08004cd4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cd8:	4803      	ldr	r0, [pc, #12]	; (8004ce8 <_cbSendSystemDesc+0x14>)
 8004cda:	f001 fdc3 	bl	8006864 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cde:	4803      	ldr	r0, [pc, #12]	; (8004cec <_cbSendSystemDesc+0x18>)
 8004ce0:	f001 fdc0 	bl	8006864 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ce4:	bf00      	nop
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	0800788c 	.word	0x0800788c
 8004cec:	080078c8 	.word	0x080078c8

08004cf0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cfa:	6819      	ldr	r1, [r3, #0]
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <SEGGER_SYSVIEW_Conf+0x24>)
 8004cfe:	4a06      	ldr	r2, [pc, #24]	; (8004d18 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d00:	f001 f92e 	bl	8005f60 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d08:	f001 f96e 	bl	8005fe8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	24000000 	.word	0x24000000
 8004d14:	08004cd5 	.word	0x08004cd5
 8004d18:	08007954 	.word	0x08007954

08004d1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	e048      	b.n	8004dba <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8004d28:	4929      	ldr	r1, [pc, #164]	; (8004dd0 <_cbSendTaskList+0xb4>)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe ffb1 	bl	8003ca0 <uxTaskGetStackHighWaterMark>
 8004d3e:	4601      	mov	r1, r0
 8004d40:	4823      	ldr	r0, [pc, #140]	; (8004dd0 <_cbSendTaskList+0xb4>)
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4403      	add	r3, r0
 8004d4e:	3310      	adds	r3, #16
 8004d50:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d52:	491f      	ldr	r1, [pc, #124]	; (8004dd0 <_cbSendTaskList+0xb4>)
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	491b      	ldr	r1, [pc, #108]	; (8004dd0 <_cbSendTaskList+0xb4>)
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3304      	adds	r3, #4
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	4c16      	ldr	r4, [pc, #88]	; (8004dd0 <_cbSendTaskList+0xb4>)
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4423      	add	r3, r4
 8004d82:	3308      	adds	r3, #8
 8004d84:	681c      	ldr	r4, [r3, #0]
 8004d86:	4d12      	ldr	r5, [pc, #72]	; (8004dd0 <_cbSendTaskList+0xb4>)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	442b      	add	r3, r5
 8004d94:	330c      	adds	r3, #12
 8004d96:	681d      	ldr	r5, [r3, #0]
 8004d98:	4e0d      	ldr	r6, [pc, #52]	; (8004dd0 <_cbSendTaskList+0xb4>)
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4433      	add	r3, r6
 8004da6:	3310      	adds	r3, #16
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	462b      	mov	r3, r5
 8004dae:	4622      	mov	r2, r4
 8004db0:	f000 f8be 	bl	8004f30 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3301      	adds	r3, #1
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <_cbSendTaskList+0xb8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d3b1      	bcc.n	8004d28 <_cbSendTaskList+0xc>
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	24013288 	.word	0x24013288
 8004dd4:	24013328 	.word	0x24013328

08004dd8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004de0:	f7fe fb7e 	bl	80034e0 <xTaskGetTickCountFromISR>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2200      	movs	r2, #0
 8004de8:	469a      	mov	sl, r3
 8004dea:	4693      	mov	fp, r2
 8004dec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	f04f 0a00 	mov.w	sl, #0
 8004dfc:	f04f 0b00 	mov.w	fp, #0
 8004e00:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e04:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e08:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	465b      	mov	r3, fp
 8004e10:	1a14      	subs	r4, r2, r0
 8004e12:	eb63 0501 	sbc.w	r5, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	00ab      	lsls	r3, r5, #2
 8004e20:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e24:	00a2      	lsls	r2, r4, #2
 8004e26:	4614      	mov	r4, r2
 8004e28:	461d      	mov	r5, r3
 8004e2a:	eb14 0800 	adds.w	r8, r4, r0
 8004e2e:	eb45 0901 	adc.w	r9, r5, r1
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e46:	4690      	mov	r8, r2
 8004e48:	4699      	mov	r9, r3
 8004e4a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e60 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e6e:	2205      	movs	r2, #5
 8004e70:	492b      	ldr	r1, [pc, #172]	; (8004f20 <SYSVIEW_AddTask+0xc0>)
 8004e72:	68b8      	ldr	r0, [r7, #8]
 8004e74:	f002 f828 	bl	8006ec8 <memcmp>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04b      	beq.n	8004f16 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e7e:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b07      	cmp	r3, #7
 8004e84:	d903      	bls.n	8004e8e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e86:	4828      	ldr	r0, [pc, #160]	; (8004f28 <SYSVIEW_AddTask+0xc8>)
 8004e88:	f001 ff9e 	bl	8006dc8 <SEGGER_SYSVIEW_Warn>
    return;
 8004e8c:	e044      	b.n	8004f18 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e8e:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4926      	ldr	r1, [pc, #152]	; (8004f2c <SYSVIEW_AddTask+0xcc>)
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4921      	ldr	r1, [pc, #132]	; (8004f2c <SYSVIEW_AddTask+0xcc>)
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	491b      	ldr	r1, [pc, #108]	; (8004f2c <SYSVIEW_AddTask+0xcc>)
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3308      	adds	r3, #8
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4916      	ldr	r1, [pc, #88]	; (8004f2c <SYSVIEW_AddTask+0xcc>)
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	330c      	adds	r3, #12
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4910      	ldr	r1, [pc, #64]	; (8004f2c <SYSVIEW_AddTask+0xcc>)
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3310      	adds	r3, #16
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <SYSVIEW_AddTask+0xc4>)
 8004f02:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f80e 	bl	8004f30 <SYSVIEW_SendTaskInfo>
 8004f14:	e000      	b.n	8004f18 <SYSVIEW_AddTask+0xb8>
    return;
 8004f16:	bf00      	nop

}
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	080078d8 	.word	0x080078d8
 8004f24:	24013328 	.word	0x24013328
 8004f28:	080078e0 	.word	0x080078e0
 8004f2c:	24013288 	.word	0x24013288

08004f30 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f3e:	f107 0314 	add.w	r3, r7, #20
 8004f42:	2214      	movs	r2, #20
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 ffdc 	bl	8006f04 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f60:	f107 0314 	add.w	r3, r7, #20
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fb85 	bl	8006674 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f6a:	bf00      	nop
 8004f6c:	3728      	adds	r7, #40	; 0x28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f7a:	4b26      	ldr	r3, [pc, #152]	; (8005014 <_DoInit+0xa0>)
 8004f7c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004f7e:	22a8      	movs	r2, #168	; 0xa8
 8004f80:	2100      	movs	r1, #0
 8004f82:	6838      	ldr	r0, [r7, #0]
 8004f84:	f001 ffbe 	bl	8006f04 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2203      	movs	r2, #3
 8004f92:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4a20      	ldr	r2, [pc, #128]	; (8005018 <_DoInit+0xa4>)
 8004f98:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	4a1f      	ldr	r2, [pc, #124]	; (800501c <_DoInit+0xa8>)
 8004f9e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fa6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4a16      	ldr	r2, [pc, #88]	; (8005018 <_DoInit+0xa4>)
 8004fbe:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <_DoInit+0xac>)
 8004fc4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2210      	movs	r2, #16
 8004fca:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004fde:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	e00c      	b.n	8005002 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f1c3 030f 	rsb	r3, r3, #15
 8004fee:	4a0d      	ldr	r2, [pc, #52]	; (8005024 <_DoInit+0xb0>)
 8004ff0:	5cd1      	ldrb	r1, [r2, r3]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3301      	adds	r3, #1
 8005000:	607b      	str	r3, [r7, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b0f      	cmp	r3, #15
 8005006:	d9ef      	bls.n	8004fe8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005008:	f3bf 8f5f 	dmb	sy
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	2401332c 	.word	0x2401332c
 8005018:	08007930 	.word	0x08007930
 800501c:	240133d4 	.word	0x240133d4
 8005020:	240137d4 	.word	0x240137d4
 8005024:	0800795c 	.word	0x0800795c

08005028 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b08c      	sub	sp, #48	; 0x30
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005034:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <SEGGER_RTT_ReadNoLock+0x108>)
 8005036:	623b      	str	r3, [r7, #32]
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <SEGGER_RTT_ReadNoLock+0x1e>
 8005042:	f7ff ff97 	bl	8004f74 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	3360      	adds	r3, #96	; 0x60
 8005052:	4a37      	ldr	r2, [pc, #220]	; (8005130 <SEGGER_RTT_ReadNoLock+0x108>)
 8005054:	4413      	add	r3, r2
 8005056:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005068:	2300      	movs	r3, #0
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	429a      	cmp	r2, r3
 8005072:	d92b      	bls.n	80050cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4293      	cmp	r3, r2
 8005084:	bf28      	it	cs
 8005086:	4613      	movcs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	4413      	add	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	6939      	ldr	r1, [r7, #16]
 8005098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800509a:	f001 ff25 	bl	8006ee8 <memcpy>
    NumBytesRead += NumBytesRem;
 800509e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4413      	add	r3, r2
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d101      	bne.n	80050cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80050c8:	2300      	movs	r3, #0
 80050ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4293      	cmp	r3, r2
 80050da:	bf28      	it	cs
 80050dc:	4613      	movcs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d019      	beq.n	800511a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	4413      	add	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	6939      	ldr	r1, [r7, #16]
 80050f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050f6:	f001 fef7 	bl	8006ee8 <memcpy>
    NumBytesRead += NumBytesRem;
 80050fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005124:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005128:	4618      	mov	r0, r3
 800512a:	3730      	adds	r7, #48	; 0x30
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	2401332c 	.word	0x2401332c

08005134 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005142:	4b3d      	ldr	r3, [pc, #244]	; (8005238 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005150:	f7ff ff10 	bl	8004f74 <_DoInit>
  SEGGER_RTT_LOCK();
 8005154:	f3ef 8311 	mrs	r3, BASEPRI
 8005158:	f04f 0120 	mov.w	r1, #32
 800515c:	f381 8811 	msr	BASEPRI, r1
 8005160:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005162:	4b35      	ldr	r3, [pc, #212]	; (8005238 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005164:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800516a:	6939      	ldr	r1, [r7, #16]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	4613      	mov	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	440b      	add	r3, r1
 800517a:	3304      	adds	r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3301      	adds	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	429a      	cmp	r2, r3
 8005190:	dbeb      	blt.n	800516a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005192:	e000      	b.n	8005196 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005194:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	429a      	cmp	r2, r3
 800519e:	da3f      	bge.n	8005220 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051a0:	6939      	ldr	r1, [r7, #16]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	440b      	add	r3, r1
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80051b4:	6939      	ldr	r1, [r7, #16]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	440b      	add	r3, r1
 80051c4:	3304      	adds	r3, #4
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80051ca:	6939      	ldr	r1, [r7, #16]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	440b      	add	r3, r1
 80051d8:	3320      	adds	r3, #32
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80051de:	6939      	ldr	r1, [r7, #16]
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	3328      	adds	r3, #40	; 0x28
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	440b      	add	r3, r1
 8005200:	3324      	adds	r3, #36	; 0x24
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005206:	6939      	ldr	r1, [r7, #16]
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	4613      	mov	r3, r2
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	4413      	add	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	440b      	add	r3, r1
 8005214:	332c      	adds	r3, #44	; 0x2c
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800521a:	f3bf 8f5f 	dmb	sy
 800521e:	e002      	b.n	8005226 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800522c:	69fb      	ldr	r3, [r7, #28]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	2401332c 	.word	0x2401332c

0800523c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800524a:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005258:	f7ff fe8c 	bl	8004f74 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800525e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d82c      	bhi.n	80052c0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005266:	f3ef 8311 	mrs	r3, BASEPRI
 800526a:	f04f 0120 	mov.w	r1, #32
 800526e:	f381 8811 	msr	BASEPRI, r1
 8005272:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	3360      	adds	r3, #96	; 0x60
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00e      	beq.n	80052aa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2200      	movs	r2, #0
 80052a8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ae:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052b0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	e002      	b.n	80052c6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	; 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	2401332c 	.word	0x2401332c

080052d4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00f      	beq.n	800530a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80052ea:	e002      	b.n	80052f2 <_EncodeStr+0x1e>
      Len++;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3301      	adds	r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f6      	bne.n	80052ec <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	429a      	cmp	r2, r3
 8005304:	d901      	bls.n	800530a <_EncodeStr+0x36>
      Len = Limit;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2bfe      	cmp	r3, #254	; 0xfe
 800530e:	d806      	bhi.n	800531e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	60fa      	str	r2, [r7, #12]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	e011      	b.n	8005342 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	60fa      	str	r2, [r7, #12]
 8005324:	22ff      	movs	r2, #255	; 0xff
 8005326:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	60fa      	str	r2, [r7, #12]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	0a19      	lsrs	r1, r3, #8
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	60fa      	str	r2, [r7, #12]
 800533e:	b2ca      	uxtb	r2, r1
 8005340:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005346:	e00a      	b.n	800535e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	1c53      	adds	r3, r2, #1
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	60f9      	str	r1, [r7, #12]
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	701a      	strb	r2, [r3, #0]
    n++;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3301      	adds	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3f0      	bcc.n	8005348 <_EncodeStr+0x74>
  }
  return pPayload;
 8005366:	68fb      	ldr	r3, [r7, #12]
}
 8005368:	4618      	mov	r0, r3
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3307      	adds	r3, #7
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005392:	4b35      	ldr	r3, [pc, #212]	; (8005468 <_HandleIncomingPacket+0xdc>)
 8005394:	7e1b      	ldrb	r3, [r3, #24]
 8005396:	4618      	mov	r0, r3
 8005398:	1cfb      	adds	r3, r7, #3
 800539a:	2201      	movs	r2, #1
 800539c:	4619      	mov	r1, r3
 800539e:	f7ff fe43 	bl	8005028 <SEGGER_RTT_ReadNoLock>
 80053a2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d052      	beq.n	8005450 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d031      	beq.n	8005414 <_HandleIncomingPacket+0x88>
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	dc40      	bgt.n	8005436 <_HandleIncomingPacket+0xaa>
 80053b4:	2b07      	cmp	r3, #7
 80053b6:	dc15      	bgt.n	80053e4 <_HandleIncomingPacket+0x58>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dd3c      	ble.n	8005436 <_HandleIncomingPacket+0xaa>
 80053bc:	3b01      	subs	r3, #1
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d839      	bhi.n	8005436 <_HandleIncomingPacket+0xaa>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <_HandleIncomingPacket+0x3c>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053eb 	.word	0x080053eb
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053f7 	.word	0x080053f7
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	08005403 	.word	0x08005403
 80053dc:	08005409 	.word	0x08005409
 80053e0:	0800540f 	.word	0x0800540f
 80053e4:	2b7f      	cmp	r3, #127	; 0x7f
 80053e6:	d035      	beq.n	8005454 <_HandleIncomingPacket+0xc8>
 80053e8:	e025      	b.n	8005436 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053ea:	f000 ffc9 	bl	8006380 <SEGGER_SYSVIEW_Start>
      break;
 80053ee:	e036      	b.n	800545e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053f0:	f001 f880 	bl	80064f4 <SEGGER_SYSVIEW_Stop>
      break;
 80053f4:	e033      	b.n	800545e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053f6:	f001 fa59 	bl	80068ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053fa:	e030      	b.n	800545e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053fc:	f001 fa1e 	bl	800683c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005400:	e02d      	b.n	800545e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005402:	f001 f89d 	bl	8006540 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005406:	e02a      	b.n	800545e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005408:	f001 fc8c 	bl	8006d24 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800540c:	e027      	b.n	800545e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800540e:	f001 fc6b 	bl	8006ce8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005412:	e024      	b.n	800545e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <_HandleIncomingPacket+0xdc>)
 8005416:	7e1b      	ldrb	r3, [r3, #24]
 8005418:	4618      	mov	r0, r3
 800541a:	1cfb      	adds	r3, r7, #3
 800541c:	2201      	movs	r2, #1
 800541e:	4619      	mov	r1, r3
 8005420:	f7ff fe02 	bl	8005028 <SEGGER_RTT_ReadNoLock>
 8005424:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d015      	beq.n	8005458 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	4618      	mov	r0, r3
 8005430:	f001 fbda 	bl	8006be8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005434:	e010      	b.n	8005458 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	b25b      	sxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	da0e      	bge.n	800545c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <_HandleIncomingPacket+0xdc>)
 8005440:	7e1b      	ldrb	r3, [r3, #24]
 8005442:	4618      	mov	r0, r3
 8005444:	1cfb      	adds	r3, r7, #3
 8005446:	2201      	movs	r2, #1
 8005448:	4619      	mov	r1, r3
 800544a:	f7ff fded 	bl	8005028 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800544e:	e005      	b.n	800545c <_HandleIncomingPacket+0xd0>
    }
  }
 8005450:	bf00      	nop
 8005452:	e004      	b.n	800545e <_HandleIncomingPacket+0xd2>
      break;
 8005454:	bf00      	nop
 8005456:	e002      	b.n	800545e <_HandleIncomingPacket+0xd2>
      break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <_HandleIncomingPacket+0xd2>
      break;
 800545c:	bf00      	nop
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	240147ec 	.word	0x240147ec

0800546c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005472:	2301      	movs	r3, #1
 8005474:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	3301      	adds	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005480:	4b31      	ldr	r3, [pc, #196]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
 8005486:	e00b      	b.n	80054a0 <_TrySendOverflowPacket+0x34>
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	b2da      	uxtb	r2, r3
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	1c59      	adds	r1, r3, #1
 8005490:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	09db      	lsrs	r3, r3, #7
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	2b7f      	cmp	r3, #127	; 0x7f
 80054a4:	d8f0      	bhi.n	8005488 <_TrySendOverflowPacket+0x1c>
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054b6:	4b25      	ldr	r3, [pc, #148]	; (800554c <_TrySendOverflowPacket+0xe0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054bc:	4b22      	ldr	r3, [pc, #136]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	623b      	str	r3, [r7, #32]
 80054ce:	e00b      	b.n	80054e8 <_TrySendOverflowPacket+0x7c>
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	1c59      	adds	r1, r3, #1
 80054d8:	6279      	str	r1, [r7, #36]	; 0x24
 80054da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	09db      	lsrs	r3, r3, #7
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2b7f      	cmp	r3, #127	; 0x7f
 80054ec:	d8f0      	bhi.n	80054d0 <_TrySendOverflowPacket+0x64>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	627a      	str	r2, [r7, #36]	; 0x24
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	4618      	mov	r0, r3
 8005504:	1d3b      	adds	r3, r7, #4
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	461a      	mov	r2, r3
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	4619      	mov	r1, r3
 8005510:	f7fa feee 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005514:	4603      	mov	r3, r0
 8005516:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800551e:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005524:	4b08      	ldr	r3, [pc, #32]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	3b01      	subs	r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e004      	b.n	800553c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005532:	4b05      	ldr	r3, [pc, #20]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	3301      	adds	r3, #1
 8005538:	4a03      	ldr	r2, [pc, #12]	; (8005548 <_TrySendOverflowPacket+0xdc>)
 800553a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800553c:	693b      	ldr	r3, [r7, #16]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3730      	adds	r7, #48	; 0x30
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	240147ec 	.word	0x240147ec
 800554c:	e0001004 	.word	0xe0001004

08005550 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800555c:	4b98      	ldr	r3, [pc, #608]	; (80057c0 <_SendPacket+0x270>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d010      	beq.n	8005586 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005564:	4b96      	ldr	r3, [pc, #600]	; (80057c0 <_SendPacket+0x270>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 812d 	beq.w	80057c8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800556e:	4b94      	ldr	r3, [pc, #592]	; (80057c0 <_SendPacket+0x270>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d109      	bne.n	800558a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005576:	f7ff ff79 	bl	800546c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800557a:	4b91      	ldr	r3, [pc, #580]	; (80057c0 <_SendPacket+0x270>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	f040 8124 	bne.w	80057cc <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005584:	e001      	b.n	800558a <_SendPacket+0x3a>
    goto Send;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <_SendPacket+0x3c>
Send:
 800558a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b1f      	cmp	r3, #31
 8005590:	d809      	bhi.n	80055a6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005592:	4b8b      	ldr	r3, [pc, #556]	; (80057c0 <_SendPacket+0x270>)
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 8115 	bne.w	80057d0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b17      	cmp	r3, #23
 80055aa:	d807      	bhi.n	80055bc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e0c4      	b.n	8005746 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b7f      	cmp	r3, #127	; 0x7f
 80055c8:	d912      	bls.n	80055f0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	09da      	lsrs	r2, r3, #7
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	3a01      	subs	r2, #1
 80055e2:	60fa      	str	r2, [r7, #12]
 80055e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	e006      	b.n	80055fe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b7e      	cmp	r3, #126	; 0x7e
 8005602:	d807      	bhi.n	8005614 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e098      	b.n	8005746 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800561a:	d212      	bcs.n	8005642 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	09da      	lsrs	r2, r3, #7
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	3a01      	subs	r2, #1
 8005634:	60fa      	str	r2, [r7, #12]
 8005636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563a:	b2da      	uxtb	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	e081      	b.n	8005746 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005648:	d21d      	bcs.n	8005686 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	0b9a      	lsrs	r2, r3, #14
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3b01      	subs	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	09db      	lsrs	r3, r3, #7
 800565e:	b2db      	uxtb	r3, r3
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	3a01      	subs	r2, #1
 8005664:	60fa      	str	r2, [r7, #12]
 8005666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	3a01      	subs	r2, #1
 8005678:	60fa      	str	r2, [r7, #12]
 800567a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e05f      	b.n	8005746 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800568c:	d228      	bcs.n	80056e0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0d5a      	lsrs	r2, r3, #21
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b01      	subs	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0b9b      	lsrs	r3, r3, #14
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	3a01      	subs	r2, #1
 80056a8:	60fa      	str	r2, [r7, #12]
 80056aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	09db      	lsrs	r3, r3, #7
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	3a01      	subs	r2, #1
 80056be:	60fa      	str	r2, [r7, #12]
 80056c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	3a01      	subs	r2, #1
 80056d2:	60fa      	str	r2, [r7, #12]
 80056d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e032      	b.n	8005746 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0f1a      	lsrs	r2, r3, #28
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0d5b      	lsrs	r3, r3, #21
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	3a01      	subs	r2, #1
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0b9b      	lsrs	r3, r3, #14
 800570a:	b2db      	uxtb	r3, r3
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	3a01      	subs	r2, #1
 8005710:	60fa      	str	r2, [r7, #12]
 8005712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	09db      	lsrs	r3, r3, #7
 8005720:	b2db      	uxtb	r3, r3
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	3a01      	subs	r2, #1
 8005726:	60fa      	str	r2, [r7, #12]
 8005728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	3a01      	subs	r2, #1
 800573a:	60fa      	str	r2, [r7, #12]
 800573c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005746:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <_SendPacket+0x274>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800574c:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <_SendPacket+0x270>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	e00b      	b.n	8005778 <_SendPacket+0x228>
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	6279      	str	r1, [r7, #36]	; 0x24
 800576a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	09db      	lsrs	r3, r3, #7
 8005776:	623b      	str	r3, [r7, #32]
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2b7f      	cmp	r3, #127	; 0x7f
 800577c:	d8f0      	bhi.n	8005760 <_SendPacket+0x210>
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	627a      	str	r2, [r7, #36]	; 0x24
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <_SendPacket+0x270>)
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	4618      	mov	r0, r3
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	461a      	mov	r2, r3
 800579c:	68f9      	ldr	r1, [r7, #12]
 800579e:	f7fa fda7 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057a2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057aa:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <_SendPacket+0x270>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	60d3      	str	r3, [r2, #12]
 80057b0:	e00f      	b.n	80057d2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80057b2:	4b03      	ldr	r3, [pc, #12]	; (80057c0 <_SendPacket+0x270>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <_SendPacket+0x270>)
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e008      	b.n	80057d2 <_SendPacket+0x282>
 80057c0:	240147ec 	.word	0x240147ec
 80057c4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80057c8:	bf00      	nop
 80057ca:	e002      	b.n	80057d2 <_SendPacket+0x282>
      goto SendDone;
 80057cc:	bf00      	nop
 80057ce:	e000      	b.n	80057d2 <_SendPacket+0x282>
      goto SendDone;
 80057d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <_SendPacket+0x2d4>)
 80057d4:	7e1b      	ldrb	r3, [r3, #24]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <_SendPacket+0x2d8>)
 80057da:	460b      	mov	r3, r1
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	440b      	add	r3, r1
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	336c      	adds	r3, #108	; 0x6c
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b0e      	ldr	r3, [pc, #56]	; (8005824 <_SendPacket+0x2d4>)
 80057ea:	7e1b      	ldrb	r3, [r3, #24]
 80057ec:	4618      	mov	r0, r3
 80057ee:	490e      	ldr	r1, [pc, #56]	; (8005828 <_SendPacket+0x2d8>)
 80057f0:	4603      	mov	r3, r0
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4403      	add	r3, r0
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	440b      	add	r3, r1
 80057fa:	3370      	adds	r3, #112	; 0x70
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d00b      	beq.n	800581a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <_SendPacket+0x2d4>)
 8005804:	789b      	ldrb	r3, [r3, #2]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d107      	bne.n	800581a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <_SendPacket+0x2d4>)
 800580c:	2201      	movs	r2, #1
 800580e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005810:	f7ff fdbc 	bl	800538c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005814:	4b03      	ldr	r3, [pc, #12]	; (8005824 <_SendPacket+0x2d4>)
 8005816:	2200      	movs	r2, #0
 8005818:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800581a:	bf00      	nop
 800581c:	3728      	adds	r7, #40	; 0x28
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	240147ec 	.word	0x240147ec
 8005828:	2401332c 	.word	0x2401332c

0800582c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	3301      	adds	r3, #1
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d80a      	bhi.n	800585c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6051      	str	r1, [r2, #4]
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	d15a      	bne.n	800591a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	623b      	str	r3, [r7, #32]
 8005884:	e00b      	b.n	800589e <_StoreChar+0x72>
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	1c59      	adds	r1, r3, #1
 800588e:	6279      	str	r1, [r7, #36]	; 0x24
 8005890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	09db      	lsrs	r3, r3, #7
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b7f      	cmp	r3, #127	; 0x7f
 80058a2:	d8f0      	bhi.n	8005886 <_StoreChar+0x5a>
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	627a      	str	r2, [r7, #36]	; 0x24
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e00b      	b.n	80058d6 <_StoreChar+0xaa>
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	1c59      	adds	r1, r3, #1
 80058c6:	61f9      	str	r1, [r7, #28]
 80058c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	09db      	lsrs	r3, r3, #7
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b7f      	cmp	r3, #127	; 0x7f
 80058da:	d8f0      	bhi.n	80058be <_StoreChar+0x92>
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	61fa      	str	r2, [r7, #28]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	221a      	movs	r2, #26
 80058f2:	6939      	ldr	r1, [r7, #16]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fe2b 	bl	8005550 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fd38 	bl	8005374 <_PreparePacket>
 8005904:	4602      	mov	r2, r0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	611a      	str	r2, [r3, #16]
  }
}
 800591a:	bf00      	nop
 800591c:	3728      	adds	r7, #40	; 0x28
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005936:	2301      	movs	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800593a:	2301      	movs	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800593e:	e007      	b.n	8005950 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	623b      	str	r3, [r7, #32]
    Width++;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	3301      	adds	r3, #1
 800594e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d2f3      	bcs.n	8005940 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	429a      	cmp	r2, r3
 800595e:	d901      	bls.n	8005964 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11f      	bne.n	80059ae <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01c      	beq.n	80059ae <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <_PrintUnsigned+0x66>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <_PrintUnsigned+0x66>
        c = '0';
 8005984:	2330      	movs	r3, #48	; 0x30
 8005986:	76fb      	strb	r3, [r7, #27]
 8005988:	e001      	b.n	800598e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800598a:	2320      	movs	r3, #32
 800598c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800598e:	e007      	b.n	80059a0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	3b01      	subs	r3, #1
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005996:	7efb      	ldrb	r3, [r7, #27]
 8005998:	4619      	mov	r1, r3
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff ff46 	bl	800582c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <_PrintUnsigned+0x8a>
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d3f0      	bcc.n	8005990 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d903      	bls.n	80059bc <_PrintUnsigned+0x98>
      NumDigits--;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	e009      	b.n	80059d0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d200      	bcs.n	80059d0 <_PrintUnsigned+0xac>
        break;
 80059ce:	e005      	b.n	80059dc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	fb02 f303 	mul.w	r3, r2, r3
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059da:	e7e8      	b.n	80059ae <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059f4:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <_PrintUnsigned+0x128>)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	4413      	add	r3, r2
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4619      	mov	r1, r3
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff ff14 	bl	800582c <_StoreChar>
    Digit /= Base;
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e3      	bne.n	80059dc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a24:	e006      	b.n	8005a34 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a2c:	2120      	movs	r1, #32
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fefc 	bl	800582c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <_PrintUnsigned+0x11e>
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d3f1      	bcc.n	8005a26 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005a42:	bf00      	nop
 8005a44:	3728      	adds	r7, #40	; 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	0800797c 	.word	0x0800797c

08005a50 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bfb8      	it	lt
 8005a64:	425b      	neglt	r3, r3
 8005a66:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a6c:	e007      	b.n	8005a7e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a76:	613b      	str	r3, [r7, #16]
    Width++;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	daf3      	bge.n	8005a6e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d901      	bls.n	8005a92 <_PrintInt+0x42>
    Width = NumDigits;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <_PrintInt+0x5e>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db04      	blt.n	8005aa8 <_PrintInt+0x58>
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <_PrintInt+0x5e>
    FieldWidth--;
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <_PrintInt+0x6e>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <_PrintInt+0x9c>
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d111      	bne.n	8005aec <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00e      	beq.n	8005aec <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ace:	e006      	b.n	8005ade <_PrintInt+0x8e>
        FieldWidth--;
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fea7 	bl	800582c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <_PrintInt+0x9c>
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d3f1      	bcc.n	8005ad0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da07      	bge.n	8005b02 <_PrintInt+0xb2>
    v = -v;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	425b      	negs	r3, r3
 8005af6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005af8:	212d      	movs	r1, #45	; 0x2d
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fe96 	bl	800582c <_StoreChar>
 8005b00:	e008      	b.n	8005b14 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b0c:	212b      	movs	r1, #43	; 0x2b
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fe8c 	bl	800582c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d019      	beq.n	8005b52 <_PrintInt+0x102>
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d114      	bne.n	8005b52 <_PrintInt+0x102>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d111      	bne.n	8005b52 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b34:	e006      	b.n	8005b44 <_PrintInt+0xf4>
        FieldWidth--;
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b3c:	2130      	movs	r1, #48	; 0x30
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff fe74 	bl	800582c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <_PrintInt+0x102>
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d3f1      	bcc.n	8005b36 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff fedf 	bl	8005924 <_PrintUnsigned>
}
 8005b66:	bf00      	nop
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b098      	sub	sp, #96	; 0x60
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b80:	f04f 0120 	mov.w	r1, #32
 8005b84:	f381 8811 	msr	BASEPRI, r1
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8a:	48b7      	ldr	r0, [pc, #732]	; (8005e68 <_VPrintTarget+0x2f8>)
 8005b8c:	f7ff fbf2 	bl	8005374 <_PreparePacket>
 8005b90:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b92:	4bb5      	ldr	r3, [pc, #724]	; (8005e68 <_VPrintTarget+0x2f8>)
 8005b94:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b96:	2300      	movs	r3, #0
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8183 	beq.w	8005ec6 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005bc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bc4:	2b25      	cmp	r3, #37	; 0x25
 8005bc6:	f040 8170 	bne.w	8005eaa <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005bda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bde:	3b23      	subs	r3, #35	; 0x23
 8005be0:	2b0d      	cmp	r3, #13
 8005be2:	d83f      	bhi.n	8005c64 <_VPrintTarget+0xf4>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <_VPrintTarget+0x7c>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c55 	.word	0x08005c55
 8005bf0:	08005c65 	.word	0x08005c65
 8005bf4:	08005c65 	.word	0x08005c65
 8005bf8:	08005c65 	.word	0x08005c65
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005c65 	.word	0x08005c65
 8005c08:	08005c65 	.word	0x08005c65
 8005c0c:	08005c45 	.word	0x08005c45
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c65 	.word	0x08005c65
 8005c20:	08005c35 	.word	0x08005c35
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e01a      	b.n	8005c6a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	f043 0302 	orr.w	r3, r3, #2
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e012      	b.n	8005c6a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	f043 0304 	orr.w	r3, r3, #4
 8005c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e00a      	b.n	8005c6a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c56:	f043 0308 	orr.w	r3, r3, #8
 8005c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	e002      	b.n	8005c6a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c64:	2300      	movs	r3, #0
 8005c66:	653b      	str	r3, [r7, #80]	; 0x50
 8005c68:	bf00      	nop
        }
      } while (v);
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1b0      	bne.n	8005bd2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c70:	2300      	movs	r3, #0
 8005c72:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c80:	2b2f      	cmp	r3, #47	; 0x2f
 8005c82:	d912      	bls.n	8005caa <_VPrintTarget+0x13a>
 8005c84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c88:	2b39      	cmp	r3, #57	; 0x39
 8005c8a:	d80e      	bhi.n	8005caa <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3b30      	subs	r3, #48	; 0x30
 8005ca6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005ca8:	e7e4      	b.n	8005c74 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005caa:	2300      	movs	r3, #0
 8005cac:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005cb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cba:	2b2e      	cmp	r3, #46	; 0x2e
 8005cbc:	d11d      	bne.n	8005cfa <_VPrintTarget+0x18a>
        sFormat++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd0:	2b2f      	cmp	r3, #47	; 0x2f
 8005cd2:	d912      	bls.n	8005cfa <_VPrintTarget+0x18a>
 8005cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd8:	2b39      	cmp	r3, #57	; 0x39
 8005cda:	d80e      	bhi.n	8005cfa <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	461a      	mov	r2, r3
 8005cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3b30      	subs	r3, #48	; 0x30
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005cf8:	e7e4      	b.n	8005cc4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d06:	2b6c      	cmp	r3, #108	; 0x6c
 8005d08:	d003      	beq.n	8005d12 <_VPrintTarget+0x1a2>
 8005d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d0e:	2b68      	cmp	r3, #104	; 0x68
 8005d10:	d107      	bne.n	8005d22 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d20:	e7ef      	b.n	8005d02 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d26:	2b25      	cmp	r3, #37	; 0x25
 8005d28:	f000 80b3 	beq.w	8005e92 <_VPrintTarget+0x322>
 8005d2c:	2b25      	cmp	r3, #37	; 0x25
 8005d2e:	f2c0 80b7 	blt.w	8005ea0 <_VPrintTarget+0x330>
 8005d32:	2b78      	cmp	r3, #120	; 0x78
 8005d34:	f300 80b4 	bgt.w	8005ea0 <_VPrintTarget+0x330>
 8005d38:	2b58      	cmp	r3, #88	; 0x58
 8005d3a:	f2c0 80b1 	blt.w	8005ea0 <_VPrintTarget+0x330>
 8005d3e:	3b58      	subs	r3, #88	; 0x58
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	f200 80ad 	bhi.w	8005ea0 <_VPrintTarget+0x330>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <_VPrintTarget+0x1dc>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005e43 	.word	0x08005e43
 8005d50:	08005ea1 	.word	0x08005ea1
 8005d54:	08005ea1 	.word	0x08005ea1
 8005d58:	08005ea1 	.word	0x08005ea1
 8005d5c:	08005ea1 	.word	0x08005ea1
 8005d60:	08005ea1 	.word	0x08005ea1
 8005d64:	08005ea1 	.word	0x08005ea1
 8005d68:	08005ea1 	.word	0x08005ea1
 8005d6c:	08005ea1 	.word	0x08005ea1
 8005d70:	08005ea1 	.word	0x08005ea1
 8005d74:	08005ea1 	.word	0x08005ea1
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005df7 	.word	0x08005df7
 8005d80:	08005ea1 	.word	0x08005ea1
 8005d84:	08005ea1 	.word	0x08005ea1
 8005d88:	08005ea1 	.word	0x08005ea1
 8005d8c:	08005ea1 	.word	0x08005ea1
 8005d90:	08005ea1 	.word	0x08005ea1
 8005d94:	08005ea1 	.word	0x08005ea1
 8005d98:	08005ea1 	.word	0x08005ea1
 8005d9c:	08005ea1 	.word	0x08005ea1
 8005da0:	08005ea1 	.word	0x08005ea1
 8005da4:	08005ea1 	.word	0x08005ea1
 8005da8:	08005ea1 	.word	0x08005ea1
 8005dac:	08005e6d 	.word	0x08005e6d
 8005db0:	08005ea1 	.word	0x08005ea1
 8005db4:	08005ea1 	.word	0x08005ea1
 8005db8:	08005ea1 	.word	0x08005ea1
 8005dbc:	08005ea1 	.word	0x08005ea1
 8005dc0:	08005e1d 	.word	0x08005e1d
 8005dc4:	08005ea1 	.word	0x08005ea1
 8005dc8:	08005ea1 	.word	0x08005ea1
 8005dcc:	08005e43 	.word	0x08005e43
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005de4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fd1c 	bl	800582c <_StoreChar>
        break;
 8005df4:	e055      	b.n	8005ea2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6011      	str	r1, [r2, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e04:	f107 0014 	add.w	r0, r7, #20
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e12:	220a      	movs	r2, #10
 8005e14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e16:	f7ff fe1b 	bl	8005a50 <_PrintInt>
        break;
 8005e1a:	e042      	b.n	8005ea2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	1d19      	adds	r1, r3, #4
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e2c:	f107 0014 	add.w	r0, r7, #20
 8005e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3a:	220a      	movs	r2, #10
 8005e3c:	f7ff fd72 	bl	8005924 <_PrintUnsigned>
        break;
 8005e40:	e02f      	b.n	8005ea2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1d19      	adds	r1, r3, #4
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6011      	str	r1, [r2, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e52:	f107 0014 	add.w	r0, r7, #20
 8005e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e60:	2210      	movs	r2, #16
 8005e62:	f7ff fd5f 	bl	8005924 <_PrintUnsigned>
        break;
 8005e66:	e01c      	b.n	8005ea2 <_VPrintTarget+0x332>
 8005e68:	2401481c 	.word	0x2401481c
      case 'p':
        v = va_arg(*pParamList, int);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	1d19      	adds	r1, r3, #4
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e7c:	f107 0014 	add.w	r0, r7, #20
 8005e80:	2300      	movs	r3, #0
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	2308      	movs	r3, #8
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2308      	movs	r3, #8
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	f7ff fd4a 	bl	8005924 <_PrintUnsigned>
        break;
 8005e90:	e007      	b.n	8005ea2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	2125      	movs	r1, #37	; 0x25
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fcc7 	bl	800582c <_StoreChar>
        break;
 8005e9e:	e000      	b.n	8005ea2 <_VPrintTarget+0x332>
      default:
        break;
 8005ea0:	bf00      	nop
      }
      sFormat++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e007      	b.n	8005eba <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005eaa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005eae:	f107 0314 	add.w	r3, r7, #20
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fcb9 	bl	800582c <_StoreChar>
    }
  } while (*sFormat);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f47f ae72 	bne.w	8005ba8 <_VPrintTarget+0x38>
 8005ec4:	e000      	b.n	8005ec8 <_VPrintTarget+0x358>
      break;
 8005ec6:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d041      	beq.n	8005f52 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ede:	e00b      	b.n	8005ef8 <_VPrintTarget+0x388>
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	6439      	str	r1, [r7, #64]	; 0x40
 8005eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	09db      	lsrs	r3, r3, #7
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efa:	2b7f      	cmp	r3, #127	; 0x7f
 8005efc:	d8f0      	bhi.n	8005ee0 <_VPrintTarget+0x370>
 8005efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	643a      	str	r2, [r7, #64]	; 0x40
 8005f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	e00b      	b.n	8005f30 <_VPrintTarget+0x3c0>
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	1c59      	adds	r1, r3, #1
 8005f20:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	09db      	lsrs	r3, r3, #7
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f32:	2b7f      	cmp	r3, #127	; 0x7f
 8005f34:	d8f0      	bhi.n	8005f18 <_VPrintTarget+0x3a8>
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	69b9      	ldr	r1, [r7, #24]
 8005f4a:	221a      	movs	r2, #26
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff faff 	bl	8005550 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f58:	bf00      	nop
 8005f5a:	3758      	adds	r7, #88	; 0x58
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f74:	4917      	ldr	r1, [pc, #92]	; (8005fd4 <SEGGER_SYSVIEW_Init+0x74>)
 8005f76:	4818      	ldr	r0, [pc, #96]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x78>)
 8005f78:	f7ff f8dc 	bl	8005134 <SEGGER_RTT_AllocUpBuffer>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b16      	ldr	r3, [pc, #88]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f82:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f86:	785a      	ldrb	r2, [r3, #1]
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f8c:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8e:	7e1b      	ldrb	r3, [r3, #24]
 8005f90:	4618      	mov	r0, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2308      	movs	r3, #8
 8005f98:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <SEGGER_SYSVIEW_Init+0x80>)
 8005f9a:	490f      	ldr	r1, [pc, #60]	; (8005fd8 <SEGGER_SYSVIEW_Init+0x78>)
 8005f9c:	f7ff f94e 	bl	800523c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005fa0:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <SEGGER_SYSVIEW_Init+0x84>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005fae:	4a0b      	ldr	r2, [pc, #44]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005fb4:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005fc0:	4a06      	ldr	r2, [pc, #24]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	240137e4 	.word	0x240137e4
 8005fd8:	0800793c 	.word	0x0800793c
 8005fdc:	240147ec 	.word	0x240147ec
 8005fe0:	240147e4 	.word	0x240147e4
 8005fe4:	e0001004 	.word	0xe0001004

08005fe8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6113      	str	r3, [r2, #16]
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	240147ec 	.word	0x240147ec

08006008 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006010:	f3ef 8311 	mrs	r3, BASEPRI
 8006014:	f04f 0120 	mov.w	r1, #32
 8006018:	f381 8811 	msr	BASEPRI, r1
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	4808      	ldr	r0, [pc, #32]	; (8006040 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006020:	f7ff f9a8 	bl	8005374 <_PreparePacket>
 8006024:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	68b8      	ldr	r0, [r7, #8]
 800602c:	f7ff fa90 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f383 8811 	msr	BASEPRI, r3
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	2401481c 	.word	0x2401481c

08006044 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800604e:	f3ef 8311 	mrs	r3, BASEPRI
 8006052:	f04f 0120 	mov.w	r1, #32
 8006056:	f381 8811 	msr	BASEPRI, r1
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	4816      	ldr	r0, [pc, #88]	; (80060b8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800605e:	f7ff f989 	bl	8005374 <_PreparePacket>
 8006062:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e00b      	b.n	800608a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	1c59      	adds	r1, r3, #1
 800607a:	61f9      	str	r1, [r7, #28]
 800607c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b7f      	cmp	r3, #127	; 0x7f
 800608e:	d8f0      	bhi.n	8006072 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	61fa      	str	r2, [r7, #28]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	6938      	ldr	r0, [r7, #16]
 80060a6:	f7ff fa53 	bl	8005550 <_SendPacket>
  RECORD_END();
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f383 8811 	msr	BASEPRI, r3
}
 80060b0:	bf00      	nop
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	2401481c 	.word	0x2401481c

080060bc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	; 0x30
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060c8:	f3ef 8311 	mrs	r3, BASEPRI
 80060cc:	f04f 0120 	mov.w	r1, #32
 80060d0:	f381 8811 	msr	BASEPRI, r1
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	4825      	ldr	r0, [pc, #148]	; (800616c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80060d8:	f7ff f94c 	bl	8005374 <_PreparePacket>
 80060dc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ea:	e00b      	b.n	8006104 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	09db      	lsrs	r3, r3, #7
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	2b7f      	cmp	r3, #127	; 0x7f
 8006108:	d8f0      	bhi.n	80060ec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	e00b      	b.n	800613c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	6279      	str	r1, [r7, #36]	; 0x24
 800612e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	09db      	lsrs	r3, r3, #7
 800613a:	623b      	str	r3, [r7, #32]
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2b7f      	cmp	r3, #127	; 0x7f
 8006140:	d8f0      	bhi.n	8006124 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	627a      	str	r2, [r7, #36]	; 0x24
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	6979      	ldr	r1, [r7, #20]
 8006156:	69b8      	ldr	r0, [r7, #24]
 8006158:	f7ff f9fa 	bl	8005550 <_SendPacket>
  RECORD_END();
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f383 8811 	msr	BASEPRI, r3
}
 8006162:	bf00      	nop
 8006164:	3730      	adds	r7, #48	; 0x30
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	2401481c 	.word	0x2401481c

08006170 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800617e:	f3ef 8311 	mrs	r3, BASEPRI
 8006182:	f04f 0120 	mov.w	r1, #32
 8006186:	f381 8811 	msr	BASEPRI, r1
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	4832      	ldr	r0, [pc, #200]	; (8006258 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800618e:	f7ff f8f1 	bl	8005374 <_PreparePacket>
 8006192:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	633b      	str	r3, [r7, #48]	; 0x30
 80061a0:	e00b      	b.n	80061ba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	6379      	str	r1, [r7, #52]	; 0x34
 80061ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	09db      	lsrs	r3, r3, #7
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2b7f      	cmp	r3, #127	; 0x7f
 80061be:	d8f0      	bhi.n	80061a2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80061c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	637a      	str	r2, [r7, #52]	; 0x34
 80061c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d8:	e00b      	b.n	80061f2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	09db      	lsrs	r3, r3, #7
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	2b7f      	cmp	r3, #127	; 0x7f
 80061f6:	d8f0      	bhi.n	80061da <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	623b      	str	r3, [r7, #32]
 8006210:	e00b      	b.n	800622a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1c59      	adds	r1, r3, #1
 800621a:	6279      	str	r1, [r7, #36]	; 0x24
 800621c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	09db      	lsrs	r3, r3, #7
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	2b7f      	cmp	r3, #127	; 0x7f
 800622e:	d8f0      	bhi.n	8006212 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	627a      	str	r2, [r7, #36]	; 0x24
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	6979      	ldr	r1, [r7, #20]
 8006244:	69b8      	ldr	r0, [r7, #24]
 8006246:	f7ff f983 	bl	8005550 <_SendPacket>
  RECORD_END();
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f383 8811 	msr	BASEPRI, r3
}
 8006250:	bf00      	nop
 8006252:	3738      	adds	r7, #56	; 0x38
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	2401481c 	.word	0x2401481c

0800625c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b090      	sub	sp, #64	; 0x40
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800626a:	f3ef 8311 	mrs	r3, BASEPRI
 800626e:	f04f 0120 	mov.w	r1, #32
 8006272:	f381 8811 	msr	BASEPRI, r1
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	4840      	ldr	r0, [pc, #256]	; (800637c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800627a:	f7ff f87b 	bl	8005374 <_PreparePacket>
 800627e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30
 80062c4:	e00b      	b.n	80062de <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062cc:	1c59      	adds	r1, r3, #1
 80062ce:	6379      	str	r1, [r7, #52]	; 0x34
 80062d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	09db      	lsrs	r3, r3, #7
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2b7f      	cmp	r3, #127	; 0x7f
 80062e2:	d8f0      	bhi.n	80062c6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	637a      	str	r2, [r7, #52]	; 0x34
 80062ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fc:	e00b      	b.n	8006316 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	b2da      	uxtb	r2, r3
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	09db      	lsrs	r3, r3, #7
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b7f      	cmp	r3, #127	; 0x7f
 800631a:	d8f0      	bhi.n	80062fe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
 8006330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	e00b      	b.n	800634e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	6279      	str	r1, [r7, #36]	; 0x24
 8006340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	09db      	lsrs	r3, r3, #7
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	2b7f      	cmp	r3, #127	; 0x7f
 8006352:	d8f0      	bhi.n	8006336 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	627a      	str	r2, [r7, #36]	; 0x24
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	69b8      	ldr	r0, [r7, #24]
 800636a:	f7ff f8f1 	bl	8005550 <_SendPacket>
  RECORD_END();
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f383 8811 	msr	BASEPRI, r3
}
 8006374:	bf00      	nop
 8006376:	3740      	adds	r7, #64	; 0x40
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2401481c 	.word	0x2401481c

08006380 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b08c      	sub	sp, #48	; 0x30
 8006384:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006386:	4b58      	ldr	r3, [pc, #352]	; (80064e8 <SEGGER_SYSVIEW_Start+0x168>)
 8006388:	2201      	movs	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800638c:	f3ef 8311 	mrs	r3, BASEPRI
 8006390:	f04f 0120 	mov.w	r1, #32
 8006394:	f381 8811 	msr	BASEPRI, r1
 8006398:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800639a:	4b53      	ldr	r3, [pc, #332]	; (80064e8 <SEGGER_SYSVIEW_Start+0x168>)
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	220a      	movs	r2, #10
 80063a0:	4952      	ldr	r1, [pc, #328]	; (80064ec <SEGGER_SYSVIEW_Start+0x16c>)
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7f9 ffa4 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80063ae:	200a      	movs	r0, #10
 80063b0:	f7ff fe2a 	bl	8006008 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063b4:	f3ef 8311 	mrs	r3, BASEPRI
 80063b8:	f04f 0120 	mov.w	r1, #32
 80063bc:	f381 8811 	msr	BASEPRI, r1
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	484b      	ldr	r0, [pc, #300]	; (80064f0 <SEGGER_SYSVIEW_Start+0x170>)
 80063c4:	f7fe ffd6 	bl	8005374 <_PreparePacket>
 80063c8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d2:	4b45      	ldr	r3, [pc, #276]	; (80064e8 <SEGGER_SYSVIEW_Start+0x168>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d8:	e00b      	b.n	80063f2 <SEGGER_SYSVIEW_Start+0x72>
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	1c59      	adds	r1, r3, #1
 80063e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	09db      	lsrs	r3, r3, #7
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	2b7f      	cmp	r3, #127	; 0x7f
 80063f6:	d8f0      	bhi.n	80063da <SEGGER_SYSVIEW_Start+0x5a>
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
 800640c:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <SEGGER_SYSVIEW_Start+0x168>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	623b      	str	r3, [r7, #32]
 8006412:	e00b      	b.n	800642c <SEGGER_SYSVIEW_Start+0xac>
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	6279      	str	r1, [r7, #36]	; 0x24
 800641e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2b7f      	cmp	r3, #127	; 0x7f
 8006430:	d8f0      	bhi.n	8006414 <SEGGER_SYSVIEW_Start+0x94>
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	627a      	str	r2, [r7, #36]	; 0x24
 8006438:	6a3a      	ldr	r2, [r7, #32]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <SEGGER_SYSVIEW_Start+0x168>)
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e00b      	b.n	8006466 <SEGGER_SYSVIEW_Start+0xe6>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	61f9      	str	r1, [r7, #28]
 8006458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b7f      	cmp	r3, #127	; 0x7f
 800646a:	d8f0      	bhi.n	800644e <SEGGER_SYSVIEW_Start+0xce>
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	e00b      	b.n	800649e <SEGGER_SYSVIEW_Start+0x11e>
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	1c59      	adds	r1, r3, #1
 800648e:	6179      	str	r1, [r7, #20]
 8006490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	09db      	lsrs	r3, r3, #7
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b7f      	cmp	r3, #127	; 0x7f
 80064a2:	d8f0      	bhi.n	8006486 <SEGGER_SYSVIEW_Start+0x106>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	617a      	str	r2, [r7, #20]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064b4:	2218      	movs	r2, #24
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff f849 	bl	8005550 <_SendPacket>
      RECORD_END();
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064c4:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <SEGGER_SYSVIEW_Start+0x168>)
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <SEGGER_SYSVIEW_Start+0x168>)
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80064d2:	f000 f9eb 	bl	80068ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80064d6:	f000 f9b1 	bl	800683c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80064da:	f000 fc23 	bl	8006d24 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80064de:	bf00      	nop
 80064e0:	3730      	adds	r7, #48	; 0x30
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	240147ec 	.word	0x240147ec
 80064ec:	08007970 	.word	0x08007970
 80064f0:	2401481c 	.word	0x2401481c

080064f4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064fa:	f3ef 8311 	mrs	r3, BASEPRI
 80064fe:	f04f 0120 	mov.w	r1, #32
 8006502:	f381 8811 	msr	BASEPRI, r1
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	480b      	ldr	r0, [pc, #44]	; (8006538 <SEGGER_SYSVIEW_Stop+0x44>)
 800650a:	f7fe ff33 	bl	8005374 <_PreparePacket>
 800650e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <SEGGER_SYSVIEW_Stop+0x48>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006518:	220b      	movs	r2, #11
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6838      	ldr	r0, [r7, #0]
 800651e:	f7ff f817 	bl	8005550 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006522:	4b06      	ldr	r3, [pc, #24]	; (800653c <SEGGER_SYSVIEW_Stop+0x48>)
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2401481c 	.word	0x2401481c
 800653c:	240147ec 	.word	0x240147ec

08006540 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b08c      	sub	sp, #48	; 0x30
 8006544:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006546:	f3ef 8311 	mrs	r3, BASEPRI
 800654a:	f04f 0120 	mov.w	r1, #32
 800654e:	f381 8811 	msr	BASEPRI, r1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	4845      	ldr	r0, [pc, #276]	; (800666c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006556:	f7fe ff0d 	bl	8005374 <_PreparePacket>
 800655a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006564:	4b42      	ldr	r3, [pc, #264]	; (8006670 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
 800656a:	e00b      	b.n	8006584 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	2b7f      	cmp	r3, #127	; 0x7f
 8006588:	d8f0      	bhi.n	800656c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	623b      	str	r3, [r7, #32]
 80065a4:	e00b      	b.n	80065be <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	6279      	str	r1, [r7, #36]	; 0x24
 80065b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	09db      	lsrs	r3, r3, #7
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	2b7f      	cmp	r3, #127	; 0x7f
 80065c2:	d8f0      	bhi.n	80065a6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	627a      	str	r2, [r7, #36]	; 0x24
 80065ca:	6a3a      	ldr	r2, [r7, #32]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e00b      	b.n	80065f8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	61f9      	str	r1, [r7, #28]
 80065ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	09db      	lsrs	r3, r3, #7
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b7f      	cmp	r3, #127	; 0x7f
 80065fc:	d8f0      	bhi.n	80065e0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	61fa      	str	r2, [r7, #28]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e00b      	b.n	8006630 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	1c59      	adds	r1, r3, #1
 8006620:	6179      	str	r1, [r7, #20]
 8006622:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	09db      	lsrs	r3, r3, #7
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b7f      	cmp	r3, #127	; 0x7f
 8006634:	d8f0      	bhi.n	8006618 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	617a      	str	r2, [r7, #20]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006646:	2218      	movs	r2, #24
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	68b8      	ldr	r0, [r7, #8]
 800664c:	f7fe ff80 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	4798      	blx	r3
  }
}
 8006664:	bf00      	nop
 8006666:	3730      	adds	r7, #48	; 0x30
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	2401481c 	.word	0x2401481c
 8006670:	240147ec 	.word	0x240147ec

08006674 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b092      	sub	sp, #72	; 0x48
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800667c:	f3ef 8311 	mrs	r3, BASEPRI
 8006680:	f04f 0120 	mov.w	r1, #32
 8006684:	f381 8811 	msr	BASEPRI, r1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	486a      	ldr	r0, [pc, #424]	; (8006834 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800668c:	f7fe fe72 	bl	8005374 <_PreparePacket>
 8006690:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	647b      	str	r3, [r7, #68]	; 0x44
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b66      	ldr	r3, [pc, #408]	; (8006838 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	643b      	str	r3, [r7, #64]	; 0x40
 80066a6:	e00b      	b.n	80066c0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80066a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ae:	1c59      	adds	r1, r3, #1
 80066b0:	6479      	str	r1, [r7, #68]	; 0x44
 80066b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066bc:	09db      	lsrs	r3, r3, #7
 80066be:	643b      	str	r3, [r7, #64]	; 0x40
 80066c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c2:	2b7f      	cmp	r3, #127	; 0x7f
 80066c4:	d8f0      	bhi.n	80066a8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80066c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	647a      	str	r2, [r7, #68]	; 0x44
 80066cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	63bb      	str	r3, [r7, #56]	; 0x38
 80066e0:	e00b      	b.n	80066fa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b7f      	cmp	r3, #127	; 0x7f
 80066fe:	d8f0      	bhi.n	80066e2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	4619      	mov	r1, r3
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7fe fddb 	bl	80052d4 <_EncodeStr>
 800671e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006720:	2209      	movs	r2, #9
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	6938      	ldr	r0, [r7, #16]
 8006726:	f7fe ff13 	bl	8005550 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b40      	ldr	r3, [pc, #256]	; (8006838 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	633b      	str	r3, [r7, #48]	; 0x30
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	b2da      	uxtb	r2, r3
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6379      	str	r1, [r7, #52]	; 0x34
 800674a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	633b      	str	r3, [r7, #48]	; 0x30
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	2b7f      	cmp	r3, #127	; 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	637a      	str	r2, [r7, #52]	; 0x34
 8006764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
 8006778:	e00b      	b.n	8006792 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	b2da      	uxtb	r2, r3
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	1c59      	adds	r1, r3, #1
 8006782:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	09db      	lsrs	r3, r3, #7
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	2b7f      	cmp	r3, #127	; 0x7f
 8006796:	d8f0      	bhi.n	800677a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800679e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	e00b      	b.n	80067cc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	1c59      	adds	r1, r3, #1
 80067bc:	6279      	str	r1, [r7, #36]	; 0x24
 80067be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	09db      	lsrs	r3, r3, #7
 80067ca:	623b      	str	r3, [r7, #32]
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	2b7f      	cmp	r3, #127	; 0x7f
 80067d0:	d8f0      	bhi.n	80067b4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	627a      	str	r2, [r7, #36]	; 0x24
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	2300      	movs	r3, #0
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	e00b      	b.n	8006804 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	1c59      	adds	r1, r3, #1
 80067f4:	61f9      	str	r1, [r7, #28]
 80067f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	09db      	lsrs	r3, r3, #7
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b7f      	cmp	r3, #127	; 0x7f
 8006808:	d8f0      	bhi.n	80067ec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	61fa      	str	r2, [r7, #28]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800681a:	2215      	movs	r2, #21
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	6938      	ldr	r0, [r7, #16]
 8006820:	f7fe fe96 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f383 8811 	msr	BASEPRI, r3
}
 800682a:	bf00      	nop
 800682c:	3748      	adds	r7, #72	; 0x48
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	2401481c 	.word	0x2401481c
 8006838:	240147ec 	.word	0x240147ec

0800683c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006852:	4b03      	ldr	r3, [pc, #12]	; (8006860 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4798      	blx	r3
  }
}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	240147ec 	.word	0x240147ec

08006864 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800686c:	f3ef 8311 	mrs	r3, BASEPRI
 8006870:	f04f 0120 	mov.w	r1, #32
 8006874:	f381 8811 	msr	BASEPRI, r1
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	480b      	ldr	r0, [pc, #44]	; (80068a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800687c:	f7fe fd7a 	bl	8005374 <_PreparePacket>
 8006880:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006882:	2280      	movs	r2, #128	; 0x80
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	6938      	ldr	r0, [r7, #16]
 8006888:	f7fe fd24 	bl	80052d4 <_EncodeStr>
 800688c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800688e:	220e      	movs	r2, #14
 8006890:	68f9      	ldr	r1, [r7, #12]
 8006892:	6938      	ldr	r0, [r7, #16]
 8006894:	f7fe fe5c 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	2401481c 	.word	0x2401481c

080068ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01a      	beq.n	80068f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d015      	beq.n	80068f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80068c4:	4b10      	ldr	r3, [pc, #64]	; (8006908 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4798      	blx	r3
 80068cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80068d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	000a      	movs	r2, r1
 80068e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068e2:	4613      	mov	r3, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4621      	mov	r1, r4
 80068e8:	200d      	movs	r0, #13
 80068ea:	f7ff fbe7 	bl	80060bc <SEGGER_SYSVIEW_RecordU32x2>
 80068ee:	e006      	b.n	80068fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	200c      	movs	r0, #12
 80068f8:	f7ff fba4 	bl	8006044 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bd90      	pop	{r4, r7, pc}
 8006906:	bf00      	nop
 8006908:	240147ec 	.word	0x240147ec
 800690c:	e0001004 	.word	0xe0001004

08006910 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006916:	f3ef 8311 	mrs	r3, BASEPRI
 800691a:	f04f 0120 	mov.w	r1, #32
 800691e:	f381 8811 	msr	BASEPRI, r1
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	4819      	ldr	r0, [pc, #100]	; (800698c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006926:	f7fe fd25 	bl	8005374 <_PreparePacket>
 800692a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006938:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e00b      	b.n	800695c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	6179      	str	r1, [r7, #20]
 800694e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	09db      	lsrs	r3, r3, #7
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b7f      	cmp	r3, #127	; 0x7f
 8006960:	d8f0      	bhi.n	8006944 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	617a      	str	r2, [r7, #20]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006972:	2202      	movs	r2, #2
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	68b8      	ldr	r0, [r7, #8]
 8006978:	f7fe fdea 	bl	8005550 <_SendPacket>
  RECORD_END();
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f383 8811 	msr	BASEPRI, r3
}
 8006982:	bf00      	nop
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	2401481c 	.word	0x2401481c
 8006990:	e000ed04 	.word	0xe000ed04

08006994 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800699a:	f3ef 8311 	mrs	r3, BASEPRI
 800699e:	f04f 0120 	mov.w	r1, #32
 80069a2:	f381 8811 	msr	BASEPRI, r1
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	4807      	ldr	r0, [pc, #28]	; (80069c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80069aa:	f7fe fce3 	bl	8005374 <_PreparePacket>
 80069ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80069b0:	2203      	movs	r2, #3
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6838      	ldr	r0, [r7, #0]
 80069b6:	f7fe fdcb 	bl	8005550 <_SendPacket>
  RECORD_END();
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f383 8811 	msr	BASEPRI, r3
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	2401481c 	.word	0x2401481c

080069cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069d2:	f3ef 8311 	mrs	r3, BASEPRI
 80069d6:	f04f 0120 	mov.w	r1, #32
 80069da:	f381 8811 	msr	BASEPRI, r1
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	4807      	ldr	r0, [pc, #28]	; (8006a00 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069e2:	f7fe fcc7 	bl	8005374 <_PreparePacket>
 80069e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069e8:	2212      	movs	r2, #18
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6838      	ldr	r0, [r7, #0]
 80069ee:	f7fe fdaf 	bl	8005550 <_SendPacket>
  RECORD_END();
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f383 8811 	msr	BASEPRI, r3
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	2401481c 	.word	0x2401481c

08006a04 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0e:	f04f 0120 	mov.w	r1, #32
 8006a12:	f381 8811 	msr	BASEPRI, r1
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	4807      	ldr	r0, [pc, #28]	; (8006a38 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a1a:	f7fe fcab 	bl	8005374 <_PreparePacket>
 8006a1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a20:	2211      	movs	r2, #17
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6838      	ldr	r0, [r7, #0]
 8006a26:	f7fe fd93 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f383 8811 	msr	BASEPRI, r3
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	2401481c 	.word	0x2401481c

08006a3c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a44:	f3ef 8311 	mrs	r3, BASEPRI
 8006a48:	f04f 0120 	mov.w	r1, #32
 8006a4c:	f381 8811 	msr	BASEPRI, r1
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	4819      	ldr	r0, [pc, #100]	; (8006ab8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a54:	f7fe fc8e 	bl	8005374 <_PreparePacket>
 8006a58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a5e:	4b17      	ldr	r3, [pc, #92]	; (8006abc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e00b      	b.n	8006a8a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	61f9      	str	r1, [r7, #28]
 8006a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	09db      	lsrs	r3, r3, #7
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d8f0      	bhi.n	8006a72 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	61fa      	str	r2, [r7, #28]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	6938      	ldr	r0, [r7, #16]
 8006aa6:	f7fe fd53 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f383 8811 	msr	BASEPRI, r3
}
 8006ab0:	bf00      	nop
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	2401481c 	.word	0x2401481c
 8006abc:	240147ec 	.word	0x240147ec

08006ac0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8006acc:	f04f 0120 	mov.w	r1, #32
 8006ad0:	f381 8811 	msr	BASEPRI, r1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	4819      	ldr	r0, [pc, #100]	; (8006b3c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006ad8:	f7fe fc4c 	bl	8005374 <_PreparePacket>
 8006adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	61f9      	str	r1, [r7, #28]
 8006b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b7f      	cmp	r3, #127	; 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b24:	2204      	movs	r2, #4
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7fe fd11 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	2401481c 	.word	0x2401481c
 8006b40:	240147ec 	.word	0x240147ec

08006b44 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b50:	f04f 0120 	mov.w	r1, #32
 8006b54:	f381 8811 	msr	BASEPRI, r1
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	4819      	ldr	r0, [pc, #100]	; (8006bc0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b5c:	f7fe fc0a 	bl	8005374 <_PreparePacket>
 8006b60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e00b      	b.n	8006b92 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1c59      	adds	r1, r3, #1
 8006b82:	61f9      	str	r1, [r7, #28]
 8006b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	09db      	lsrs	r3, r3, #7
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b7f      	cmp	r3, #127	; 0x7f
 8006b96:	d8f0      	bhi.n	8006b7a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	61fa      	str	r2, [r7, #28]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ba8:	2206      	movs	r2, #6
 8006baa:	68f9      	ldr	r1, [r7, #12]
 8006bac:	6938      	ldr	r0, [r7, #16]
 8006bae:	f7fe fccf 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f383 8811 	msr	BASEPRI, r3
}
 8006bb8:	bf00      	nop
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	2401481c 	.word	0x2401481c
 8006bc4:	240147ec 	.word	0x240147ec

08006bc8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	1ad3      	subs	r3, r2, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	240147ec 	.word	0x240147ec

08006be8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	; 0x30
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d06d      	beq.n	8006cd6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006bfa:	4b39      	ldr	r3, [pc, #228]	; (8006ce0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c00:	2300      	movs	r3, #0
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c04:	e008      	b.n	8006c18 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	3301      	adds	r3, #1
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3f2      	bcc.n	8006c06 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c20:	e000      	b.n	8006c24 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c22:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d055      	beq.n	8006cd6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2e:	f04f 0120 	mov.w	r1, #32
 8006c32:	f381 8811 	msr	BASEPRI, r1
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	482a      	ldr	r0, [pc, #168]	; (8006ce4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c3a:	f7fe fb9b 	bl	8005374 <_PreparePacket>
 8006c3e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	623b      	str	r3, [r7, #32]
 8006c4c:	e00b      	b.n	8006c66 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	6279      	str	r1, [r7, #36]	; 0x24
 8006c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	2b7f      	cmp	r3, #127	; 0x7f
 8006c6a:	d8f0      	bhi.n	8006c4e <SEGGER_SYSVIEW_SendModule+0x66>
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	627a      	str	r2, [r7, #36]	; 0x24
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e00b      	b.n	8006ca0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	61f9      	str	r1, [r7, #28]
 8006c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	09db      	lsrs	r3, r3, #7
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca4:	d8f0      	bhi.n	8006c88 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	61fa      	str	r2, [r7, #28]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7fe fb08 	bl	80052d4 <_EncodeStr>
 8006cc4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006cc6:	2216      	movs	r2, #22
 8006cc8:	68f9      	ldr	r1, [r7, #12]
 8006cca:	6938      	ldr	r0, [r7, #16]
 8006ccc:	f7fe fc40 	bl	8005550 <_SendPacket>
      RECORD_END();
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	3730      	adds	r7, #48	; 0x30
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	24014814 	.word	0x24014814
 8006ce4:	2401481c 	.word	0x2401481c

08006ce8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00f      	beq.n	8006d16 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f2      	bne.n	8006cfc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	24014814 	.word	0x24014814

08006d24 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2e:	f04f 0120 	mov.w	r1, #32
 8006d32:	f381 8811 	msr	BASEPRI, r1
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	4817      	ldr	r0, [pc, #92]	; (8006d98 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d3a:	f7fe fb1b 	bl	8005374 <_PreparePacket>
 8006d3e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	e00b      	b.n	8006d68 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	6179      	str	r1, [r7, #20]
 8006d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	09db      	lsrs	r3, r3, #7
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d6c:	d8f0      	bhi.n	8006d50 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	617a      	str	r2, [r7, #20]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d7e:	221b      	movs	r2, #27
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	68b8      	ldr	r0, [r7, #8]
 8006d84:	f7fe fbe4 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f383 8811 	msr	BASEPRI, r3
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2401481c 	.word	0x2401481c
 8006d9c:	24014818 	.word	0x24014818

08006da0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006da0:	b40f      	push	{r0, r1, r2, r3}
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006da8:	f107 0314 	add.w	r3, r7, #20
 8006dac:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	461a      	mov	r2, r3
 8006db2:	2100      	movs	r1, #0
 8006db4:	6938      	ldr	r0, [r7, #16]
 8006db6:	f7fe fedb 	bl	8005b70 <_VPrintTarget>
  va_end(ParamList);
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dc4:	b004      	add	sp, #16
 8006dc6:	4770      	bx	lr

08006dc8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd4:	f04f 0120 	mov.w	r1, #32
 8006dd8:	f381 8811 	msr	BASEPRI, r1
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	4827      	ldr	r0, [pc, #156]	; (8006e7c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006de0:	f7fe fac8 	bl	8005374 <_PreparePacket>
 8006de4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f7fe fa72 	bl	80052d4 <_EncodeStr>
 8006df0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
 8006df6:	2301      	movs	r3, #1
 8006df8:	623b      	str	r3, [r7, #32]
 8006dfa:	e00b      	b.n	8006e14 <SEGGER_SYSVIEW_Warn+0x4c>
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	1c59      	adds	r1, r3, #1
 8006e04:	6279      	str	r1, [r7, #36]	; 0x24
 8006e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	09db      	lsrs	r3, r3, #7
 8006e12:	623b      	str	r3, [r7, #32]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b7f      	cmp	r3, #127	; 0x7f
 8006e18:	d8f0      	bhi.n	8006dfc <SEGGER_SYSVIEW_Warn+0x34>
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e20:	6a3a      	ldr	r2, [r7, #32]
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	e00b      	b.n	8006e4c <SEGGER_SYSVIEW_Warn+0x84>
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	61f9      	str	r1, [r7, #28]
 8006e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	09db      	lsrs	r3, r3, #7
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e50:	d8f0      	bhi.n	8006e34 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	61fa      	str	r2, [r7, #28]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e62:	221a      	movs	r2, #26
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	6938      	ldr	r0, [r7, #16]
 8006e68:	f7fe fb72 	bl	8005550 <_SendPacket>
  RECORD_END();
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f383 8811 	msr	BASEPRI, r3
}
 8006e72:	bf00      	nop
 8006e74:	3728      	adds	r7, #40	; 0x28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	2401481c 	.word	0x2401481c

08006e80 <__libc_init_array>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	4d0d      	ldr	r5, [pc, #52]	; (8006eb8 <__libc_init_array+0x38>)
 8006e84:	4c0d      	ldr	r4, [pc, #52]	; (8006ebc <__libc_init_array+0x3c>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	d109      	bne.n	8006ea4 <__libc_init_array+0x24>
 8006e90:	4d0b      	ldr	r5, [pc, #44]	; (8006ec0 <__libc_init_array+0x40>)
 8006e92:	4c0c      	ldr	r4, [pc, #48]	; (8006ec4 <__libc_init_array+0x44>)
 8006e94:	f000 fcc0 	bl	8007818 <_init>
 8006e98:	1b64      	subs	r4, r4, r5
 8006e9a:	10a4      	asrs	r4, r4, #2
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	d105      	bne.n	8006eae <__libc_init_array+0x2e>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea8:	4798      	blx	r3
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7ee      	b.n	8006e8c <__libc_init_array+0xc>
 8006eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb2:	4798      	blx	r3
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7f2      	b.n	8006e9e <__libc_init_array+0x1e>
 8006eb8:	080079c0 	.word	0x080079c0
 8006ebc:	080079c0 	.word	0x080079c0
 8006ec0:	080079c0 	.word	0x080079c0
 8006ec4:	080079c4 	.word	0x080079c4

08006ec8 <memcmp>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	3901      	subs	r1, #1
 8006ecc:	4402      	add	r2, r0
 8006ece:	4290      	cmp	r0, r2
 8006ed0:	d101      	bne.n	8006ed6 <memcmp+0xe>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e005      	b.n	8006ee2 <memcmp+0x1a>
 8006ed6:	7803      	ldrb	r3, [r0, #0]
 8006ed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	d001      	beq.n	8006ee4 <memcmp+0x1c>
 8006ee0:	1b18      	subs	r0, r3, r4
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	e7f2      	b.n	8006ece <memcmp+0x6>

08006ee8 <memcpy>:
 8006ee8:	440a      	add	r2, r1
 8006eea:	4291      	cmp	r1, r2
 8006eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef0:	d100      	bne.n	8006ef4 <memcpy+0xc>
 8006ef2:	4770      	bx	lr
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006efe:	4291      	cmp	r1, r2
 8006f00:	d1f9      	bne.n	8006ef6 <memcpy+0xe>
 8006f02:	bd10      	pop	{r4, pc}

08006f04 <memset>:
 8006f04:	4402      	add	r2, r0
 8006f06:	4603      	mov	r3, r0
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d100      	bne.n	8006f0e <memset+0xa>
 8006f0c:	4770      	bx	lr
 8006f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f12:	e7f9      	b.n	8006f08 <memset+0x4>

08006f14 <sniprintf>:
 8006f14:	b40c      	push	{r2, r3}
 8006f16:	b530      	push	{r4, r5, lr}
 8006f18:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <sniprintf+0x64>)
 8006f1a:	1e0c      	subs	r4, r1, #0
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	b09d      	sub	sp, #116	; 0x74
 8006f20:	da08      	bge.n	8006f34 <sniprintf+0x20>
 8006f22:	238b      	movs	r3, #139	; 0x8b
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2a:	b01d      	add	sp, #116	; 0x74
 8006f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f30:	b002      	add	sp, #8
 8006f32:	4770      	bx	lr
 8006f34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f3c:	bf14      	ite	ne
 8006f3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f42:	4623      	moveq	r3, r4
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	9307      	str	r3, [sp, #28]
 8006f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f4c:	9002      	str	r0, [sp, #8]
 8006f4e:	9006      	str	r0, [sp, #24]
 8006f50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f56:	ab21      	add	r3, sp, #132	; 0x84
 8006f58:	a902      	add	r1, sp, #8
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	f000 f869 	bl	8007034 <_svfiprintf_r>
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	bfbc      	itt	lt
 8006f66:	238b      	movlt	r3, #139	; 0x8b
 8006f68:	602b      	strlt	r3, [r5, #0]
 8006f6a:	2c00      	cmp	r4, #0
 8006f6c:	d0dd      	beq.n	8006f2a <sniprintf+0x16>
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	e7d9      	b.n	8006f2a <sniprintf+0x16>
 8006f76:	bf00      	nop
 8006f78:	24000018 	.word	0x24000018

08006f7c <__ssputs_r>:
 8006f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	688e      	ldr	r6, [r1, #8]
 8006f82:	429e      	cmp	r6, r3
 8006f84:	4682      	mov	sl, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	4690      	mov	r8, r2
 8006f8a:	461f      	mov	r7, r3
 8006f8c:	d838      	bhi.n	8007000 <__ssputs_r+0x84>
 8006f8e:	898a      	ldrh	r2, [r1, #12]
 8006f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f94:	d032      	beq.n	8006ffc <__ssputs_r+0x80>
 8006f96:	6825      	ldr	r5, [r4, #0]
 8006f98:	6909      	ldr	r1, [r1, #16]
 8006f9a:	eba5 0901 	sub.w	r9, r5, r1
 8006f9e:	6965      	ldr	r5, [r4, #20]
 8006fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fa8:	3301      	adds	r3, #1
 8006faa:	444b      	add	r3, r9
 8006fac:	106d      	asrs	r5, r5, #1
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	bf38      	it	cc
 8006fb2:	461d      	movcc	r5, r3
 8006fb4:	0553      	lsls	r3, r2, #21
 8006fb6:	d531      	bpl.n	800701c <__ssputs_r+0xa0>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f000 fb55 	bl	8007668 <_malloc_r>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	b950      	cbnz	r0, 8006fd8 <__ssputs_r+0x5c>
 8006fc2:	230c      	movs	r3, #12
 8006fc4:	f8ca 3000 	str.w	r3, [sl]
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd8:	6921      	ldr	r1, [r4, #16]
 8006fda:	464a      	mov	r2, r9
 8006fdc:	f7ff ff84 	bl	8006ee8 <memcpy>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	6126      	str	r6, [r4, #16]
 8006fee:	6165      	str	r5, [r4, #20]
 8006ff0:	444e      	add	r6, r9
 8006ff2:	eba5 0509 	sub.w	r5, r5, r9
 8006ff6:	6026      	str	r6, [r4, #0]
 8006ff8:	60a5      	str	r5, [r4, #8]
 8006ffa:	463e      	mov	r6, r7
 8006ffc:	42be      	cmp	r6, r7
 8006ffe:	d900      	bls.n	8007002 <__ssputs_r+0x86>
 8007000:	463e      	mov	r6, r7
 8007002:	6820      	ldr	r0, [r4, #0]
 8007004:	4632      	mov	r2, r6
 8007006:	4641      	mov	r1, r8
 8007008:	f000 faa8 	bl	800755c <memmove>
 800700c:	68a3      	ldr	r3, [r4, #8]
 800700e:	1b9b      	subs	r3, r3, r6
 8007010:	60a3      	str	r3, [r4, #8]
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	4433      	add	r3, r6
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	2000      	movs	r0, #0
 800701a:	e7db      	b.n	8006fd4 <__ssputs_r+0x58>
 800701c:	462a      	mov	r2, r5
 800701e:	f000 fb97 	bl	8007750 <_realloc_r>
 8007022:	4606      	mov	r6, r0
 8007024:	2800      	cmp	r0, #0
 8007026:	d1e1      	bne.n	8006fec <__ssputs_r+0x70>
 8007028:	6921      	ldr	r1, [r4, #16]
 800702a:	4650      	mov	r0, sl
 800702c:	f000 fab0 	bl	8007590 <_free_r>
 8007030:	e7c7      	b.n	8006fc2 <__ssputs_r+0x46>
	...

08007034 <_svfiprintf_r>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	4698      	mov	r8, r3
 800703a:	898b      	ldrh	r3, [r1, #12]
 800703c:	061b      	lsls	r3, r3, #24
 800703e:	b09d      	sub	sp, #116	; 0x74
 8007040:	4607      	mov	r7, r0
 8007042:	460d      	mov	r5, r1
 8007044:	4614      	mov	r4, r2
 8007046:	d50e      	bpl.n	8007066 <_svfiprintf_r+0x32>
 8007048:	690b      	ldr	r3, [r1, #16]
 800704a:	b963      	cbnz	r3, 8007066 <_svfiprintf_r+0x32>
 800704c:	2140      	movs	r1, #64	; 0x40
 800704e:	f000 fb0b 	bl	8007668 <_malloc_r>
 8007052:	6028      	str	r0, [r5, #0]
 8007054:	6128      	str	r0, [r5, #16]
 8007056:	b920      	cbnz	r0, 8007062 <_svfiprintf_r+0x2e>
 8007058:	230c      	movs	r3, #12
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	e0d1      	b.n	8007206 <_svfiprintf_r+0x1d2>
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	616b      	str	r3, [r5, #20]
 8007066:	2300      	movs	r3, #0
 8007068:	9309      	str	r3, [sp, #36]	; 0x24
 800706a:	2320      	movs	r3, #32
 800706c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007070:	f8cd 800c 	str.w	r8, [sp, #12]
 8007074:	2330      	movs	r3, #48	; 0x30
 8007076:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007220 <_svfiprintf_r+0x1ec>
 800707a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800707e:	f04f 0901 	mov.w	r9, #1
 8007082:	4623      	mov	r3, r4
 8007084:	469a      	mov	sl, r3
 8007086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708a:	b10a      	cbz	r2, 8007090 <_svfiprintf_r+0x5c>
 800708c:	2a25      	cmp	r2, #37	; 0x25
 800708e:	d1f9      	bne.n	8007084 <_svfiprintf_r+0x50>
 8007090:	ebba 0b04 	subs.w	fp, sl, r4
 8007094:	d00b      	beq.n	80070ae <_svfiprintf_r+0x7a>
 8007096:	465b      	mov	r3, fp
 8007098:	4622      	mov	r2, r4
 800709a:	4629      	mov	r1, r5
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff ff6d 	bl	8006f7c <__ssputs_r>
 80070a2:	3001      	adds	r0, #1
 80070a4:	f000 80aa 	beq.w	80071fc <_svfiprintf_r+0x1c8>
 80070a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070aa:	445a      	add	r2, fp
 80070ac:	9209      	str	r2, [sp, #36]	; 0x24
 80070ae:	f89a 3000 	ldrb.w	r3, [sl]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80a2 	beq.w	80071fc <_svfiprintf_r+0x1c8>
 80070b8:	2300      	movs	r3, #0
 80070ba:	f04f 32ff 	mov.w	r2, #4294967295
 80070be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c2:	f10a 0a01 	add.w	sl, sl, #1
 80070c6:	9304      	str	r3, [sp, #16]
 80070c8:	9307      	str	r3, [sp, #28]
 80070ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ce:	931a      	str	r3, [sp, #104]	; 0x68
 80070d0:	4654      	mov	r4, sl
 80070d2:	2205      	movs	r2, #5
 80070d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d8:	4851      	ldr	r0, [pc, #324]	; (8007220 <_svfiprintf_r+0x1ec>)
 80070da:	f7f9 f959 	bl	8000390 <memchr>
 80070de:	9a04      	ldr	r2, [sp, #16]
 80070e0:	b9d8      	cbnz	r0, 800711a <_svfiprintf_r+0xe6>
 80070e2:	06d0      	lsls	r0, r2, #27
 80070e4:	bf44      	itt	mi
 80070e6:	2320      	movmi	r3, #32
 80070e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ec:	0711      	lsls	r1, r2, #28
 80070ee:	bf44      	itt	mi
 80070f0:	232b      	movmi	r3, #43	; 0x2b
 80070f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f6:	f89a 3000 	ldrb.w	r3, [sl]
 80070fa:	2b2a      	cmp	r3, #42	; 0x2a
 80070fc:	d015      	beq.n	800712a <_svfiprintf_r+0xf6>
 80070fe:	9a07      	ldr	r2, [sp, #28]
 8007100:	4654      	mov	r4, sl
 8007102:	2000      	movs	r0, #0
 8007104:	f04f 0c0a 	mov.w	ip, #10
 8007108:	4621      	mov	r1, r4
 800710a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710e:	3b30      	subs	r3, #48	; 0x30
 8007110:	2b09      	cmp	r3, #9
 8007112:	d94e      	bls.n	80071b2 <_svfiprintf_r+0x17e>
 8007114:	b1b0      	cbz	r0, 8007144 <_svfiprintf_r+0x110>
 8007116:	9207      	str	r2, [sp, #28]
 8007118:	e014      	b.n	8007144 <_svfiprintf_r+0x110>
 800711a:	eba0 0308 	sub.w	r3, r0, r8
 800711e:	fa09 f303 	lsl.w	r3, r9, r3
 8007122:	4313      	orrs	r3, r2
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	46a2      	mov	sl, r4
 8007128:	e7d2      	b.n	80070d0 <_svfiprintf_r+0x9c>
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	1d19      	adds	r1, r3, #4
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	9103      	str	r1, [sp, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	bfbb      	ittet	lt
 8007136:	425b      	neglt	r3, r3
 8007138:	f042 0202 	orrlt.w	r2, r2, #2
 800713c:	9307      	strge	r3, [sp, #28]
 800713e:	9307      	strlt	r3, [sp, #28]
 8007140:	bfb8      	it	lt
 8007142:	9204      	strlt	r2, [sp, #16]
 8007144:	7823      	ldrb	r3, [r4, #0]
 8007146:	2b2e      	cmp	r3, #46	; 0x2e
 8007148:	d10c      	bne.n	8007164 <_svfiprintf_r+0x130>
 800714a:	7863      	ldrb	r3, [r4, #1]
 800714c:	2b2a      	cmp	r3, #42	; 0x2a
 800714e:	d135      	bne.n	80071bc <_svfiprintf_r+0x188>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	1d1a      	adds	r2, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9203      	str	r2, [sp, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfb8      	it	lt
 800715c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007160:	3402      	adds	r4, #2
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007230 <_svfiprintf_r+0x1fc>
 8007168:	7821      	ldrb	r1, [r4, #0]
 800716a:	2203      	movs	r2, #3
 800716c:	4650      	mov	r0, sl
 800716e:	f7f9 f90f 	bl	8000390 <memchr>
 8007172:	b140      	cbz	r0, 8007186 <_svfiprintf_r+0x152>
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	eba0 000a 	sub.w	r0, r0, sl
 800717a:	fa03 f000 	lsl.w	r0, r3, r0
 800717e:	9b04      	ldr	r3, [sp, #16]
 8007180:	4303      	orrs	r3, r0
 8007182:	3401      	adds	r4, #1
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718a:	4826      	ldr	r0, [pc, #152]	; (8007224 <_svfiprintf_r+0x1f0>)
 800718c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007190:	2206      	movs	r2, #6
 8007192:	f7f9 f8fd 	bl	8000390 <memchr>
 8007196:	2800      	cmp	r0, #0
 8007198:	d038      	beq.n	800720c <_svfiprintf_r+0x1d8>
 800719a:	4b23      	ldr	r3, [pc, #140]	; (8007228 <_svfiprintf_r+0x1f4>)
 800719c:	bb1b      	cbnz	r3, 80071e6 <_svfiprintf_r+0x1b2>
 800719e:	9b03      	ldr	r3, [sp, #12]
 80071a0:	3307      	adds	r3, #7
 80071a2:	f023 0307 	bic.w	r3, r3, #7
 80071a6:	3308      	adds	r3, #8
 80071a8:	9303      	str	r3, [sp, #12]
 80071aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ac:	4433      	add	r3, r6
 80071ae:	9309      	str	r3, [sp, #36]	; 0x24
 80071b0:	e767      	b.n	8007082 <_svfiprintf_r+0x4e>
 80071b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b6:	460c      	mov	r4, r1
 80071b8:	2001      	movs	r0, #1
 80071ba:	e7a5      	b.n	8007108 <_svfiprintf_r+0xd4>
 80071bc:	2300      	movs	r3, #0
 80071be:	3401      	adds	r4, #1
 80071c0:	9305      	str	r3, [sp, #20]
 80071c2:	4619      	mov	r1, r3
 80071c4:	f04f 0c0a 	mov.w	ip, #10
 80071c8:	4620      	mov	r0, r4
 80071ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ce:	3a30      	subs	r2, #48	; 0x30
 80071d0:	2a09      	cmp	r2, #9
 80071d2:	d903      	bls.n	80071dc <_svfiprintf_r+0x1a8>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0c5      	beq.n	8007164 <_svfiprintf_r+0x130>
 80071d8:	9105      	str	r1, [sp, #20]
 80071da:	e7c3      	b.n	8007164 <_svfiprintf_r+0x130>
 80071dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e0:	4604      	mov	r4, r0
 80071e2:	2301      	movs	r3, #1
 80071e4:	e7f0      	b.n	80071c8 <_svfiprintf_r+0x194>
 80071e6:	ab03      	add	r3, sp, #12
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	462a      	mov	r2, r5
 80071ec:	4b0f      	ldr	r3, [pc, #60]	; (800722c <_svfiprintf_r+0x1f8>)
 80071ee:	a904      	add	r1, sp, #16
 80071f0:	4638      	mov	r0, r7
 80071f2:	f3af 8000 	nop.w
 80071f6:	1c42      	adds	r2, r0, #1
 80071f8:	4606      	mov	r6, r0
 80071fa:	d1d6      	bne.n	80071aa <_svfiprintf_r+0x176>
 80071fc:	89ab      	ldrh	r3, [r5, #12]
 80071fe:	065b      	lsls	r3, r3, #25
 8007200:	f53f af2c 	bmi.w	800705c <_svfiprintf_r+0x28>
 8007204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007206:	b01d      	add	sp, #116	; 0x74
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <_svfiprintf_r+0x1f8>)
 8007214:	a904      	add	r1, sp, #16
 8007216:	4638      	mov	r0, r7
 8007218:	f000 f87a 	bl	8007310 <_printf_i>
 800721c:	e7eb      	b.n	80071f6 <_svfiprintf_r+0x1c2>
 800721e:	bf00      	nop
 8007220:	0800798c 	.word	0x0800798c
 8007224:	08007996 	.word	0x08007996
 8007228:	00000000 	.word	0x00000000
 800722c:	08006f7d 	.word	0x08006f7d
 8007230:	08007992 	.word	0x08007992

08007234 <_printf_common>:
 8007234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	4616      	mov	r6, r2
 800723a:	4699      	mov	r9, r3
 800723c:	688a      	ldr	r2, [r1, #8]
 800723e:	690b      	ldr	r3, [r1, #16]
 8007240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007244:	4293      	cmp	r3, r2
 8007246:	bfb8      	it	lt
 8007248:	4613      	movlt	r3, r2
 800724a:	6033      	str	r3, [r6, #0]
 800724c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007250:	4607      	mov	r7, r0
 8007252:	460c      	mov	r4, r1
 8007254:	b10a      	cbz	r2, 800725a <_printf_common+0x26>
 8007256:	3301      	adds	r3, #1
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	0699      	lsls	r1, r3, #26
 800725e:	bf42      	ittt	mi
 8007260:	6833      	ldrmi	r3, [r6, #0]
 8007262:	3302      	addmi	r3, #2
 8007264:	6033      	strmi	r3, [r6, #0]
 8007266:	6825      	ldr	r5, [r4, #0]
 8007268:	f015 0506 	ands.w	r5, r5, #6
 800726c:	d106      	bne.n	800727c <_printf_common+0x48>
 800726e:	f104 0a19 	add.w	sl, r4, #25
 8007272:	68e3      	ldr	r3, [r4, #12]
 8007274:	6832      	ldr	r2, [r6, #0]
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	42ab      	cmp	r3, r5
 800727a:	dc26      	bgt.n	80072ca <_printf_common+0x96>
 800727c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007280:	1e13      	subs	r3, r2, #0
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	bf18      	it	ne
 8007286:	2301      	movne	r3, #1
 8007288:	0692      	lsls	r2, r2, #26
 800728a:	d42b      	bmi.n	80072e4 <_printf_common+0xb0>
 800728c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007290:	4649      	mov	r1, r9
 8007292:	4638      	mov	r0, r7
 8007294:	47c0      	blx	r8
 8007296:	3001      	adds	r0, #1
 8007298:	d01e      	beq.n	80072d8 <_printf_common+0xa4>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	68e5      	ldr	r5, [r4, #12]
 800729e:	6832      	ldr	r2, [r6, #0]
 80072a0:	f003 0306 	and.w	r3, r3, #6
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	bf08      	it	eq
 80072a8:	1aad      	subeq	r5, r5, r2
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	6922      	ldr	r2, [r4, #16]
 80072ae:	bf0c      	ite	eq
 80072b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b4:	2500      	movne	r5, #0
 80072b6:	4293      	cmp	r3, r2
 80072b8:	bfc4      	itt	gt
 80072ba:	1a9b      	subgt	r3, r3, r2
 80072bc:	18ed      	addgt	r5, r5, r3
 80072be:	2600      	movs	r6, #0
 80072c0:	341a      	adds	r4, #26
 80072c2:	42b5      	cmp	r5, r6
 80072c4:	d11a      	bne.n	80072fc <_printf_common+0xc8>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e008      	b.n	80072dc <_printf_common+0xa8>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4652      	mov	r2, sl
 80072ce:	4649      	mov	r1, r9
 80072d0:	4638      	mov	r0, r7
 80072d2:	47c0      	blx	r8
 80072d4:	3001      	adds	r0, #1
 80072d6:	d103      	bne.n	80072e0 <_printf_common+0xac>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e0:	3501      	adds	r5, #1
 80072e2:	e7c6      	b.n	8007272 <_printf_common+0x3e>
 80072e4:	18e1      	adds	r1, r4, r3
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	2030      	movs	r0, #48	; 0x30
 80072ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ee:	4422      	add	r2, r4
 80072f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f8:	3302      	adds	r3, #2
 80072fa:	e7c7      	b.n	800728c <_printf_common+0x58>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4622      	mov	r2, r4
 8007300:	4649      	mov	r1, r9
 8007302:	4638      	mov	r0, r7
 8007304:	47c0      	blx	r8
 8007306:	3001      	adds	r0, #1
 8007308:	d0e6      	beq.n	80072d8 <_printf_common+0xa4>
 800730a:	3601      	adds	r6, #1
 800730c:	e7d9      	b.n	80072c2 <_printf_common+0x8e>
	...

08007310 <_printf_i>:
 8007310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	7e0f      	ldrb	r7, [r1, #24]
 8007316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007318:	2f78      	cmp	r7, #120	; 0x78
 800731a:	4691      	mov	r9, r2
 800731c:	4680      	mov	r8, r0
 800731e:	460c      	mov	r4, r1
 8007320:	469a      	mov	sl, r3
 8007322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007326:	d807      	bhi.n	8007338 <_printf_i+0x28>
 8007328:	2f62      	cmp	r7, #98	; 0x62
 800732a:	d80a      	bhi.n	8007342 <_printf_i+0x32>
 800732c:	2f00      	cmp	r7, #0
 800732e:	f000 80d8 	beq.w	80074e2 <_printf_i+0x1d2>
 8007332:	2f58      	cmp	r7, #88	; 0x58
 8007334:	f000 80a3 	beq.w	800747e <_printf_i+0x16e>
 8007338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800733c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007340:	e03a      	b.n	80073b8 <_printf_i+0xa8>
 8007342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007346:	2b15      	cmp	r3, #21
 8007348:	d8f6      	bhi.n	8007338 <_printf_i+0x28>
 800734a:	a101      	add	r1, pc, #4	; (adr r1, 8007350 <_printf_i+0x40>)
 800734c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007350:	080073a9 	.word	0x080073a9
 8007354:	080073bd 	.word	0x080073bd
 8007358:	08007339 	.word	0x08007339
 800735c:	08007339 	.word	0x08007339
 8007360:	08007339 	.word	0x08007339
 8007364:	08007339 	.word	0x08007339
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007339 	.word	0x08007339
 8007370:	08007339 	.word	0x08007339
 8007374:	08007339 	.word	0x08007339
 8007378:	08007339 	.word	0x08007339
 800737c:	080074c9 	.word	0x080074c9
 8007380:	080073ed 	.word	0x080073ed
 8007384:	080074ab 	.word	0x080074ab
 8007388:	08007339 	.word	0x08007339
 800738c:	08007339 	.word	0x08007339
 8007390:	080074eb 	.word	0x080074eb
 8007394:	08007339 	.word	0x08007339
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007339 	.word	0x08007339
 80073a0:	08007339 	.word	0x08007339
 80073a4:	080074b3 	.word	0x080074b3
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	1d1a      	adds	r2, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	602a      	str	r2, [r5, #0]
 80073b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0a3      	b.n	8007504 <_printf_i+0x1f4>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	6829      	ldr	r1, [r5, #0]
 80073c0:	0606      	lsls	r6, r0, #24
 80073c2:	f101 0304 	add.w	r3, r1, #4
 80073c6:	d50a      	bpl.n	80073de <_printf_i+0xce>
 80073c8:	680e      	ldr	r6, [r1, #0]
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	da03      	bge.n	80073d8 <_printf_i+0xc8>
 80073d0:	232d      	movs	r3, #45	; 0x2d
 80073d2:	4276      	negs	r6, r6
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d8:	485e      	ldr	r0, [pc, #376]	; (8007554 <_printf_i+0x244>)
 80073da:	230a      	movs	r3, #10
 80073dc:	e019      	b.n	8007412 <_printf_i+0x102>
 80073de:	680e      	ldr	r6, [r1, #0]
 80073e0:	602b      	str	r3, [r5, #0]
 80073e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073e6:	bf18      	it	ne
 80073e8:	b236      	sxthne	r6, r6
 80073ea:	e7ef      	b.n	80073cc <_printf_i+0xbc>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	1d19      	adds	r1, r3, #4
 80073f2:	6029      	str	r1, [r5, #0]
 80073f4:	0601      	lsls	r1, r0, #24
 80073f6:	d501      	bpl.n	80073fc <_printf_i+0xec>
 80073f8:	681e      	ldr	r6, [r3, #0]
 80073fa:	e002      	b.n	8007402 <_printf_i+0xf2>
 80073fc:	0646      	lsls	r6, r0, #25
 80073fe:	d5fb      	bpl.n	80073f8 <_printf_i+0xe8>
 8007400:	881e      	ldrh	r6, [r3, #0]
 8007402:	4854      	ldr	r0, [pc, #336]	; (8007554 <_printf_i+0x244>)
 8007404:	2f6f      	cmp	r7, #111	; 0x6f
 8007406:	bf0c      	ite	eq
 8007408:	2308      	moveq	r3, #8
 800740a:	230a      	movne	r3, #10
 800740c:	2100      	movs	r1, #0
 800740e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007412:	6865      	ldr	r5, [r4, #4]
 8007414:	60a5      	str	r5, [r4, #8]
 8007416:	2d00      	cmp	r5, #0
 8007418:	bfa2      	ittt	ge
 800741a:	6821      	ldrge	r1, [r4, #0]
 800741c:	f021 0104 	bicge.w	r1, r1, #4
 8007420:	6021      	strge	r1, [r4, #0]
 8007422:	b90e      	cbnz	r6, 8007428 <_printf_i+0x118>
 8007424:	2d00      	cmp	r5, #0
 8007426:	d04d      	beq.n	80074c4 <_printf_i+0x1b4>
 8007428:	4615      	mov	r5, r2
 800742a:	fbb6 f1f3 	udiv	r1, r6, r3
 800742e:	fb03 6711 	mls	r7, r3, r1, r6
 8007432:	5dc7      	ldrb	r7, [r0, r7]
 8007434:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007438:	4637      	mov	r7, r6
 800743a:	42bb      	cmp	r3, r7
 800743c:	460e      	mov	r6, r1
 800743e:	d9f4      	bls.n	800742a <_printf_i+0x11a>
 8007440:	2b08      	cmp	r3, #8
 8007442:	d10b      	bne.n	800745c <_printf_i+0x14c>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	07de      	lsls	r6, r3, #31
 8007448:	d508      	bpl.n	800745c <_printf_i+0x14c>
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	6861      	ldr	r1, [r4, #4]
 800744e:	4299      	cmp	r1, r3
 8007450:	bfde      	ittt	le
 8007452:	2330      	movle	r3, #48	; 0x30
 8007454:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007458:	f105 35ff 	addle.w	r5, r5, #4294967295
 800745c:	1b52      	subs	r2, r2, r5
 800745e:	6122      	str	r2, [r4, #16]
 8007460:	f8cd a000 	str.w	sl, [sp]
 8007464:	464b      	mov	r3, r9
 8007466:	aa03      	add	r2, sp, #12
 8007468:	4621      	mov	r1, r4
 800746a:	4640      	mov	r0, r8
 800746c:	f7ff fee2 	bl	8007234 <_printf_common>
 8007470:	3001      	adds	r0, #1
 8007472:	d14c      	bne.n	800750e <_printf_i+0x1fe>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	b004      	add	sp, #16
 800747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747e:	4835      	ldr	r0, [pc, #212]	; (8007554 <_printf_i+0x244>)
 8007480:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007484:	6829      	ldr	r1, [r5, #0]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	f851 6b04 	ldr.w	r6, [r1], #4
 800748c:	6029      	str	r1, [r5, #0]
 800748e:	061d      	lsls	r5, r3, #24
 8007490:	d514      	bpl.n	80074bc <_printf_i+0x1ac>
 8007492:	07df      	lsls	r7, r3, #31
 8007494:	bf44      	itt	mi
 8007496:	f043 0320 	orrmi.w	r3, r3, #32
 800749a:	6023      	strmi	r3, [r4, #0]
 800749c:	b91e      	cbnz	r6, 80074a6 <_printf_i+0x196>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	f023 0320 	bic.w	r3, r3, #32
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	2310      	movs	r3, #16
 80074a8:	e7b0      	b.n	800740c <_printf_i+0xfc>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f043 0320 	orr.w	r3, r3, #32
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	2378      	movs	r3, #120	; 0x78
 80074b4:	4828      	ldr	r0, [pc, #160]	; (8007558 <_printf_i+0x248>)
 80074b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ba:	e7e3      	b.n	8007484 <_printf_i+0x174>
 80074bc:	0659      	lsls	r1, r3, #25
 80074be:	bf48      	it	mi
 80074c0:	b2b6      	uxthmi	r6, r6
 80074c2:	e7e6      	b.n	8007492 <_printf_i+0x182>
 80074c4:	4615      	mov	r5, r2
 80074c6:	e7bb      	b.n	8007440 <_printf_i+0x130>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	6826      	ldr	r6, [r4, #0]
 80074cc:	6961      	ldr	r1, [r4, #20]
 80074ce:	1d18      	adds	r0, r3, #4
 80074d0:	6028      	str	r0, [r5, #0]
 80074d2:	0635      	lsls	r5, r6, #24
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	d501      	bpl.n	80074dc <_printf_i+0x1cc>
 80074d8:	6019      	str	r1, [r3, #0]
 80074da:	e002      	b.n	80074e2 <_printf_i+0x1d2>
 80074dc:	0670      	lsls	r0, r6, #25
 80074de:	d5fb      	bpl.n	80074d8 <_printf_i+0x1c8>
 80074e0:	8019      	strh	r1, [r3, #0]
 80074e2:	2300      	movs	r3, #0
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	4615      	mov	r5, r2
 80074e8:	e7ba      	b.n	8007460 <_printf_i+0x150>
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	1d1a      	adds	r2, r3, #4
 80074ee:	602a      	str	r2, [r5, #0]
 80074f0:	681d      	ldr	r5, [r3, #0]
 80074f2:	6862      	ldr	r2, [r4, #4]
 80074f4:	2100      	movs	r1, #0
 80074f6:	4628      	mov	r0, r5
 80074f8:	f7f8 ff4a 	bl	8000390 <memchr>
 80074fc:	b108      	cbz	r0, 8007502 <_printf_i+0x1f2>
 80074fe:	1b40      	subs	r0, r0, r5
 8007500:	6060      	str	r0, [r4, #4]
 8007502:	6863      	ldr	r3, [r4, #4]
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	2300      	movs	r3, #0
 8007508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750c:	e7a8      	b.n	8007460 <_printf_i+0x150>
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	462a      	mov	r2, r5
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	47d0      	blx	sl
 8007518:	3001      	adds	r0, #1
 800751a:	d0ab      	beq.n	8007474 <_printf_i+0x164>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	079b      	lsls	r3, r3, #30
 8007520:	d413      	bmi.n	800754a <_printf_i+0x23a>
 8007522:	68e0      	ldr	r0, [r4, #12]
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	4298      	cmp	r0, r3
 8007528:	bfb8      	it	lt
 800752a:	4618      	movlt	r0, r3
 800752c:	e7a4      	b.n	8007478 <_printf_i+0x168>
 800752e:	2301      	movs	r3, #1
 8007530:	4632      	mov	r2, r6
 8007532:	4649      	mov	r1, r9
 8007534:	4640      	mov	r0, r8
 8007536:	47d0      	blx	sl
 8007538:	3001      	adds	r0, #1
 800753a:	d09b      	beq.n	8007474 <_printf_i+0x164>
 800753c:	3501      	adds	r5, #1
 800753e:	68e3      	ldr	r3, [r4, #12]
 8007540:	9903      	ldr	r1, [sp, #12]
 8007542:	1a5b      	subs	r3, r3, r1
 8007544:	42ab      	cmp	r3, r5
 8007546:	dcf2      	bgt.n	800752e <_printf_i+0x21e>
 8007548:	e7eb      	b.n	8007522 <_printf_i+0x212>
 800754a:	2500      	movs	r5, #0
 800754c:	f104 0619 	add.w	r6, r4, #25
 8007550:	e7f5      	b.n	800753e <_printf_i+0x22e>
 8007552:	bf00      	nop
 8007554:	0800799d 	.word	0x0800799d
 8007558:	080079ae 	.word	0x080079ae

0800755c <memmove>:
 800755c:	4288      	cmp	r0, r1
 800755e:	b510      	push	{r4, lr}
 8007560:	eb01 0402 	add.w	r4, r1, r2
 8007564:	d902      	bls.n	800756c <memmove+0x10>
 8007566:	4284      	cmp	r4, r0
 8007568:	4623      	mov	r3, r4
 800756a:	d807      	bhi.n	800757c <memmove+0x20>
 800756c:	1e43      	subs	r3, r0, #1
 800756e:	42a1      	cmp	r1, r4
 8007570:	d008      	beq.n	8007584 <memmove+0x28>
 8007572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800757a:	e7f8      	b.n	800756e <memmove+0x12>
 800757c:	4402      	add	r2, r0
 800757e:	4601      	mov	r1, r0
 8007580:	428a      	cmp	r2, r1
 8007582:	d100      	bne.n	8007586 <memmove+0x2a>
 8007584:	bd10      	pop	{r4, pc}
 8007586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800758a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800758e:	e7f7      	b.n	8007580 <memmove+0x24>

08007590 <_free_r>:
 8007590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007592:	2900      	cmp	r1, #0
 8007594:	d044      	beq.n	8007620 <_free_r+0x90>
 8007596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759a:	9001      	str	r0, [sp, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f1a1 0404 	sub.w	r4, r1, #4
 80075a2:	bfb8      	it	lt
 80075a4:	18e4      	addlt	r4, r4, r3
 80075a6:	f000 f913 	bl	80077d0 <__malloc_lock>
 80075aa:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <_free_r+0x94>)
 80075ac:	9801      	ldr	r0, [sp, #4]
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	b933      	cbnz	r3, 80075c0 <_free_r+0x30>
 80075b2:	6063      	str	r3, [r4, #4]
 80075b4:	6014      	str	r4, [r2, #0]
 80075b6:	b003      	add	sp, #12
 80075b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075bc:	f000 b90e 	b.w	80077dc <__malloc_unlock>
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d908      	bls.n	80075d6 <_free_r+0x46>
 80075c4:	6825      	ldr	r5, [r4, #0]
 80075c6:	1961      	adds	r1, r4, r5
 80075c8:	428b      	cmp	r3, r1
 80075ca:	bf01      	itttt	eq
 80075cc:	6819      	ldreq	r1, [r3, #0]
 80075ce:	685b      	ldreq	r3, [r3, #4]
 80075d0:	1949      	addeq	r1, r1, r5
 80075d2:	6021      	streq	r1, [r4, #0]
 80075d4:	e7ed      	b.n	80075b2 <_free_r+0x22>
 80075d6:	461a      	mov	r2, r3
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b10b      	cbz	r3, 80075e0 <_free_r+0x50>
 80075dc:	42a3      	cmp	r3, r4
 80075de:	d9fa      	bls.n	80075d6 <_free_r+0x46>
 80075e0:	6811      	ldr	r1, [r2, #0]
 80075e2:	1855      	adds	r5, r2, r1
 80075e4:	42a5      	cmp	r5, r4
 80075e6:	d10b      	bne.n	8007600 <_free_r+0x70>
 80075e8:	6824      	ldr	r4, [r4, #0]
 80075ea:	4421      	add	r1, r4
 80075ec:	1854      	adds	r4, r2, r1
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	6011      	str	r1, [r2, #0]
 80075f2:	d1e0      	bne.n	80075b6 <_free_r+0x26>
 80075f4:	681c      	ldr	r4, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	6053      	str	r3, [r2, #4]
 80075fa:	4421      	add	r1, r4
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	e7da      	b.n	80075b6 <_free_r+0x26>
 8007600:	d902      	bls.n	8007608 <_free_r+0x78>
 8007602:	230c      	movs	r3, #12
 8007604:	6003      	str	r3, [r0, #0]
 8007606:	e7d6      	b.n	80075b6 <_free_r+0x26>
 8007608:	6825      	ldr	r5, [r4, #0]
 800760a:	1961      	adds	r1, r4, r5
 800760c:	428b      	cmp	r3, r1
 800760e:	bf04      	itt	eq
 8007610:	6819      	ldreq	r1, [r3, #0]
 8007612:	685b      	ldreq	r3, [r3, #4]
 8007614:	6063      	str	r3, [r4, #4]
 8007616:	bf04      	itt	eq
 8007618:	1949      	addeq	r1, r1, r5
 800761a:	6021      	streq	r1, [r4, #0]
 800761c:	6054      	str	r4, [r2, #4]
 800761e:	e7ca      	b.n	80075b6 <_free_r+0x26>
 8007620:	b003      	add	sp, #12
 8007622:	bd30      	pop	{r4, r5, pc}
 8007624:	24014900 	.word	0x24014900

08007628 <sbrk_aligned>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	4e0e      	ldr	r6, [pc, #56]	; (8007664 <sbrk_aligned+0x3c>)
 800762c:	460c      	mov	r4, r1
 800762e:	6831      	ldr	r1, [r6, #0]
 8007630:	4605      	mov	r5, r0
 8007632:	b911      	cbnz	r1, 800763a <sbrk_aligned+0x12>
 8007634:	f000 f8bc 	bl	80077b0 <_sbrk_r>
 8007638:	6030      	str	r0, [r6, #0]
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f000 f8b7 	bl	80077b0 <_sbrk_r>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d00a      	beq.n	800765c <sbrk_aligned+0x34>
 8007646:	1cc4      	adds	r4, r0, #3
 8007648:	f024 0403 	bic.w	r4, r4, #3
 800764c:	42a0      	cmp	r0, r4
 800764e:	d007      	beq.n	8007660 <sbrk_aligned+0x38>
 8007650:	1a21      	subs	r1, r4, r0
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f8ac 	bl	80077b0 <_sbrk_r>
 8007658:	3001      	adds	r0, #1
 800765a:	d101      	bne.n	8007660 <sbrk_aligned+0x38>
 800765c:	f04f 34ff 	mov.w	r4, #4294967295
 8007660:	4620      	mov	r0, r4
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	24014904 	.word	0x24014904

08007668 <_malloc_r>:
 8007668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	1ccd      	adds	r5, r1, #3
 800766e:	f025 0503 	bic.w	r5, r5, #3
 8007672:	3508      	adds	r5, #8
 8007674:	2d0c      	cmp	r5, #12
 8007676:	bf38      	it	cc
 8007678:	250c      	movcc	r5, #12
 800767a:	2d00      	cmp	r5, #0
 800767c:	4607      	mov	r7, r0
 800767e:	db01      	blt.n	8007684 <_malloc_r+0x1c>
 8007680:	42a9      	cmp	r1, r5
 8007682:	d905      	bls.n	8007690 <_malloc_r+0x28>
 8007684:	230c      	movs	r3, #12
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	2600      	movs	r6, #0
 800768a:	4630      	mov	r0, r6
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007690:	4e2e      	ldr	r6, [pc, #184]	; (800774c <_malloc_r+0xe4>)
 8007692:	f000 f89d 	bl	80077d0 <__malloc_lock>
 8007696:	6833      	ldr	r3, [r6, #0]
 8007698:	461c      	mov	r4, r3
 800769a:	bb34      	cbnz	r4, 80076ea <_malloc_r+0x82>
 800769c:	4629      	mov	r1, r5
 800769e:	4638      	mov	r0, r7
 80076a0:	f7ff ffc2 	bl	8007628 <sbrk_aligned>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	4604      	mov	r4, r0
 80076a8:	d14d      	bne.n	8007746 <_malloc_r+0xde>
 80076aa:	6834      	ldr	r4, [r6, #0]
 80076ac:	4626      	mov	r6, r4
 80076ae:	2e00      	cmp	r6, #0
 80076b0:	d140      	bne.n	8007734 <_malloc_r+0xcc>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	4631      	mov	r1, r6
 80076b6:	4638      	mov	r0, r7
 80076b8:	eb04 0803 	add.w	r8, r4, r3
 80076bc:	f000 f878 	bl	80077b0 <_sbrk_r>
 80076c0:	4580      	cmp	r8, r0
 80076c2:	d13a      	bne.n	800773a <_malloc_r+0xd2>
 80076c4:	6821      	ldr	r1, [r4, #0]
 80076c6:	3503      	adds	r5, #3
 80076c8:	1a6d      	subs	r5, r5, r1
 80076ca:	f025 0503 	bic.w	r5, r5, #3
 80076ce:	3508      	adds	r5, #8
 80076d0:	2d0c      	cmp	r5, #12
 80076d2:	bf38      	it	cc
 80076d4:	250c      	movcc	r5, #12
 80076d6:	4629      	mov	r1, r5
 80076d8:	4638      	mov	r0, r7
 80076da:	f7ff ffa5 	bl	8007628 <sbrk_aligned>
 80076de:	3001      	adds	r0, #1
 80076e0:	d02b      	beq.n	800773a <_malloc_r+0xd2>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	442b      	add	r3, r5
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	e00e      	b.n	8007708 <_malloc_r+0xa0>
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	1b52      	subs	r2, r2, r5
 80076ee:	d41e      	bmi.n	800772e <_malloc_r+0xc6>
 80076f0:	2a0b      	cmp	r2, #11
 80076f2:	d916      	bls.n	8007722 <_malloc_r+0xba>
 80076f4:	1961      	adds	r1, r4, r5
 80076f6:	42a3      	cmp	r3, r4
 80076f8:	6025      	str	r5, [r4, #0]
 80076fa:	bf18      	it	ne
 80076fc:	6059      	strne	r1, [r3, #4]
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	bf08      	it	eq
 8007702:	6031      	streq	r1, [r6, #0]
 8007704:	5162      	str	r2, [r4, r5]
 8007706:	604b      	str	r3, [r1, #4]
 8007708:	4638      	mov	r0, r7
 800770a:	f104 060b 	add.w	r6, r4, #11
 800770e:	f000 f865 	bl	80077dc <__malloc_unlock>
 8007712:	f026 0607 	bic.w	r6, r6, #7
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	1af2      	subs	r2, r6, r3
 800771a:	d0b6      	beq.n	800768a <_malloc_r+0x22>
 800771c:	1b9b      	subs	r3, r3, r6
 800771e:	50a3      	str	r3, [r4, r2]
 8007720:	e7b3      	b.n	800768a <_malloc_r+0x22>
 8007722:	6862      	ldr	r2, [r4, #4]
 8007724:	42a3      	cmp	r3, r4
 8007726:	bf0c      	ite	eq
 8007728:	6032      	streq	r2, [r6, #0]
 800772a:	605a      	strne	r2, [r3, #4]
 800772c:	e7ec      	b.n	8007708 <_malloc_r+0xa0>
 800772e:	4623      	mov	r3, r4
 8007730:	6864      	ldr	r4, [r4, #4]
 8007732:	e7b2      	b.n	800769a <_malloc_r+0x32>
 8007734:	4634      	mov	r4, r6
 8007736:	6876      	ldr	r6, [r6, #4]
 8007738:	e7b9      	b.n	80076ae <_malloc_r+0x46>
 800773a:	230c      	movs	r3, #12
 800773c:	603b      	str	r3, [r7, #0]
 800773e:	4638      	mov	r0, r7
 8007740:	f000 f84c 	bl	80077dc <__malloc_unlock>
 8007744:	e7a1      	b.n	800768a <_malloc_r+0x22>
 8007746:	6025      	str	r5, [r4, #0]
 8007748:	e7de      	b.n	8007708 <_malloc_r+0xa0>
 800774a:	bf00      	nop
 800774c:	24014900 	.word	0x24014900

08007750 <_realloc_r>:
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	4680      	mov	r8, r0
 8007756:	4614      	mov	r4, r2
 8007758:	460e      	mov	r6, r1
 800775a:	b921      	cbnz	r1, 8007766 <_realloc_r+0x16>
 800775c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007760:	4611      	mov	r1, r2
 8007762:	f7ff bf81 	b.w	8007668 <_malloc_r>
 8007766:	b92a      	cbnz	r2, 8007774 <_realloc_r+0x24>
 8007768:	f7ff ff12 	bl	8007590 <_free_r>
 800776c:	4625      	mov	r5, r4
 800776e:	4628      	mov	r0, r5
 8007770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007774:	f000 f838 	bl	80077e8 <_malloc_usable_size_r>
 8007778:	4284      	cmp	r4, r0
 800777a:	4607      	mov	r7, r0
 800777c:	d802      	bhi.n	8007784 <_realloc_r+0x34>
 800777e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007782:	d812      	bhi.n	80077aa <_realloc_r+0x5a>
 8007784:	4621      	mov	r1, r4
 8007786:	4640      	mov	r0, r8
 8007788:	f7ff ff6e 	bl	8007668 <_malloc_r>
 800778c:	4605      	mov	r5, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d0ed      	beq.n	800776e <_realloc_r+0x1e>
 8007792:	42bc      	cmp	r4, r7
 8007794:	4622      	mov	r2, r4
 8007796:	4631      	mov	r1, r6
 8007798:	bf28      	it	cs
 800779a:	463a      	movcs	r2, r7
 800779c:	f7ff fba4 	bl	8006ee8 <memcpy>
 80077a0:	4631      	mov	r1, r6
 80077a2:	4640      	mov	r0, r8
 80077a4:	f7ff fef4 	bl	8007590 <_free_r>
 80077a8:	e7e1      	b.n	800776e <_realloc_r+0x1e>
 80077aa:	4635      	mov	r5, r6
 80077ac:	e7df      	b.n	800776e <_realloc_r+0x1e>
	...

080077b0 <_sbrk_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d06      	ldr	r5, [pc, #24]	; (80077cc <_sbrk_r+0x1c>)
 80077b4:	2300      	movs	r3, #0
 80077b6:	4604      	mov	r4, r0
 80077b8:	4608      	mov	r0, r1
 80077ba:	602b      	str	r3, [r5, #0]
 80077bc:	f000 f81e 	bl	80077fc <_sbrk>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_sbrk_r+0x1a>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_sbrk_r+0x1a>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	24014908 	.word	0x24014908

080077d0 <__malloc_lock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__malloc_lock+0x8>)
 80077d2:	f000 b811 	b.w	80077f8 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	2401490c 	.word	0x2401490c

080077dc <__malloc_unlock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_unlock+0x8>)
 80077de:	f000 b80c 	b.w	80077fa <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	2401490c 	.word	0x2401490c

080077e8 <_malloc_usable_size_r>:
 80077e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ec:	1f18      	subs	r0, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfbc      	itt	lt
 80077f2:	580b      	ldrlt	r3, [r1, r0]
 80077f4:	18c0      	addlt	r0, r0, r3
 80077f6:	4770      	bx	lr

080077f8 <__retarget_lock_acquire_recursive>:
 80077f8:	4770      	bx	lr

080077fa <__retarget_lock_release_recursive>:
 80077fa:	4770      	bx	lr

080077fc <_sbrk>:
 80077fc:	4a04      	ldr	r2, [pc, #16]	; (8007810 <_sbrk+0x14>)
 80077fe:	6811      	ldr	r1, [r2, #0]
 8007800:	4603      	mov	r3, r0
 8007802:	b909      	cbnz	r1, 8007808 <_sbrk+0xc>
 8007804:	4903      	ldr	r1, [pc, #12]	; (8007814 <_sbrk+0x18>)
 8007806:	6011      	str	r1, [r2, #0]
 8007808:	6810      	ldr	r0, [r2, #0]
 800780a:	4403      	add	r3, r0
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	4770      	bx	lr
 8007810:	24014910 	.word	0x24014910
 8007814:	24014918 	.word	0x24014918

08007818 <_init>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr

08007824 <_fini>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr
