
task_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a604  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aa90  0800aa90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800aa98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001492c  2400007c  0800ab14  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240149a8  0800ab14  000249a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000221ae  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ec1  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a90  00000000  00000000  00046120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018e8  00000000  00000000  00047bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034070  00000000  00000000  00049498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020ae5  00000000  00000000  0007d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001503c1  00000000  00000000  0009dfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ee3ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076f4  00000000  00000000  001ee400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a89c 	.word	0x0800a89c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	0800a89c 	.word	0x0800a89c

080002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000380 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000302:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000304:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000306:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000308:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800030a:	d332      	bcc.n	8000372 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800030c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800030e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000310:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000312:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000314:	d314      	bcc.n	8000340 <_CheckCase2>

08000316 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000316:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000318:	19d0      	adds	r0, r2, r7
 800031a:	bf00      	nop

0800031c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800031c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000320:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000324:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000326:	d005      	beq.n	8000334 <_CSDone>
        LDRB     R3,[R1], #+1
 8000328:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800032c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000330:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000332:	d1f3      	bne.n	800031c <_LoopCopyStraight>

08000334 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000334:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000338:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800033a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800033c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800033e:	4770      	bx	lr

08000340 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000340:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000342:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000344:	d319      	bcc.n	800037a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000346:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000348:	1b12      	subs	r2, r2, r4

0800034a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800034e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000352:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000356:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000358:	d005      	beq.n	8000366 <_No2ChunkNeeded>

0800035a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800035a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800035e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000362:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000364:	d1f9      	bne.n	800035a <_LoopCopyAfterWrapAround>

08000366 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000366:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800036a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800036c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800036e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000370:	4770      	bx	lr

08000372 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000372:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000374:	3801      	subs	r0, #1
        CMP      R0,R2
 8000376:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000378:	d2cd      	bcs.n	8000316 <_Case4>

0800037a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800037a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800037c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800037e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000380:	240133c0 	.word	0x240133c0

08000384 <__aeabi_uldivmod>:
 8000384:	b953      	cbnz	r3, 800039c <__aeabi_uldivmod+0x18>
 8000386:	b94a      	cbnz	r2, 800039c <__aeabi_uldivmod+0x18>
 8000388:	2900      	cmp	r1, #0
 800038a:	bf08      	it	eq
 800038c:	2800      	cmpeq	r0, #0
 800038e:	bf1c      	itt	ne
 8000390:	f04f 31ff 	movne.w	r1, #4294967295
 8000394:	f04f 30ff 	movne.w	r0, #4294967295
 8000398:	f000 b974 	b.w	8000684 <__aeabi_idiv0>
 800039c:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a4:	f000 f806 	bl	80003b4 <__udivmoddi4>
 80003a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr

080003b4 <__udivmoddi4>:
 80003b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b8:	9d08      	ldr	r5, [sp, #32]
 80003ba:	4604      	mov	r4, r0
 80003bc:	468e      	mov	lr, r1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d14d      	bne.n	800045e <__udivmoddi4+0xaa>
 80003c2:	428a      	cmp	r2, r1
 80003c4:	4694      	mov	ip, r2
 80003c6:	d969      	bls.n	800049c <__udivmoddi4+0xe8>
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b152      	cbz	r2, 80003e4 <__udivmoddi4+0x30>
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	f1c2 0120 	rsb	r1, r2, #32
 80003d6:	fa20 f101 	lsr.w	r1, r0, r1
 80003da:	fa0c fc02 	lsl.w	ip, ip, r2
 80003de:	ea41 0e03 	orr.w	lr, r1, r3
 80003e2:	4094      	lsls	r4, r2
 80003e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e8:	0c21      	lsrs	r1, r4, #16
 80003ea:	fbbe f6f8 	udiv	r6, lr, r8
 80003ee:	fa1f f78c 	uxth.w	r7, ip
 80003f2:	fb08 e316 	mls	r3, r8, r6, lr
 80003f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003fa:	fb06 f107 	mul.w	r1, r6, r7
 80003fe:	4299      	cmp	r1, r3
 8000400:	d90a      	bls.n	8000418 <__udivmoddi4+0x64>
 8000402:	eb1c 0303 	adds.w	r3, ip, r3
 8000406:	f106 30ff 	add.w	r0, r6, #4294967295
 800040a:	f080 811f 	bcs.w	800064c <__udivmoddi4+0x298>
 800040e:	4299      	cmp	r1, r3
 8000410:	f240 811c 	bls.w	800064c <__udivmoddi4+0x298>
 8000414:	3e02      	subs	r6, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a5b      	subs	r3, r3, r1
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000428:	fb00 f707 	mul.w	r7, r0, r7
 800042c:	42a7      	cmp	r7, r4
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x92>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	f080 810a 	bcs.w	8000650 <__udivmoddi4+0x29c>
 800043c:	42a7      	cmp	r7, r4
 800043e:	f240 8107 	bls.w	8000650 <__udivmoddi4+0x29c>
 8000442:	4464      	add	r4, ip
 8000444:	3802      	subs	r0, #2
 8000446:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044a:	1be4      	subs	r4, r4, r7
 800044c:	2600      	movs	r6, #0
 800044e:	b11d      	cbz	r5, 8000458 <__udivmoddi4+0xa4>
 8000450:	40d4      	lsrs	r4, r2
 8000452:	2300      	movs	r3, #0
 8000454:	e9c5 4300 	strd	r4, r3, [r5]
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	428b      	cmp	r3, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0xc2>
 8000462:	2d00      	cmp	r5, #0
 8000464:	f000 80ef 	beq.w	8000646 <__udivmoddi4+0x292>
 8000468:	2600      	movs	r6, #0
 800046a:	e9c5 0100 	strd	r0, r1, [r5]
 800046e:	4630      	mov	r0, r6
 8000470:	4631      	mov	r1, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	fab3 f683 	clz	r6, r3
 800047a:	2e00      	cmp	r6, #0
 800047c:	d14a      	bne.n	8000514 <__udivmoddi4+0x160>
 800047e:	428b      	cmp	r3, r1
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xd4>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 80f9 	bhi.w	800067a <__udivmoddi4+0x2c6>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb61 0303 	sbc.w	r3, r1, r3
 800048e:	2001      	movs	r0, #1
 8000490:	469e      	mov	lr, r3
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e0      	beq.n	8000458 <__udivmoddi4+0xa4>
 8000496:	e9c5 4e00 	strd	r4, lr, [r5]
 800049a:	e7dd      	b.n	8000458 <__udivmoddi4+0xa4>
 800049c:	b902      	cbnz	r2, 80004a0 <__udivmoddi4+0xec>
 800049e:	deff      	udf	#255	; 0xff
 80004a0:	fab2 f282 	clz	r2, r2
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	f040 8092 	bne.w	80005ce <__udivmoddi4+0x21a>
 80004aa:	eba1 010c 	sub.w	r1, r1, ip
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f fe8c 	uxth.w	lr, ip
 80004b6:	2601      	movs	r6, #1
 80004b8:	0c20      	lsrs	r0, r4, #16
 80004ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80004be:	fb07 1113 	mls	r1, r7, r3, r1
 80004c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c6:	fb0e f003 	mul.w	r0, lr, r3
 80004ca:	4288      	cmp	r0, r1
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x12c>
 80004ce:	eb1c 0101 	adds.w	r1, ip, r1
 80004d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d6:	d202      	bcs.n	80004de <__udivmoddi4+0x12a>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f200 80cb 	bhi.w	8000674 <__udivmoddi4+0x2c0>
 80004de:	4643      	mov	r3, r8
 80004e0:	1a09      	subs	r1, r1, r0
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e8:	fb07 1110 	mls	r1, r7, r0, r1
 80004ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004f0:	fb0e fe00 	mul.w	lr, lr, r0
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x156>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d202      	bcs.n	8000508 <__udivmoddi4+0x154>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f200 80bb 	bhi.w	800067e <__udivmoddi4+0x2ca>
 8000508:	4608      	mov	r0, r1
 800050a:	eba4 040e 	sub.w	r4, r4, lr
 800050e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x9a>
 8000514:	f1c6 0720 	rsb	r7, r6, #32
 8000518:	40b3      	lsls	r3, r6
 800051a:	fa22 fc07 	lsr.w	ip, r2, r7
 800051e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000522:	fa20 f407 	lsr.w	r4, r0, r7
 8000526:	fa01 f306 	lsl.w	r3, r1, r6
 800052a:	431c      	orrs	r4, r3
 800052c:	40f9      	lsrs	r1, r7
 800052e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000532:	fa00 f306 	lsl.w	r3, r0, r6
 8000536:	fbb1 f8f9 	udiv	r8, r1, r9
 800053a:	0c20      	lsrs	r0, r4, #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fb09 1118 	mls	r1, r9, r8, r1
 8000544:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000548:	fb08 f00e 	mul.w	r0, r8, lr
 800054c:	4288      	cmp	r0, r1
 800054e:	fa02 f206 	lsl.w	r2, r2, r6
 8000552:	d90b      	bls.n	800056c <__udivmoddi4+0x1b8>
 8000554:	eb1c 0101 	adds.w	r1, ip, r1
 8000558:	f108 3aff 	add.w	sl, r8, #4294967295
 800055c:	f080 8088 	bcs.w	8000670 <__udivmoddi4+0x2bc>
 8000560:	4288      	cmp	r0, r1
 8000562:	f240 8085 	bls.w	8000670 <__udivmoddi4+0x2bc>
 8000566:	f1a8 0802 	sub.w	r8, r8, #2
 800056a:	4461      	add	r1, ip
 800056c:	1a09      	subs	r1, r1, r0
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb1 f0f9 	udiv	r0, r1, r9
 8000574:	fb09 1110 	mls	r1, r9, r0, r1
 8000578:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800057c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000580:	458e      	cmp	lr, r1
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x1e2>
 8000584:	eb1c 0101 	adds.w	r1, ip, r1
 8000588:	f100 34ff 	add.w	r4, r0, #4294967295
 800058c:	d26c      	bcs.n	8000668 <__udivmoddi4+0x2b4>
 800058e:	458e      	cmp	lr, r1
 8000590:	d96a      	bls.n	8000668 <__udivmoddi4+0x2b4>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800059a:	fba0 9402 	umull	r9, r4, r0, r2
 800059e:	eba1 010e 	sub.w	r1, r1, lr
 80005a2:	42a1      	cmp	r1, r4
 80005a4:	46c8      	mov	r8, r9
 80005a6:	46a6      	mov	lr, r4
 80005a8:	d356      	bcc.n	8000658 <__udivmoddi4+0x2a4>
 80005aa:	d053      	beq.n	8000654 <__udivmoddi4+0x2a0>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x212>
 80005ae:	ebb3 0208 	subs.w	r2, r3, r8
 80005b2:	eb61 010e 	sbc.w	r1, r1, lr
 80005b6:	fa01 f707 	lsl.w	r7, r1, r7
 80005ba:	fa22 f306 	lsr.w	r3, r2, r6
 80005be:	40f1      	lsrs	r1, r6
 80005c0:	431f      	orrs	r7, r3
 80005c2:	e9c5 7100 	strd	r7, r1, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	40d8      	lsrs	r0, r3
 80005d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
 80005dc:	4091      	lsls	r1, r2
 80005de:	4301      	orrs	r1, r0
 80005e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e4:	fa1f fe8c 	uxth.w	lr, ip
 80005e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80005ec:	fb07 3610 	mls	r6, r7, r0, r3
 80005f0:	0c0b      	lsrs	r3, r1, #16
 80005f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f6:	fb00 f60e 	mul.w	r6, r0, lr
 80005fa:	429e      	cmp	r6, r3
 80005fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000600:	d908      	bls.n	8000614 <__udivmoddi4+0x260>
 8000602:	eb1c 0303 	adds.w	r3, ip, r3
 8000606:	f100 38ff 	add.w	r8, r0, #4294967295
 800060a:	d22f      	bcs.n	800066c <__udivmoddi4+0x2b8>
 800060c:	429e      	cmp	r6, r3
 800060e:	d92d      	bls.n	800066c <__udivmoddi4+0x2b8>
 8000610:	3802      	subs	r0, #2
 8000612:	4463      	add	r3, ip
 8000614:	1b9b      	subs	r3, r3, r6
 8000616:	b289      	uxth	r1, r1
 8000618:	fbb3 f6f7 	udiv	r6, r3, r7
 800061c:	fb07 3316 	mls	r3, r7, r6, r3
 8000620:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000624:	fb06 f30e 	mul.w	r3, r6, lr
 8000628:	428b      	cmp	r3, r1
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x28a>
 800062c:	eb1c 0101 	adds.w	r1, ip, r1
 8000630:	f106 38ff 	add.w	r8, r6, #4294967295
 8000634:	d216      	bcs.n	8000664 <__udivmoddi4+0x2b0>
 8000636:	428b      	cmp	r3, r1
 8000638:	d914      	bls.n	8000664 <__udivmoddi4+0x2b0>
 800063a:	3e02      	subs	r6, #2
 800063c:	4461      	add	r1, ip
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000644:	e738      	b.n	80004b8 <__udivmoddi4+0x104>
 8000646:	462e      	mov	r6, r5
 8000648:	4628      	mov	r0, r5
 800064a:	e705      	b.n	8000458 <__udivmoddi4+0xa4>
 800064c:	4606      	mov	r6, r0
 800064e:	e6e3      	b.n	8000418 <__udivmoddi4+0x64>
 8000650:	4618      	mov	r0, r3
 8000652:	e6f8      	b.n	8000446 <__udivmoddi4+0x92>
 8000654:	454b      	cmp	r3, r9
 8000656:	d2a9      	bcs.n	80005ac <__udivmoddi4+0x1f8>
 8000658:	ebb9 0802 	subs.w	r8, r9, r2
 800065c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000660:	3801      	subs	r0, #1
 8000662:	e7a3      	b.n	80005ac <__udivmoddi4+0x1f8>
 8000664:	4646      	mov	r6, r8
 8000666:	e7ea      	b.n	800063e <__udivmoddi4+0x28a>
 8000668:	4620      	mov	r0, r4
 800066a:	e794      	b.n	8000596 <__udivmoddi4+0x1e2>
 800066c:	4640      	mov	r0, r8
 800066e:	e7d1      	b.n	8000614 <__udivmoddi4+0x260>
 8000670:	46d0      	mov	r8, sl
 8000672:	e77b      	b.n	800056c <__udivmoddi4+0x1b8>
 8000674:	3b02      	subs	r3, #2
 8000676:	4461      	add	r1, ip
 8000678:	e732      	b.n	80004e0 <__udivmoddi4+0x12c>
 800067a:	4630      	mov	r0, r6
 800067c:	e709      	b.n	8000492 <__udivmoddi4+0xde>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	e742      	b.n	800050a <__udivmoddi4+0x156>

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fc67 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f855 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f91d 	bl	80008d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069a:	f000 f8c7 	bl	800082c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800069e:	f000 f911 	bl	80008c4 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  //Enable CYCCNT counter to create timestamp of the Segger
  DWT_CTRL |= ( 1 << 0);
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <main+0x9c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <main+0x9c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80006ae:	f007 fd47 	bl	8008140 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80006b2:	f008 fe31 	bl	8009318 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <main+0xa0>)
 80006c2:	22c8      	movs	r2, #200	; 0xc8
 80006c4:	4919      	ldr	r1, [pc, #100]	; (800072c <main+0xa4>)
 80006c6:	481a      	ldr	r0, [pc, #104]	; (8000730 <main+0xa8>)
 80006c8:	f005 fdfe 	bl	80062c8 <xTaskCreate>
 80006cc:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d00a      	beq.n	80006ea <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d8:	f383 8811 	msr	BASEPRI, r3
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006e6:	bf00      	nop
 80006e8:	e7fe      	b.n	80006e8 <main+0x60>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2302      	movs	r3, #2
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <main+0xac>)
 80006f4:	22c8      	movs	r2, #200	; 0xc8
 80006f6:	4910      	ldr	r1, [pc, #64]	; (8000738 <main+0xb0>)
 80006f8:	4810      	ldr	r0, [pc, #64]	; (800073c <main+0xb4>)
 80006fa:	f005 fde5 	bl	80062c8 <xTaskCreate>
 80006fe:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d00a      	beq.n	800071c <main+0x94>
        __asm volatile
 8000706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070a:	f383 8811 	msr	BASEPRI, r3
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	f3bf 8f4f 	dsb	sy
 8000716:	60fb      	str	r3, [r7, #12]
    }
 8000718:	bf00      	nop
 800071a:	e7fe      	b.n	800071a <main+0x92>

  //start the freertos scheduler
  vTaskStartScheduler();
 800071c:	f005 ff5e 	bl	80065dc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000720:	e7fe      	b.n	8000720 <main+0x98>
 8000722:	bf00      	nop
 8000724:	e0001000 	.word	0xe0001000
 8000728:	0800a8b4 	.word	0x0800a8b4
 800072c:	0800a8cc 	.word	0x0800a8cc
 8000730:	08000b09 	.word	0x08000b09
 8000734:	0800a8d4 	.word	0x0800a8d4
 8000738:	0800a8ec 	.word	0x0800a8ec
 800073c:	08000b19 	.word	0x08000b19

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	; 0x70
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	224c      	movs	r2, #76	; 0x4c
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f009 fba2 	bl	8009e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2220      	movs	r2, #32
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f009 fb9c 	bl	8009e98 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <SystemClock_Config+0xe4>)
 8000762:	f04f 32ff 	mov.w	r2, #4294967295
 8000766:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800076a:	2004      	movs	r0, #4
 800076c:	f000 fefe 	bl	800156c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <SystemClock_Config+0xe8>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a2b      	ldr	r2, [pc, #172]	; (8000828 <SystemClock_Config+0xe8>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <SystemClock_Config+0xe8>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078c:	bf00      	nop
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <SystemClock_Config+0xe8>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800079a:	d1f8      	bne.n	800078e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800079c:	2321      	movs	r3, #33	; 0x21
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a6:	2301      	movs	r3, #1
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007b6:	2318      	movs	r3, #24
 80007b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c6:	230c      	movs	r3, #12
 80007c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 ff22 	bl	8001620 <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007e2:	f000 f9b3 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	233f      	movs	r3, #63	; 0x3f
 80007e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2303      	movs	r3, #3
 80007ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fb3a 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000816:	f000 f999 	bl	8000b4c <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3770      	adds	r7, #112	; 0x70
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	58024400 	.word	0x58024400
 8000828:	58024800 	.word	0x58024800

0800082c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000832:	4a23      	ldr	r2, [pc, #140]	; (80008c0 <MX_USART3_UART_Init+0x94>)
 8000834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_USART3_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_USART3_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USART3_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000876:	f003 ff8d 	bl	8004794 <HAL_UART_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f964 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_USART3_UART_Init+0x90>)
 8000888:	f005 f893 	bl	80059b2 <HAL_UARTEx_SetTxFifoThreshold>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000892:	f000 f95b 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <MX_USART3_UART_Init+0x90>)
 800089a:	f005 f8c8 	bl	8005a2e <HAL_UARTEx_SetRxFifoThreshold>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008a4:	f000 f952 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_USART3_UART_Init+0x90>)
 80008aa:	f005 f849 	bl	8005940 <HAL_UARTEx_DisableFifoMode>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 f94a 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000098 	.word	0x24000098
 80008c0:	40004800 	.word	0x40004800

080008c4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b80      	ldr	r3, [pc, #512]	; (8000aec <MX_GPIO_Init+0x218>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	4a7e      	ldr	r2, [pc, #504]	; (8000aec <MX_GPIO_Init+0x218>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008fa:	4b7c      	ldr	r3, [pc, #496]	; (8000aec <MX_GPIO_Init+0x218>)
 80008fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	623b      	str	r3, [r7, #32]
 8000906:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000908:	4b78      	ldr	r3, [pc, #480]	; (8000aec <MX_GPIO_Init+0x218>)
 800090a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090e:	4a77      	ldr	r2, [pc, #476]	; (8000aec <MX_GPIO_Init+0x218>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000918:	4b74      	ldr	r3, [pc, #464]	; (8000aec <MX_GPIO_Init+0x218>)
 800091a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	4b71      	ldr	r3, [pc, #452]	; (8000aec <MX_GPIO_Init+0x218>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092c:	4a6f      	ldr	r2, [pc, #444]	; (8000aec <MX_GPIO_Init+0x218>)
 800092e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000932:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000936:	4b6d      	ldr	r3, [pc, #436]	; (8000aec <MX_GPIO_Init+0x218>)
 8000938:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b69      	ldr	r3, [pc, #420]	; (8000aec <MX_GPIO_Init+0x218>)
 8000946:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094a:	4a68      	ldr	r2, [pc, #416]	; (8000aec <MX_GPIO_Init+0x218>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000954:	4b65      	ldr	r3, [pc, #404]	; (8000aec <MX_GPIO_Init+0x218>)
 8000956:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	4b62      	ldr	r3, [pc, #392]	; (8000aec <MX_GPIO_Init+0x218>)
 8000964:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000968:	4a60      	ldr	r2, [pc, #384]	; (8000aec <MX_GPIO_Init+0x218>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <MX_GPIO_Init+0x218>)
 8000974:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000980:	4b5a      	ldr	r3, [pc, #360]	; (8000aec <MX_GPIO_Init+0x218>)
 8000982:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000986:	4a59      	ldr	r2, [pc, #356]	; (8000aec <MX_GPIO_Init+0x218>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000990:	4b56      	ldr	r3, [pc, #344]	; (8000aec <MX_GPIO_Init+0x218>)
 8000992:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <MX_GPIO_Init+0x218>)
 80009a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a4:	4a51      	ldr	r2, [pc, #324]	; (8000aec <MX_GPIO_Init+0x218>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ae:	4b4f      	ldr	r3, [pc, #316]	; (8000aec <MX_GPIO_Init+0x218>)
 80009b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009bc:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <MX_GPIO_Init+0x218>)
 80009be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c2:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <MX_GPIO_Init+0x218>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009cc:	4b47      	ldr	r3, [pc, #284]	; (8000aec <MX_GPIO_Init+0x218>)
 80009ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e0:	4843      	ldr	r0, [pc, #268]	; (8000af0 <MX_GPIO_Init+0x21c>)
 80009e2:	f000 fda9 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 0101 	movw	r1, #16385	; 0x4001
 80009ec:	4841      	ldr	r0, [pc, #260]	; (8000af4 <MX_GPIO_Init+0x220>)
 80009ee:	f000 fda3 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2102      	movs	r1, #2
 80009f6:	4840      	ldr	r0, [pc, #256]	; (8000af8 <MX_GPIO_Init+0x224>)
 80009f8:	f000 fd9e 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	483a      	ldr	r0, [pc, #232]	; (8000afc <MX_GPIO_Init+0x228>)
 8000a12:	f000 fbe1 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4830      	ldr	r0, [pc, #192]	; (8000af0 <MX_GPIO_Init+0x21c>)
 8000a30:	f000 fbd2 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4829      	ldr	r0, [pc, #164]	; (8000af4 <MX_GPIO_Init+0x220>)
 8000a4e:	f000 fbc3 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4826      	ldr	r0, [pc, #152]	; (8000b00 <MX_GPIO_Init+0x22c>)
 8000a68:	f000 fbb6 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4820      	ldr	r0, [pc, #128]	; (8000b04 <MX_GPIO_Init+0x230>)
 8000a82:	f000 fba9 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a98:	230a      	movs	r3, #10
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_GPIO_Init+0x230>)
 8000aa4:	f000 fb98 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000aa8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4810      	ldr	r0, [pc, #64]	; (8000b04 <MX_GPIO_Init+0x230>)
 8000ac2:	f000 fb89 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_GPIO_Init+0x224>)
 8000ade:	f000 fb7b 	bl	80011d8 <HAL_GPIO_Init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3738      	adds	r7, #56	; 0x38
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58021400 	.word	0x58021400
 8000af4:	58020400 	.word	0x58020400
 8000af8:	58021000 	.word	0x58021000
 8000afc:	58020800 	.word	0x58020800
 8000b00:	58021800 	.word	0x58021800
 8000b04:	58020000 	.word	0x58020000

08000b08 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char*)parameters);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f009 fa37 	bl	8009f84 <puts>
 8000b16:	e7fb      	b.n	8000b10 <task1_handler+0x8>

08000b18 <task2_handler>:
//		taskYIELD();
	}
}
static void task2_handler(void* parameters){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char *)parameters);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f009 fa2f 	bl	8009f84 <puts>
 8000b26:	e7fb      	b.n	8000b20 <task2_handler+0x8>

08000b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3a:	f000 fa4d 	bl	8000fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40001000 	.word	0x40001000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_MspInit+0x30>)
 8000b60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x30>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x30>)
 8000b70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b7c:	f006 ff5c 	bl	8007a38 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	58024400 	.word	0x58024400

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ba      	sub	sp, #232	; 0xe8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	22c0      	movs	r2, #192	; 0xc0
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f009 f973 	bl	8009e98 <memset>
  if(huart->Instance==USART3)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <HAL_UART_MspInit+0xc8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d146      	bne.n	8000c4a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bbc:	f04f 0202 	mov.w	r2, #2
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fd24 	bl	8002620 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bde:	f7ff ffb5 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_UART_MspInit+0xcc>)
 8000be4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <HAL_UART_MspInit+0xcc>)
 8000bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0xcc>)
 8000bf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0xcc>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0xcc>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0xcc>)
 8000c12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0xd0>)
 8000c46:	f000 fac7 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	37e8      	adds	r7, #232	; 0xe8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004800 	.word	0x40004800
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	58020c00 	.word	0x58020c00

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b090      	sub	sp, #64	; 0x40
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d827      	bhi.n	8000cbe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	2036      	movs	r0, #54	; 0x36
 8000c74:	f000 fa88 	bl	8001188 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c78:	2036      	movs	r0, #54	; 0x36
 8000c7a:	f000 fa9f 	bl	80011bc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c7e:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <HAL_InitTick+0xc4>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_InitTick+0xc8>)
 8000c86:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c8a:	4a27      	ldr	r2, [pc, #156]	; (8000d28 <HAL_InitTick+0xc8>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <HAL_InitTick+0xc8>)
 8000c96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca2:	f107 0210 	add.w	r2, r7, #16
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fc75 	bl	800259c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d106      	bne.n	8000cca <HAL_InitTick+0x6a>
 8000cbc:	e001      	b.n	8000cc2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e02b      	b.n	8000d1a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc2:	f001 fc3f 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8000cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000cc8:	e004      	b.n	8000cd4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cca:	f001 fc3b 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <HAL_InitTick+0xcc>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <HAL_InitTick+0xd0>)
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_InitTick+0xd4>)
 8000ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0xd0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <HAL_InitTick+0xd0>)
 8000d04:	f003 fa6c 	bl	80041e0 <HAL_TIM_Base_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <HAL_InitTick+0xd0>)
 8000d10:	f003 fac8 	bl	80042a4 <HAL_TIM_Base_Start_IT>
 8000d14:	4603      	mov	r3, r0
 8000d16:	e000      	b.n	8000d1a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3740      	adds	r7, #64	; 0x40
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000008 	.word	0x24000008
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	2400012c 	.word	0x2400012c
 8000d34:	40001000 	.word	0x40001000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM6_DAC_IRQHandler+0x10>)
 8000d6a:	f003 fb13 	bl	8004394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2400012c 	.word	0x2400012c

08000d78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00a      	b.n	8000da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8a:	f3af 8000 	nop.w
 8000d8e:	4601      	mov	r1, r0
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	b2ca      	uxtb	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf0      	blt.n	8000d8a <_read+0x12>
  }

  return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <SystemInit+0xd0>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <SystemInit+0xd0>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <SystemInit+0xd4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d807      	bhi.n	8000e4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <SystemInit+0xd4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 030f 	bic.w	r3, r3, #15
 8000e44:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <SystemInit+0xd4>)
 8000e46:	f043 0303 	orr.w	r3, r3, #3
 8000e4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <SystemInit+0xd8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <SystemInit+0xd8>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <SystemInit+0xd8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <SystemInit+0xd8>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4924      	ldr	r1, [pc, #144]	; (8000ef4 <SystemInit+0xd8>)
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <SystemInit+0xdc>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <SystemInit+0xd4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <SystemInit+0xd4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f023 030f 	bic.w	r3, r3, #15
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <SystemInit+0xd4>)
 8000e80:	f043 0303 	orr.w	r3, r3, #3
 8000e84:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <SystemInit+0xd8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <SystemInit+0xd8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <SystemInit+0xd8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <SystemInit+0xd8>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <SystemInit+0xe0>)
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <SystemInit+0xd8>)
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <SystemInit+0xe4>)
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <SystemInit+0xd8>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <SystemInit+0xe8>)
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <SystemInit+0xd8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <SystemInit+0xd8>)
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <SystemInit+0xe8>)
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <SystemInit+0xd8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <SystemInit+0xd8>)
 8000ebe:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <SystemInit+0xe8>)
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <SystemInit+0xd8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <SystemInit+0xd8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <SystemInit+0xd8>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <SystemInit+0xd8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <SystemInit+0xec>)
 8000edc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ee0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00
 8000ef0:	52002000 	.word	0x52002000
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000efc:	02020200 	.word	0x02020200
 8000f00:	01ff0000 	.word	0x01ff0000
 8000f04:	01010280 	.word	0x01010280
 8000f08:	52004000 	.word	0x52004000

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f10:	f7ff ff84 	bl	8000e1c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f16:	490d      	ldr	r1, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	; (8000f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f008 ff6b 	bl	8009e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fba3 	bl	8000688 <main>
  bx  lr
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f4c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8000f50:	0800aa98 	.word	0x0800aa98
  ldr r2, =_sbss
 8000f54:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8000f58:	240149a8 	.word	0x240149a8

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 f903 	bl	8001172 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f6c:	f001 f940 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_Init+0x68>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	0a1b      	lsrs	r3, r3, #8
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	4913      	ldr	r1, [pc, #76]	; (8000fcc <HAL_Init+0x6c>)
 8000f7e:	5ccb      	ldrb	r3, [r1, r3]
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_Init+0x68>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_Init+0x6c>)
 8000f94:	5cd3      	ldrb	r3, [r2, r3]
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <HAL_Init+0x70>)
 8000fa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_Init+0x74>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff fe58 	bl	8000c60 <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e002      	b.n	8000fc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fba:	f7ff fdcd 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	0800a9c4 	.word	0x0800a9c4
 8000fd0:	24000004 	.word	0x24000004
 8000fd4:	24000000 	.word	0x24000000

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2400000c 	.word	0x2400000c
 8000ffc:	24000178 	.word	0x24000178

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	24000178 	.word	0x24000178

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <__NVIC_SetPriorityGrouping+0x40>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	4313      	orrs	r3, r2
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x40>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00
 800105c:	05fa0000 	.word	0x05fa0000

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4c 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001196:	f7ff ff63 	bl	8001060 <__NVIC_GetPriorityGrouping>
 800119a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff ffb3 	bl	800110c <NVIC_EncodePriority>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff82 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff56 	bl	800107c <__NVIC_EnableIRQ>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011e6:	4b89      	ldr	r3, [pc, #548]	; (800140c <HAL_GPIO_Init+0x234>)
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ea:	e194      	b.n	8001516 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8186 	beq.w	8001510 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <HAL_GPIO_Init+0x44>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b03      	cmp	r3, #3
 8001288:	d017      	beq.n	80012ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d123      	bne.n	800130e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	69b9      	ldr	r1, [r7, #24]
 800130a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0203 	and.w	r2, r3, #3
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80e0 	beq.w	8001510 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x238>)
 8001352:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001356:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <HAL_GPIO_Init+0x238>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_GPIO_Init+0x238>)
 8001362:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_GPIO_Init+0x23c>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_GPIO_Init+0x240>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d052      	beq.n	8001440 <HAL_GPIO_Init+0x268>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_GPIO_Init+0x244>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d031      	beq.n	8001406 <HAL_GPIO_Init+0x22e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_GPIO_Init+0x248>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d02b      	beq.n	8001402 <HAL_GPIO_Init+0x22a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_GPIO_Init+0x24c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d025      	beq.n	80013fe <HAL_GPIO_Init+0x226>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_GPIO_Init+0x250>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x222>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_GPIO_Init+0x254>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x21e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x258>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x21a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_GPIO_Init+0x25c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x216>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_GPIO_Init+0x260>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x212>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_GPIO_Init+0x264>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x20e>
 80013e2:	2309      	movs	r3, #9
 80013e4:	e02d      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013e6:	230a      	movs	r3, #10
 80013e8:	e02b      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013ea:	2308      	movs	r3, #8
 80013ec:	e029      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013ee:	2307      	movs	r3, #7
 80013f0:	e027      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013f2:	2306      	movs	r3, #6
 80013f4:	e025      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013f6:	2305      	movs	r3, #5
 80013f8:	e023      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e021      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013fe:	2303      	movs	r3, #3
 8001400:	e01f      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 8001402:	2302      	movs	r3, #2
 8001404:	e01d      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 8001406:	2301      	movs	r3, #1
 8001408:	e01b      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 800140a:	bf00      	nop
 800140c:	58000080 	.word	0x58000080
 8001410:	58024400 	.word	0x58024400
 8001414:	58000400 	.word	0x58000400
 8001418:	58020000 	.word	0x58020000
 800141c:	58020400 	.word	0x58020400
 8001420:	58020800 	.word	0x58020800
 8001424:	58020c00 	.word	0x58020c00
 8001428:	58021000 	.word	0x58021000
 800142c:	58021400 	.word	0x58021400
 8001430:	58021800 	.word	0x58021800
 8001434:	58021c00 	.word	0x58021c00
 8001438:	58022000 	.word	0x58022000
 800143c:	58022400 	.word	0x58022400
 8001440:	2300      	movs	r3, #0
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001452:	4938      	ldr	r1, [pc, #224]	; (8001534 <HAL_GPIO_Init+0x35c>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	3301      	adds	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	f47f ae63 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3724      	adds	r7, #36	; 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	58000400 	.word	0x58000400

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	2b06      	cmp	r3, #6
 800157e:	d00a      	beq.n	8001596 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d001      	beq.n	8001592 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e040      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e03e      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800159e:	491f      	ldr	r1, [pc, #124]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015a6:	f7ff fd2b 	bl	8001000 <HAL_GetTick>
 80015aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015ac:	e009      	b.n	80015c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015ae:	f7ff fd27 	bl	8001000 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015bc:	d901      	bls.n	80015c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e028      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	d1ee      	bne.n	80015ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b1e      	cmp	r3, #30
 80015d4:	d008      	beq.n	80015e8 <HAL_PWREx_ConfigSupply+0x7c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b2e      	cmp	r3, #46	; 0x2e
 80015da:	d005      	beq.n	80015e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b1d      	cmp	r3, #29
 80015e0:	d002      	beq.n	80015e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b2d      	cmp	r3, #45	; 0x2d
 80015e6:	d114      	bne.n	8001612 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015e8:	f7ff fd0a 	bl	8001000 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015ee:	e009      	b.n	8001604 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015f0:	f7ff fd06 	bl	8001000 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015fe:	d901      	bls.n	8001604 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e007      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d1ee      	bne.n	80015f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024800 	.word	0x58024800

08001620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	f000 bc1f 	b.w	8001e72 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80b3 	beq.w	80017a8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001642:	4b95      	ldr	r3, [pc, #596]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	2b10      	cmp	r3, #16
 8001656:	d007      	beq.n	8001668 <HAL_RCC_OscConfig+0x48>
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	2b18      	cmp	r3, #24
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x64>
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d10d      	bne.n	8001684 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8098 	beq.w	80017a6 <HAL_RCC_OscConfig+0x186>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 8093 	bne.w	80017a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e3f6      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x7c>
 800168e:	4b82      	ldr	r3, [pc, #520]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a81      	ldr	r2, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e058      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d112      	bne.n	80016ca <HAL_RCC_OscConfig+0xaa>
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7b      	ldr	r2, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b79      	ldr	r3, [pc, #484]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a78      	ldr	r2, [pc, #480]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a75      	ldr	r2, [pc, #468]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e041      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d2:	d112      	bne.n	80016fa <HAL_RCC_OscConfig+0xda>
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6f      	ldr	r2, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6c      	ldr	r2, [pc, #432]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a69      	ldr	r2, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e029      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001702:	d112      	bne.n	800172a <HAL_RCC_OscConfig+0x10a>
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a63      	ldr	r2, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800170a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a60      	ldr	r2, [pc, #384]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a5d      	ldr	r2, [pc, #372]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e011      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5a      	ldr	r2, [pc, #360]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800173c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b55      	ldr	r3, [pc, #340]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a54      	ldr	r2, [pc, #336]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001748:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800174c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d013      	beq.n	800177e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fc53 	bl	8001000 <HAL_GetTick>
 800175a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175e:	f7ff fc4f 	bl	8001000 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e380      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001770:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x13e>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fc3f 	bl	8001000 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001786:	f7ff fc3b 	bl	8001000 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	; 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e36c      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x166>
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 808c 	beq.w	80018ce <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_RCC_OscConfig+0x1bc>
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	2b18      	cmp	r3, #24
 80017d0:	d137      	bne.n	8001842 <HAL_RCC_OscConfig+0x222>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d132      	bne.n	8001842 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x1d4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e33e      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0219 	bic.w	r2, r3, #25
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4925      	ldr	r1, [pc, #148]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fbfb 	bl	8001000 <HAL_GetTick>
 800180a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fbf7 	bl	8001000 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e328      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	4917      	ldr	r1, [pc, #92]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	e045      	b.n	80018ce <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d028      	beq.n	800189c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0219 	bic.w	r2, r3, #25
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4910      	ldr	r1, [pc, #64]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fbd0 	bl	8001000 <HAL_GetTick>
 8001860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fbcc 	bl	8001000 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2fd      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	061b      	lsls	r3, r3, #24
 8001890:	4901      	ldr	r1, [pc, #4]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e01a      	b.n	80018ce <HAL_RCC_OscConfig+0x2ae>
 8001898:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189c:	4b97      	ldr	r3, [pc, #604]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a96      	ldr	r2, [pc, #600]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fbaa 	bl	8001000 <HAL_GetTick>
 80018ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fba6 	bl	8001000 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e2d7      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c2:	4b8e      	ldr	r3, [pc, #568]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d06a      	beq.n	80019b0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e4:	4b85      	ldr	r3, [pc, #532]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_OscConfig+0x2e0>
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	d11b      	bne.n	800192e <HAL_RCC_OscConfig+0x30e>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d116      	bne.n	800192e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001900:	4b7e      	ldr	r3, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x2f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b80      	cmp	r3, #128	; 0x80
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e2ac      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	4975      	ldr	r1, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800192c:	e040      	b.n	80019b0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d023      	beq.n	800197e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001936:	4b71      	ldr	r3, [pc, #452]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a70      	ldr	r2, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fb5d 	bl	8001000 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800194a:	f7ff fb59 	bl	8001000 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e28a      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	4961      	ldr	r1, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e018      	b.n	80019b0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800197e:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5e      	ldr	r2, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fb39 	bl	8001000 <HAL_GetTick>
 800198e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001992:	f7ff fb35 	bl	8001000 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e266      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019a4:	4b55      	ldr	r3, [pc, #340]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d036      	beq.n	8001a2a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fb16 	bl	8001000 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fb12 	bl	8001000 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e243      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ea:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x3b8>
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fc:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff fafc 	bl	8001000 <HAL_GetTick>
 8001a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff faf8 	bl	8001000 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e229      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d036      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fad9 	bl	8001000 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a52:	f7ff fad5 	bl	8001000 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e206      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x432>
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fabf 	bl	8001000 <HAL_GetTick>
 8001a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a86:	f7ff fabb 	bl	8001000 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1ec      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80af 	beq.w	8001c10 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x4e0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x4e0>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001abe:	f7ff fa9f 	bl	8001000 <HAL_GetTick>
 8001ac2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7ff fa9b 	bl	8001000 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b64      	cmp	r3, #100	; 0x64
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1cc      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x4e0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4e4>
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a02      	ldr	r2, [pc, #8]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	e05b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001afa:	bf00      	nop
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58024800 	.word	0x58024800
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x512>
 8001b0c:	4b9d      	ldr	r3, [pc, #628]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a9c      	ldr	r2, [pc, #624]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	4b9a      	ldr	r3, [pc, #616]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a99      	ldr	r2, [pc, #612]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	4b97      	ldr	r3, [pc, #604]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a96      	ldr	r2, [pc, #600]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b30:	e03f      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d112      	bne.n	8001b60 <HAL_RCC_OscConfig+0x540>
 8001b3a:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a91      	ldr	r2, [pc, #580]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	4b8f      	ldr	r3, [pc, #572]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	4a8e      	ldr	r2, [pc, #568]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a8b      	ldr	r2, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	e028      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b85      	cmp	r3, #133	; 0x85
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x56e>
 8001b68:	4b86      	ldr	r3, [pc, #536]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a85      	ldr	r2, [pc, #532]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b83      	ldr	r3, [pc, #524]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a82      	ldr	r2, [pc, #520]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a7f      	ldr	r2, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	e011      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a7c      	ldr	r2, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a79      	ldr	r2, [pc, #484]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	4b77      	ldr	r3, [pc, #476]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a76      	ldr	r2, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d015      	beq.n	8001be6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff fa21 	bl	8001000 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fa1d 	bl	8001000 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e14c      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ee      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x5a2>
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff fa0b 	bl	8001000 <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fa07 	bl	8001000 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e136      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c04:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ee      	bne.n	8001bee <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 812b 	beq.w	8001e70 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c22:	2b18      	cmp	r3, #24
 8001c24:	f000 80bb 	beq.w	8001d9e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	f040 8095 	bne.w	8001d5c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a53      	ldr	r2, [pc, #332]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f9df 	bl	8001000 <HAL_GetTick>
 8001c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff f9db 	bl	8001000 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e10c      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c58:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x768>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	430a      	orrs	r2, r1
 8001c78:	4942      	ldr	r1, [pc, #264]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	628b      	str	r3, [r1, #40]	; 0x28
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	025b      	lsls	r3, r3, #9
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001cae:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cb4:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_OscConfig+0x76c>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ccc:	00d2      	lsls	r2, r2, #3
 8001cce:	492d      	ldr	r1, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f023 020c 	bic.w	r2, r3, #12
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4928      	ldr	r1, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ce6:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f023 0202 	bic.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4924      	ldr	r1, [pc, #144]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f964 	bl	8001000 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f960 	bl	8001000 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e091      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x71c>
 8001d5a:	e089      	b.n	8001e70 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f94a 	bl	8001000 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f946 	bl	8001000 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e077      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
 8001d82:	bf00      	nop
 8001d84:	58024400 	.word	0x58024400
 8001d88:	fffffc0c 	.word	0xfffffc0c
 8001d8c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e9      	bne.n	8001d70 <HAL_RCC_OscConfig+0x750>
 8001d9c:	e068      	b.n	8001e70 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d031      	beq.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d12a      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d122      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d11a      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0a5b      	lsrs	r3, r3, #9
 8001de4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d111      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d108      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0e1b      	lsrs	r3, r3, #24
 8001e08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e02b      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e24:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d01f      	beq.n	8001e70 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e3c:	f7ff f8e0 	bl	8001000 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e42:	bf00      	nop
 8001e44:	f7ff f8dc 	bl	8001000 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d0f9      	beq.n	8001e44 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_OscConfig+0x860>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e5c:	00d2      	lsls	r2, r2, #3
 8001e5e:	4907      	ldr	r1, [pc, #28]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3730      	adds	r7, #48	; 0x30
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	ffff0007 	.word	0xffff0007

08001e84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e19c      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b8a      	ldr	r3, [pc, #552]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 020f 	bic.w	r2, r3, #15
 8001eae:	4985      	ldr	r1, [pc, #532]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e184      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d908      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ee4:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	4975      	ldr	r1, [pc, #468]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d908      	bls.n	8001f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	496a      	ldr	r1, [pc, #424]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d908      	bls.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	495e      	ldr	r1, [pc, #376]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d908      	bls.n	8001f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f6e:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4953      	ldr	r1, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d908      	bls.n	8001fae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f023 020f 	bic.w	r2, r3, #15
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4947      	ldr	r1, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d055      	beq.n	8002066 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4940      	ldr	r1, [pc, #256]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d121      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0f6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d115      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0ea      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0de      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0d6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f023 0207 	bic.w	r2, r3, #7
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4925      	ldr	r1, [pc, #148]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002032:	4313      	orrs	r3, r2
 8002034:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002036:	f7fe ffe3 	bl	8001000 <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203c:	e00a      	b.n	8002054 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7fe ffdf 	bl	8001000 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	429a      	cmp	r2, r3
 8002064:	d1eb      	bne.n	800203e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	429a      	cmp	r2, r3
 8002080:	d208      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f023 020f 	bic.w	r2, r3, #15
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002090:	4313      	orrs	r3, r2
 8002092:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d214      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	4906      	ldr	r1, [pc, #24]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e086      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
 80020c4:	52002000 	.word	0x52002000
 80020c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d208      	bcs.n	80020fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020e8:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4939      	ldr	r1, [pc, #228]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002112:	429a      	cmp	r2, r3
 8002114:	d208      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	492e      	ldr	r1, [pc, #184]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002124:	4313      	orrs	r3, r2
 8002126:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d010      	beq.n	8002156 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002140:	429a      	cmp	r2, r3
 8002142:	d208      	bcs.n	8002156 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4922      	ldr	r1, [pc, #136]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002152:	4313      	orrs	r3, r2
 8002154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800216e:	429a      	cmp	r2, r3
 8002170:	d208      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4917      	ldr	r1, [pc, #92]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002180:	4313      	orrs	r3, r2
 8002182:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002184:	f000 f834 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	4912      	ldr	r1, [pc, #72]	; (80021e0 <HAL_RCC_ClockConfig+0x35c>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_RCC_ClockConfig+0x35c>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x360>)
 80021ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x364>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x368>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fd4a 	bl	8000c60 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	58024400 	.word	0x58024400
 80021e0:	0800a9c4 	.word	0x0800a9c4
 80021e4:	24000004 	.word	0x24000004
 80021e8:	24000000 	.word	0x24000000
 80021ec:	24000008 	.word	0x24000008

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f6:	4bb3      	ldr	r3, [pc, #716]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021fe:	2b18      	cmp	r3, #24
 8002200:	f200 8155 	bhi.w	80024ae <HAL_RCC_GetSysClockFreq+0x2be>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002271 	.word	0x08002271
 8002210:	080024af 	.word	0x080024af
 8002214:	080024af 	.word	0x080024af
 8002218:	080024af 	.word	0x080024af
 800221c:	080024af 	.word	0x080024af
 8002220:	080024af 	.word	0x080024af
 8002224:	080024af 	.word	0x080024af
 8002228:	080024af 	.word	0x080024af
 800222c:	08002297 	.word	0x08002297
 8002230:	080024af 	.word	0x080024af
 8002234:	080024af 	.word	0x080024af
 8002238:	080024af 	.word	0x080024af
 800223c:	080024af 	.word	0x080024af
 8002240:	080024af 	.word	0x080024af
 8002244:	080024af 	.word	0x080024af
 8002248:	080024af 	.word	0x080024af
 800224c:	0800229d 	.word	0x0800229d
 8002250:	080024af 	.word	0x080024af
 8002254:	080024af 	.word	0x080024af
 8002258:	080024af 	.word	0x080024af
 800225c:	080024af 	.word	0x080024af
 8002260:	080024af 	.word	0x080024af
 8002264:	080024af 	.word	0x080024af
 8002268:	080024af 	.word	0x080024af
 800226c:	080022a3 	.word	0x080022a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002270:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800227c:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	4a90      	ldr	r2, [pc, #576]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800228e:	e111      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002290:	4b8d      	ldr	r3, [pc, #564]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002292:	61bb      	str	r3, [r7, #24]
      break;
 8002294:	e10e      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002296:	4b8d      	ldr	r3, [pc, #564]	; (80024cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002298:	61bb      	str	r3, [r7, #24]
      break;
 800229a:	e10b      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800229c:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800229e:	61bb      	str	r3, [r7, #24]
      break;
 80022a0:	e108      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022ac:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022b8:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022c2:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80e1 	beq.w	80024a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	f000 8083 	beq.w	80023f4 <HAL_RCC_GetSysClockFreq+0x204>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	f200 80a1 	bhi.w	8002438 <HAL_RCC_GetSysClockFreq+0x248>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x114>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d056      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002302:	e099      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002304:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02d      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002310:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	08db      	lsrs	r3, r3, #3
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	4a6b      	ldr	r2, [pc, #428]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233a:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234a:	ed97 6a02 	vldr	s12, [r7, #8]
 800234e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800235e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800236a:	e087      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002376:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800237a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800237e:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002392:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800239a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800239e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ae:	e065      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80023be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023f2:	e043      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80024e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002416:	ed97 6a02 	vldr	s12, [r7, #8]
 800241a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800241e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800242a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002436:	e021      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002442:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245a:	ed97 6a02 	vldr	s12, [r7, #8]
 800245e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800246a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800246e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800247a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	0a5b      	lsrs	r3, r3, #9
 8002482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002486:	3301      	adds	r3, #1
 8002488:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002494:	edd7 6a07 	vldr	s13, [r7, #28]
 8002498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a0:	ee17 3a90 	vmov	r3, s15
 80024a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024a6:	e005      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
      break;
 80024ac:	e002      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024b0:	61bb      	str	r3, [r7, #24]
      break;
 80024b2:	bf00      	nop
  }

  return sysclockfreq;
 80024b4:	69bb      	ldr	r3, [r7, #24]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	58024400 	.word	0x58024400
 80024c8:	03d09000 	.word	0x03d09000
 80024cc:	003d0900 	.word	0x003d0900
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	46000000 	.word	0x46000000
 80024d8:	4c742400 	.word	0x4c742400
 80024dc:	4a742400 	.word	0x4a742400
 80024e0:	4af42400 	.word	0x4af42400

080024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80024ea:	f7ff fe81 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_GetHCLKFreq+0x50>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490f      	ldr	r1, [pc, #60]	; (8002538 <HAL_RCC_GetHCLKFreq+0x54>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_GetHCLKFreq+0x50>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_GetHCLKFreq+0x54>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <HAL_RCC_GetHCLKFreq+0x58>)
 8002520:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_RCC_GetHCLKFreq+0x58>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	58024400 	.word	0x58024400
 8002538:	0800a9c4 	.word	0x0800a9c4
 800253c:	24000004 	.word	0x24000004
 8002540:	24000000 	.word	0x24000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002548:	f7ff ffcc 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4904      	ldr	r1, [pc, #16]	; (800256c <HAL_RCC_GetPCLK1Freq+0x28>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	58024400 	.word	0x58024400
 800256c:	0800a9c4 	.word	0x0800a9c4

08002570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002574:	f7ff ffb6 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58024400 	.word	0x58024400
 8002598:	0800a9c4 	.word	0x0800a9c4

0800259c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	223f      	movs	r2, #63	; 0x3f
 80025aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_GetClockConfig+0x7c>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f003 0207 	and.w	r2, r3, #7
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_RCC_GetClockConfig+0x7c>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_RCC_GetClockConfig+0x7c>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_RCC_GetClockConfig+0x7c>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_RCC_GetClockConfig+0x7c>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetClockConfig+0x7c>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCC_GetClockConfig+0x7c>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_GetClockConfig+0x80>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	601a      	str	r2, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	58024400 	.word	0x58024400
 800261c:	52002000 	.word	0x52002000

08002620 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b0c8      	sub	sp, #288	; 0x120
 8002626:	af00      	add	r7, sp, #0
 8002628:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800262c:	2300      	movs	r3, #0
 800262e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002632:	2300      	movs	r3, #0
 8002634:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002640:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002644:	2500      	movs	r5, #0
 8002646:	ea54 0305 	orrs.w	r3, r4, r5
 800264a:	d049      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800264c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002652:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002656:	d02f      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002658:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800265c:	d828      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800265e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002662:	d01a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002668:	d822      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800266e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002672:	d007      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002674:	e01c      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002676:	4ba7      	ldr	r3, [pc, #668]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	4aa6      	ldr	r2, [pc, #664]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002682:	e01a      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002688:	3308      	adds	r3, #8
 800268a:	2102      	movs	r1, #2
 800268c:	4618      	mov	r0, r3
 800268e:	f001 fc43 	bl	8003f18 <RCCEx_PLL2_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002698:	e00f      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800269a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800269e:	3328      	adds	r3, #40	; 0x28
 80026a0:	2102      	movs	r1, #2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fcea 	bl	800407c <RCCEx_PLL3_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026ae:	e004      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026b6:	e000      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80026b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026c2:	4b94      	ldr	r3, [pc, #592]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80026ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d0:	4a90      	ldr	r2, [pc, #576]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d2:	430b      	orrs	r3, r1
 80026d4:	6513      	str	r3, [r2, #80]	; 0x50
 80026d6:	e003      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80026ec:	f04f 0900 	mov.w	r9, #0
 80026f0:	ea58 0309 	orrs.w	r3, r8, r9
 80026f4:	d047      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d82a      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002700:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	0800271d 	.word	0x0800271d
 800270c:	0800272b 	.word	0x0800272b
 8002710:	08002741 	.word	0x08002741
 8002714:	0800275f 	.word	0x0800275f
 8002718:	0800275f 	.word	0x0800275f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271c:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a7c      	ldr	r2, [pc, #496]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002728:	e01a      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800272a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800272e:	3308      	adds	r3, #8
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f001 fbf0 	bl	8003f18 <RCCEx_PLL2_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800273e:	e00f      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002744:	3328      	adds	r3, #40	; 0x28
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fc97 	bl	800407c <RCCEx_PLL3_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002754:	e004      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800275c:	e000      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800275e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002768:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276c:	f023 0107 	bic.w	r1, r3, #7
 8002770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	4a67      	ldr	r2, [pc, #412]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002778:	430b      	orrs	r3, r1
 800277a:	6513      	str	r3, [r2, #80]	; 0x50
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002782:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002792:	f04f 0b00 	mov.w	fp, #0
 8002796:	ea5a 030b 	orrs.w	r3, sl, fp
 800279a:	d054      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800279c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027a6:	d036      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80027a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027ac:	d82f      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b2:	d032      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b8:	d829      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027ba:	2bc0      	cmp	r3, #192	; 0xc0
 80027bc:	d02f      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80027be:	2bc0      	cmp	r3, #192	; 0xc0
 80027c0:	d825      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d018      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d821      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d007      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80027d2:	e01c      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	4a4e      	ldr	r2, [pc, #312]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80027e0:	e01e      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e6:	3308      	adds	r3, #8
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fb94 	bl	8003f18 <RCCEx_PLL2_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80027f6:	e013      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027fc:	3328      	adds	r3, #40	; 0x28
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fc3b 	bl	800407c <RCCEx_PLL3_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800280c:	e008      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002814:	e004      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800281e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002828:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800282a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	4a37      	ldr	r2, [pc, #220]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002838:	430b      	orrs	r3, r1
 800283a:	6513      	str	r3, [r2, #80]	; 0x50
 800283c:	e003      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002842:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002852:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800285c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002860:	460b      	mov	r3, r1
 8002862:	4313      	orrs	r3, r2
 8002864:	d05c      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800286a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002870:	d03b      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002872:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002876:	d834      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800287c:	d037      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800287e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002882:	d82e      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002884:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002888:	d033      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800288a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800288e:	d828      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002894:	d01a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d822      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a4:	d007      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80028a6:	e01c      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028b4:	e01e      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ba:	3308      	adds	r3, #8
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fb2a 	bl	8003f18 <RCCEx_PLL2_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028ca:	e013      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d0:	3328      	adds	r3, #40	; 0x28
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fbd1 	bl	800407c <RCCEx_PLL3_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028e0:	e008      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028e8:	e004      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80028ea:	bf00      	nop
 80028ec:	e002      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80028f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290a:	4a02      	ldr	r2, [pc, #8]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800290c:	430b      	orrs	r3, r1
 800290e:	6513      	str	r3, [r2, #80]	; 0x50
 8002910:	e006      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002912:	bf00      	nop
 8002914:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800291c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800292c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002936:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800293a:	460b      	mov	r3, r1
 800293c:	4313      	orrs	r3, r2
 800293e:	d03a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	2b30      	cmp	r3, #48	; 0x30
 8002948:	d01f      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800294a:	2b30      	cmp	r3, #48	; 0x30
 800294c:	d819      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800294e:	2b20      	cmp	r3, #32
 8002950:	d00c      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002952:	2b20      	cmp	r3, #32
 8002954:	d815      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d019      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800295a:	2b10      	cmp	r3, #16
 800295c:	d111      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800295e:	4bae      	ldr	r3, [pc, #696]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	4aad      	ldr	r2, [pc, #692]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800296a:	e011      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800296c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002970:	3308      	adds	r3, #8
 8002972:	2102      	movs	r1, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f001 facf 	bl	8003f18 <RCCEx_PLL2_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002980:	e006      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002988:	e002      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800298e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002998:	4b9f      	ldr	r3, [pc, #636]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800299a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80029a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	4a9c      	ldr	r2, [pc, #624]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029a8:	430b      	orrs	r3, r1
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	e003      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80029c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4313      	orrs	r3, r2
 80029d4:	d051      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e0:	d035      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e6:	d82e      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80029e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ec:	d031      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80029ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029f2:	d828      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80029f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f8:	d01a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80029fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fe:	d822      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d007      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002a0a:	e01c      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a0c:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	4a81      	ldr	r2, [pc, #516]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a18:	e01c      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1e:	3308      	adds	r3, #8
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 fa78 	bl	8003f18 <RCCEx_PLL2_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a2e:	e011      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a34:	3328      	adds	r3, #40	; 0x28
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fb1f 	bl	800407c <RCCEx_PLL3_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a44:	e006      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a4c:	e002      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a5c:	4b6e      	ldr	r3, [pc, #440]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a6a:	4a6b      	ldr	r2, [pc, #428]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6513      	str	r3, [r2, #80]	; 0x50
 8002a70:	e003      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a94:	460b      	mov	r3, r1
 8002a96:	4313      	orrs	r3, r2
 8002a98:	d053      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d033      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aaa:	d82c      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab0:	d02f      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002ab2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab6:	d826      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002abc:	d02b      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002abe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ac2:	d820      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac8:	d012      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ace:	d81a      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d022      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad8:	d115      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ade:	3308      	adds	r3, #8
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 fa18 	bl	8003f18 <RCCEx_PLL2_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002aee:	e015      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af4:	3328      	adds	r3, #40	; 0x28
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fabf 	bl	800407c <RCCEx_PLL3_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b04:	e00a      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b0e:	bf00      	nop
 8002b10:	e004      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b28:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b32:	4a39      	ldr	r2, [pc, #228]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6513      	str	r3, [r2, #80]	; 0x50
 8002b38:	e003      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b58:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	d060      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b6a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002b6e:	d039      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002b70:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002b74:	d832      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7a:	d035      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b80:	d82c      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d031      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d826      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b92:	d02d      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b98:	d820      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9e:	d012      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba4:	d81a      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d024      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bae:	d115      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f9ad 	bl	8003f18 <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bc4:	e017      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bca:	3328      	adds	r3, #40	; 0x28
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 fa54 	bl	800407c <RCCEx_PLL3_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bda:	e00c      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002be2:	e008      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002be4:	bf00      	nop
 8002be6:	e006      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002be8:	bf00      	nop
 8002bea:	e004      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bec:	bf00      	nop
 8002bee:	e002      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bf0:	bf00      	nop
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10e      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c0e:	4a02      	ldr	r2, [pc, #8]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6593      	str	r3, [r2, #88]	; 0x58
 8002c14:	e006      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4313      	orrs	r3, r2
 8002c42:	d037      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4e:	d00e      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c54:	d816      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d018      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c5e:	d111      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c60:	4bc4      	ldr	r3, [pc, #784]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	4ac3      	ldr	r2, [pc, #780]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c6c:	e00f      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c72:	3308      	adds	r3, #8
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f94e 	bl	8003f18 <RCCEx_PLL2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c82:	e004      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c8a:	e000      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c96:	4bb7      	ldr	r3, [pc, #732]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca4:	4ab3      	ldr	r2, [pc, #716]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	6513      	str	r3, [r2, #80]	; 0x50
 8002caa:	e003      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002cca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	d039      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d81c      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d21 	.word	0x08002d21
 8002ce8:	08002cf5 	.word	0x08002cf5
 8002cec:	08002d03 	.word	0x08002d03
 8002cf0:	08002d21 	.word	0x08002d21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf4:	4b9f      	ldr	r3, [pc, #636]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	4a9e      	ldr	r2, [pc, #632]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d00:	e00f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d06:	3308      	adds	r3, #8
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 f904 	bl	8003f18 <RCCEx_PLL2_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d16:	e004      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d2a:	4b92      	ldr	r3, [pc, #584]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	f023 0103 	bic.w	r1, r3, #3
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d38:	4a8e      	ldr	r2, [pc, #568]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3e:	e003      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002d62:	460b      	mov	r3, r1
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f000 8099 	beq.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d6a:	4b83      	ldr	r3, [pc, #524]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a82      	ldr	r2, [pc, #520]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d76:	f7fe f943 	bl	8001000 <HAL_GetTick>
 8002d7a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d80:	f7fe f93e 	bl	8001000 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d903      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d98:	4b77      	ldr	r3, [pc, #476]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ed      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002da4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d173      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002dac:	4b71      	ldr	r3, [pc, #452]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002db8:	4053      	eors	r3, r2
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d015      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc2:	4b6c      	ldr	r3, [pc, #432]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dce:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a68      	ldr	r2, [pc, #416]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dda:	4b66      	ldr	r3, [pc, #408]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a65      	ldr	r2, [pc, #404]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002de6:	4a63      	ldr	r2, [pc, #396]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfa:	d118      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f900 	bl	8001000 <HAL_GetTick>
 8002e00:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e04:	e00d      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe f8fb 	bl	8001000 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e10:	1ad2      	subs	r2, r2, r3
 8002e12:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d903      	bls.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002e20:	e005      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0eb      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d129      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e46:	d10e      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e58:	091a      	lsrs	r2, r3, #4
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	4a45      	ldr	r2, [pc, #276]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6113      	str	r3, [r2, #16]
 8002e64:	e005      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e70:	6113      	str	r3, [r2, #16]
 8002e72:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e82:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	e008      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f002 0301 	and.w	r3, r2, #1
 8002ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f000 8090 	beq.w	8002fde <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec6:	2b28      	cmp	r3, #40	; 0x28
 8002ec8:	d870      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002fb5 	.word	0x08002fb5
 8002ed4:	08002fad 	.word	0x08002fad
 8002ed8:	08002fad 	.word	0x08002fad
 8002edc:	08002fad 	.word	0x08002fad
 8002ee0:	08002fad 	.word	0x08002fad
 8002ee4:	08002fad 	.word	0x08002fad
 8002ee8:	08002fad 	.word	0x08002fad
 8002eec:	08002fad 	.word	0x08002fad
 8002ef0:	08002f81 	.word	0x08002f81
 8002ef4:	08002fad 	.word	0x08002fad
 8002ef8:	08002fad 	.word	0x08002fad
 8002efc:	08002fad 	.word	0x08002fad
 8002f00:	08002fad 	.word	0x08002fad
 8002f04:	08002fad 	.word	0x08002fad
 8002f08:	08002fad 	.word	0x08002fad
 8002f0c:	08002fad 	.word	0x08002fad
 8002f10:	08002f97 	.word	0x08002f97
 8002f14:	08002fad 	.word	0x08002fad
 8002f18:	08002fad 	.word	0x08002fad
 8002f1c:	08002fad 	.word	0x08002fad
 8002f20:	08002fad 	.word	0x08002fad
 8002f24:	08002fad 	.word	0x08002fad
 8002f28:	08002fad 	.word	0x08002fad
 8002f2c:	08002fad 	.word	0x08002fad
 8002f30:	08002fb5 	.word	0x08002fb5
 8002f34:	08002fad 	.word	0x08002fad
 8002f38:	08002fad 	.word	0x08002fad
 8002f3c:	08002fad 	.word	0x08002fad
 8002f40:	08002fad 	.word	0x08002fad
 8002f44:	08002fad 	.word	0x08002fad
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	08002fad 	.word	0x08002fad
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	08002fad 	.word	0x08002fad
 8002f58:	08002fad 	.word	0x08002fad
 8002f5c:	08002fad 	.word	0x08002fad
 8002f60:	08002fad 	.word	0x08002fad
 8002f64:	08002fad 	.word	0x08002fad
 8002f68:	08002fad 	.word	0x08002fad
 8002f6c:	08002fad 	.word	0x08002fad
 8002f70:	08002fb5 	.word	0x08002fb5
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58024800 	.word	0x58024800
 8002f7c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f84:	3308      	adds	r3, #8
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 ffc5 	bl	8003f18 <RCCEx_PLL2_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f94:	e00f      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9a:	3328      	adds	r3, #40	; 0x28
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f86c 	bl	800407c <RCCEx_PLL3_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002faa:	e004      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fbe:	4bc0      	ldr	r3, [pc, #768]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	4abc      	ldr	r2, [pc, #752]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6553      	str	r3, [r2, #84]	; 0x54
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f002 0302 	and.w	r3, r2, #2
 8002fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ff4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	d043      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003006:	2b05      	cmp	r3, #5
 8003008:	d824      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	0800305d 	.word	0x0800305d
 8003014:	08003029 	.word	0x08003029
 8003018:	0800303f 	.word	0x0800303f
 800301c:	0800305d 	.word	0x0800305d
 8003020:	0800305d 	.word	0x0800305d
 8003024:	0800305d 	.word	0x0800305d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302c:	3308      	adds	r3, #8
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f000 ff71 	bl	8003f18 <RCCEx_PLL2_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800303c:	e00f      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	3328      	adds	r3, #40	; 0x28
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f001 f818 	bl	800407c <RCCEx_PLL3_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003052:	e004      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800305c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003066:	4b96      	ldr	r3, [pc, #600]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f023 0107 	bic.w	r1, r3, #7
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003076:	4a92      	ldr	r2, [pc, #584]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003078:	430b      	orrs	r3, r1
 800307a:	6553      	str	r3, [r2, #84]	; 0x54
 800307c:	e003      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003082:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f002 0304 	and.w	r3, r2, #4
 8003092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800309c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4313      	orrs	r3, r2
 80030a4:	d043      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d824      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	08003105 	.word	0x08003105
 80030bc:	080030d1 	.word	0x080030d1
 80030c0:	080030e7 	.word	0x080030e7
 80030c4:	08003105 	.word	0x08003105
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003105 	.word	0x08003105
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d4:	3308      	adds	r3, #8
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 ff1d 	bl	8003f18 <RCCEx_PLL2_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030e4:	e00f      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ea:	3328      	adds	r3, #40	; 0x28
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 ffc4 	bl	800407c <RCCEx_PLL3_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030fa:	e004      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003102:	e000      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003106:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10b      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f023 0107 	bic.w	r1, r3, #7
 8003116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800311e:	4a68      	ldr	r2, [pc, #416]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003120:	430b      	orrs	r3, r1
 8003122:	6593      	str	r3, [r2, #88]	; 0x58
 8003124:	e003      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003126:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800312a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800312e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f002 0320 	and.w	r3, r2, #32
 800313a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003148:	460b      	mov	r3, r1
 800314a:	4313      	orrs	r3, r2
 800314c:	d055      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800314e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315a:	d033      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800315c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003160:	d82c      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003166:	d02f      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d826      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800316e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003172:	d02b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003174:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003178:	d820      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800317a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317e:	d012      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003184:	d81a      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d022      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800318a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800318e:	d115      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003194:	3308      	adds	r3, #8
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f000 febd 	bl	8003f18 <RCCEx_PLL2_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031a4:	e015      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031aa:	3328      	adds	r3, #40	; 0x28
 80031ac:	2102      	movs	r1, #2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 ff64 	bl	800407c <RCCEx_PLL3_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031ba:	e00a      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031c2:	e006      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031c4:	bf00      	nop
 80031c6:	e004      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031c8:	bf00      	nop
 80031ca:	e002      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031cc:	bf00      	nop
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10b      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ea:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6553      	str	r3, [r2, #84]	; 0x54
 80031f0:	e003      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003210:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003214:	460b      	mov	r3, r1
 8003216:	4313      	orrs	r3, r2
 8003218:	d058      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800321a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003222:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003226:	d033      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003228:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800322c:	d82c      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003232:	d02f      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003238:	d826      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800323a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800323e:	d02b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003244:	d820      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324a:	d012      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800324c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003250:	d81a      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d022      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d115      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800325c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003260:	3308      	adds	r3, #8
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fe57 	bl	8003f18 <RCCEx_PLL2_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003270:	e015      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003276:	3328      	adds	r3, #40	; 0x28
 8003278:	2102      	movs	r1, #2
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fefe 	bl	800407c <RCCEx_PLL3_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003286:	e00a      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800328e:	e006      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003290:	bf00      	nop
 8003292:	e004      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003294:	bf00      	nop
 8003296:	e002      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800329c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10e      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80032ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032b6:	4a02      	ldr	r2, [pc, #8]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6593      	str	r3, [r2, #88]	; 0x58
 80032bc:	e006      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80032be:	bf00      	nop
 80032c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80032d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80032e6:	460b      	mov	r3, r1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	d055      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032f8:	d033      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80032fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032fe:	d82c      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003304:	d02f      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330a:	d826      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800330c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003310:	d02b      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003312:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003316:	d820      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331c:	d012      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800331e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003322:	d81a      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d022      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332c:	d115      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800332e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003332:	3308      	adds	r3, #8
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fdee 	bl	8003f18 <RCCEx_PLL2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003342:	e015      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003348:	3328      	adds	r3, #40	; 0x28
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fe95 	bl	800407c <RCCEx_PLL3_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003358:	e00a      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003362:	bf00      	nop
 8003364:	e004      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003366:	bf00      	nop
 8003368:	e002      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800336e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003378:	4ba1      	ldr	r3, [pc, #644]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003384:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003388:	4a9d      	ldr	r2, [pc, #628]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800338a:	430b      	orrs	r3, r1
 800338c:	6593      	str	r3, [r2, #88]	; 0x58
 800338e:	e003      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003394:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f002 0308 	and.w	r3, r2, #8
 80033a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	d01e      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ca:	3328      	adds	r3, #40	; 0x28
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fe54 	bl	800407c <RCCEx_PLL3_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033e0:	4b87      	ldr	r3, [pc, #540]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	4a83      	ldr	r2, [pc, #524]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033f2:	430b      	orrs	r3, r1
 80033f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f002 0310 	and.w	r3, r2, #16
 8003402:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800340c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003410:	460b      	mov	r3, r1
 8003412:	4313      	orrs	r3, r2
 8003414:	d01e      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d10c      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003428:	3328      	adds	r3, #40	; 0x28
 800342a:	2102      	movs	r1, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fe25 	bl	800407c <RCCEx_PLL3_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800343e:	4b70      	ldr	r3, [pc, #448]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800344a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800344e:	4a6c      	ldr	r2, [pc, #432]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800346a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800346e:	460b      	mov	r3, r1
 8003470:	4313      	orrs	r3, r2
 8003472:	d03e      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003478:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800347c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003480:	d022      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003486:	d81b      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d00b      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003492:	e015      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003498:	3308      	adds	r3, #8
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd3b 	bl	8003f18 <RCCEx_PLL2_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034a8:	e00f      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ae:	3328      	adds	r3, #40	; 0x28
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fde2 	bl	800407c <RCCEx_PLL3_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034be:	e004      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80034c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d2:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034e2:	4a47      	ldr	r2, [pc, #284]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6593      	str	r3, [r2, #88]	; 0x58
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80034fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003500:	2300      	movs	r3, #0
 8003502:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003504:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	d03b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800350e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800351a:	d01f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800351c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003520:	d818      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800352e:	e011      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b33      	ldr	r3, [pc, #204]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a32      	ldr	r2, [pc, #200]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800353c:	e00f      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800353e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003542:	3328      	adds	r3, #40	; 0x28
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fd98 	bl	800407c <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800356e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6553      	str	r3, [r2, #84]	; 0x54
 800357c:	e003      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003582:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003592:	673b      	str	r3, [r7, #112]	; 0x70
 8003594:	2300      	movs	r3, #0
 8003596:	677b      	str	r3, [r7, #116]	; 0x74
 8003598:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800359c:	460b      	mov	r3, r1
 800359e:	4313      	orrs	r3, r2
 80035a0:	d034      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d007      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80035b2:	e011      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	4a11      	ldr	r2, [pc, #68]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035c0:	e00e      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c6:	3308      	adds	r3, #8
 80035c8:	2102      	movs	r1, #2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fca4 	bl	8003f18 <RCCEx_PLL2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035d6:	e003      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f6:	4a02      	ldr	r2, [pc, #8]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035fc:	e006      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800360c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003618:	66bb      	str	r3, [r7, #104]	; 0x68
 800361a:	2300      	movs	r3, #0
 800361c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800361e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d00c      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	3328      	adds	r3, #40	; 0x28
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fd23 	bl	800407c <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800364e:	663b      	str	r3, [r7, #96]	; 0x60
 8003650:	2300      	movs	r3, #0
 8003652:	667b      	str	r3, [r7, #100]	; 0x64
 8003654:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003658:	460b      	mov	r3, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	d038      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800365e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800366a:	d018      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800366c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003670:	d811      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	d014      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367c:	d80b      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d011      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003686:	d106      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003688:	4bc3      	ldr	r3, [pc, #780]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	4ac2      	ldr	r2, [pc, #776]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800368e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003692:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003694:	e008      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800369c:	e004      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b0:	4bb9      	ldr	r3, [pc, #740]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	4ab5      	ldr	r2, [pc, #724]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036c2:	430b      	orrs	r3, r1
 80036c4:	6553      	str	r3, [r2, #84]	; 0x54
 80036c6:	e003      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80036dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80036de:	2300      	movs	r3, #0
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80036e6:	460b      	mov	r3, r1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036ec:	4baa      	ldr	r3, [pc, #680]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fa:	4aa7      	ldr	r2, [pc, #668]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800370c:	653b      	str	r3, [r7, #80]	; 0x50
 800370e:	2300      	movs	r3, #0
 8003710:	657b      	str	r3, [r7, #84]	; 0x54
 8003712:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800371c:	4b9e      	ldr	r3, [pc, #632]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a9b      	ldr	r2, [pc, #620]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800372c:	430b      	orrs	r3, r1
 800372e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
 800373e:	2300      	movs	r3, #0
 8003740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003742:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800374c:	4b92      	ldr	r3, [pc, #584]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375a:	4a8f      	ldr	r2, [pc, #572]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
 800376e:	2300      	movs	r3, #0
 8003770:	647b      	str	r3, [r7, #68]	; 0x44
 8003772:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003776:	460b      	mov	r3, r1
 8003778:	4313      	orrs	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800377c:	4b86      	ldr	r3, [pc, #536]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	4a85      	ldr	r2, [pc, #532]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003782:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003786:	6113      	str	r3, [r2, #16]
 8003788:	4b83      	ldr	r3, [pc, #524]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800378a:	6919      	ldr	r1, [r3, #16]
 800378c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003790:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003794:	4a80      	ldr	r2, [pc, #512]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003796:	430b      	orrs	r3, r1
 8003798:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800379a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a8:	2300      	movs	r3, #0
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037b6:	4b78      	ldr	r3, [pc, #480]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	4a74      	ldr	r2, [pc, #464]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
 80037d8:	2300      	movs	r3, #0
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037e6:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80037ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	4a68      	ldr	r2, [pc, #416]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	2100      	movs	r1, #0
 8003806:	62b9      	str	r1, [r7, #40]	; 0x28
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d011      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381c:	3308      	adds	r3, #8
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fb79 	bl	8003f18 <RCCEx_PLL2_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800382c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003838:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	2100      	movs	r1, #0
 8003846:	6239      	str	r1, [r7, #32]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d011      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800385c:	3308      	adds	r3, #8
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb59 	bl	8003f18 <RCCEx_PLL2_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800386c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003878:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	2100      	movs	r1, #0
 8003886:	61b9      	str	r1, [r7, #24]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	d011      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389c:	3308      	adds	r3, #8
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fb39 	bl	8003f18 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	2100      	movs	r1, #0
 80038c6:	6139      	str	r1, [r7, #16]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038d2:	460b      	mov	r3, r1
 80038d4:	4313      	orrs	r3, r2
 80038d6:	d011      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038dc:	3328      	adds	r3, #40	; 0x28
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fbcb 	bl	800407c <RCCEx_PLL3_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80038ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	2100      	movs	r1, #0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003912:	460b      	mov	r3, r1
 8003914:	4313      	orrs	r3, r2
 8003916:	d011      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391c:	3328      	adds	r3, #40	; 0x28
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fbab 	bl	800407c <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800392c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003938:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	2100      	movs	r1, #0
 8003946:	6039      	str	r1, [r7, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d011      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395c:	3328      	adds	r3, #40	; 0x28
 800395e:	2102      	movs	r1, #2
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fb8b 	bl	800407c <RCCEx_PLL3_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800396c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003978:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800397c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
}
 800398a:	4618      	mov	r0, r3
 800398c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400

0800399c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80039a0:	f7fe fda0 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	58024400 	.word	0x58024400
 80039c4:	0800a9c4 	.word	0x0800a9c4

080039c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039d0:	4ba1      	ldr	r3, [pc, #644]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039da:	4b9f      	ldr	r3, [pc, #636]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	0b1b      	lsrs	r3, r3, #12
 80039e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039e6:	4b9c      	ldr	r3, [pc, #624]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039f2:	4b99      	ldr	r3, [pc, #612]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8111 	beq.w	8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	f000 8083 	beq.w	8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f200 80a1 	bhi.w	8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d056      	beq.n	8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a32:	e099      	b.n	8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a34:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02d      	beq.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a40:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	4a84      	ldr	r2, [pc, #528]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6a:	4b7b      	ldr	r3, [pc, #492]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a9a:	e087      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aae:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ade:	e065      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b22:	e043      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b36:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b66:	e021      	b.n	8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003baa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	0a5b      	lsrs	r3, r3, #9
 8003bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd2:	ee17 2a90 	vmov	r2, s15
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c00:	ee17 2a90 	vmov	r2, s15
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	0e1b      	lsrs	r3, r3, #24
 8003c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2e:	ee17 2a90 	vmov	r2, s15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c36:	e008      	b.n	8003c4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
}
 8003c4a:	bf00      	nop
 8003c4c:	3724      	adds	r7, #36	; 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	03d09000 	.word	0x03d09000
 8003c60:	46000000 	.word	0x46000000
 8003c64:	4c742400 	.word	0x4c742400
 8003c68:	4a742400 	.word	0x4a742400
 8003c6c:	4af42400 	.word	0x4af42400

08003c70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	; 0x24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c78:	4ba1      	ldr	r3, [pc, #644]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c82:	4b9f      	ldr	r3, [pc, #636]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	0d1b      	lsrs	r3, r3, #20
 8003c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c8e:	4b9c      	ldr	r3, [pc, #624]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c9a:	4b99      	ldr	r3, [pc, #612]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	08db      	lsrs	r3, r3, #3
 8003ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8111 	beq.w	8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	f000 8083 	beq.w	8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	f200 80a1 	bhi.w	8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d056      	beq.n	8003d88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cda:	e099      	b.n	8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cdc:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02d      	beq.n	8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ce8:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	4a84      	ldr	r2, [pc, #528]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d12:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d42:	e087      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d56:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d86:	e065      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9a:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dca:	e043      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dde:	4b48      	ldr	r3, [pc, #288]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0e:	e021      	b.n	8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7a:	ee17 2a90 	vmov	r2, s15
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea8:	ee17 2a90 	vmov	r2, s15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	0e1b      	lsrs	r3, r3, #24
 8003eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed6:	ee17 2a90 	vmov	r2, s15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
}
 8003ef2:	bf00      	nop
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
 8003f04:	03d09000 	.word	0x03d09000
 8003f08:	46000000 	.word	0x46000000
 8003f0c:	4c742400 	.word	0x4c742400
 8003f10:	4a742400 	.word	0x4a742400
 8003f14:	4af42400 	.word	0x4af42400

08003f18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d101      	bne.n	8003f36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e099      	b.n	800406a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f36:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f42:	f7fd f85d 	bl	8001000 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f4a:	f7fd f859 	bl	8001000 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e086      	b.n	800406a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f5c:	4b45      	ldr	r3, [pc, #276]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	031b      	lsls	r3, r3, #12
 8003f76:	493f      	ldr	r1, [pc, #252]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fac:	4931      	ldr	r1, [pc, #196]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	492d      	ldr	r1, [pc, #180]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f023 0220 	bic.w	r2, r3, #32
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4928      	ldr	r1, [pc, #160]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <RCCEx_PLL2_Config+0x160>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	69d2      	ldr	r2, [r2, #28]
 8003fee:	00d2      	lsls	r2, r2, #3
 8003ff0:	4920      	ldr	r1, [pc, #128]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800400e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004014:	e00f      	b.n	8004036 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800401c:	4b15      	ldr	r3, [pc, #84]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004028:	e005      	b.n	8004036 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004034:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800403c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fc ffdd 	bl	8001000 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004048:	e008      	b.n	800405c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800404a:	f7fc ffd9 	bl	8001000 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <RCCEx_PLL2_Config+0x15c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
 8004078:	ffff0007 	.word	0xffff0007

0800407c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800408a:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d101      	bne.n	800409a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e099      	b.n	80041ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800409a:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4e      	ldr	r2, [pc, #312]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a6:	f7fc ffab 	bl	8001000 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ae:	f7fc ffa7 	bl	8001000 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e086      	b.n	80041ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040c0:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040cc:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	051b      	lsls	r3, r3, #20
 80040da:	493f      	ldr	r1, [pc, #252]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	628b      	str	r3, [r1, #40]	; 0x28
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	3b01      	subs	r3, #1
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004110:	4931      	ldr	r1, [pc, #196]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004116:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	492d      	ldr	r1, [pc, #180]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004128:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	4928      	ldr	r1, [pc, #160]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <RCCEx_PLL3_Config+0x160>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	69d2      	ldr	r2, [r2, #28]
 8004152:	00d2      	lsls	r2, r2, #3
 8004154:	4920      	ldr	r1, [pc, #128]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004156:	4313      	orrs	r3, r2
 8004158:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004178:	e00f      	b.n	800419a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004186:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800418c:	e005      	b.n	800419a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 8004194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004198:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800419a:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a6:	f7fc ff2b 	bl	8001000 <HAL_GetTick>
 80041aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041ac:	e008      	b.n	80041c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041ae:	f7fc ff27 	bl	8001000 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
 80041dc:	ffff0007 	.word	0xffff0007

080041e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e049      	b.n	8004286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f841 	bl	800428e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f000 fa00 	bl	8004624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d001      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e054      	b.n	8004366 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <HAL_TIM_Base_Start_IT+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x80>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d01d      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a22      	ldr	r2, [pc, #136]	; (8004378 <HAL_TIM_Base_Start_IT+0xd4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a21      	ldr	r2, [pc, #132]	; (800437c <HAL_TIM_Base_Start_IT+0xd8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x80>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_TIM_Base_Start_IT+0xdc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x80>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_TIM_Base_Start_IT+0xe0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x80>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <HAL_TIM_Base_Start_IT+0xe4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_TIM_Base_Start_IT+0xe8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d115      	bne.n	8004350 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_TIM_Base_Start_IT+0xec>)
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b06      	cmp	r3, #6
 8004334:	d015      	beq.n	8004362 <HAL_TIM_Base_Start_IT+0xbe>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d011      	beq.n	8004362 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	e008      	b.n	8004362 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e000      	b.n	8004364 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40010000 	.word	0x40010000
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800
 8004380:	40000c00 	.word	0x40000c00
 8004384:	40010400 	.word	0x40010400
 8004388:	40001800 	.word	0x40001800
 800438c:	40014000 	.word	0x40014000
 8004390:	00010007 	.word	0x00010007

08004394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d122      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d11b      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0202 	mvn.w	r2, #2
 80043c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f905 	bl	80045e6 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8f7 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f908 	bl	80045fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0204 	mvn.w	r2, #4
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8db 	bl	80045e6 <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8cd 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8de 	bl	80045fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b08      	cmp	r3, #8
 8004450:	d122      	bne.n	8004498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b08      	cmp	r3, #8
 800445e:	d11b      	bne.n	8004498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0208 	mvn.w	r2, #8
 8004468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2204      	movs	r2, #4
 800446e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8b1 	bl	80045e6 <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8a3 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8b4 	bl	80045fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0210 	mvn.w	r2, #16
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2208      	movs	r2, #8
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f887 	bl	80045e6 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f879 	bl	80045d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f88a 	bl	80045fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0201 	mvn.w	r2, #1
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fb08 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b80      	cmp	r3, #128	; 0x80
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b80      	cmp	r3, #128	; 0x80
 8004532:	d107      	bne.n	8004544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f914 	bl	800476c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004552:	d10e      	bne.n	8004572 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b80      	cmp	r3, #128	; 0x80
 8004560:	d107      	bne.n	8004572 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f907 	bl	8004780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d10e      	bne.n	800459e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d107      	bne.n	800459e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f838 	bl	800460e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d10e      	bne.n	80045ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d107      	bne.n	80045ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0220 	mvn.w	r2, #32
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f8c7 	bl	8004758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a40      	ldr	r2, [pc, #256]	; (8004738 <TIM_Base_SetConfig+0x114>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d00f      	beq.n	8004664 <TIM_Base_SetConfig+0x40>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a3d      	ldr	r2, [pc, #244]	; (800473c <TIM_Base_SetConfig+0x118>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00b      	beq.n	8004664 <TIM_Base_SetConfig+0x40>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a3c      	ldr	r2, [pc, #240]	; (8004740 <TIM_Base_SetConfig+0x11c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d007      	beq.n	8004664 <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a3b      	ldr	r2, [pc, #236]	; (8004744 <TIM_Base_SetConfig+0x120>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_Base_SetConfig+0x40>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a3a      	ldr	r2, [pc, #232]	; (8004748 <TIM_Base_SetConfig+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d108      	bne.n	8004676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <TIM_Base_SetConfig+0x114>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01f      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d01b      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a2c      	ldr	r2, [pc, #176]	; (800473c <TIM_Base_SetConfig+0x118>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d017      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <TIM_Base_SetConfig+0x11c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a2a      	ldr	r2, [pc, #168]	; (8004744 <TIM_Base_SetConfig+0x120>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00f      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a29      	ldr	r2, [pc, #164]	; (8004748 <TIM_Base_SetConfig+0x124>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a28      	ldr	r2, [pc, #160]	; (800474c <TIM_Base_SetConfig+0x128>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <TIM_Base_SetConfig+0x12c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_Base_SetConfig+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a26      	ldr	r2, [pc, #152]	; (8004754 <TIM_Base_SetConfig+0x130>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d108      	bne.n	80046d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a10      	ldr	r2, [pc, #64]	; (8004738 <TIM_Base_SetConfig+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00f      	beq.n	800471c <TIM_Base_SetConfig+0xf8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <TIM_Base_SetConfig+0x124>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00b      	beq.n	800471c <TIM_Base_SetConfig+0xf8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <TIM_Base_SetConfig+0x128>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_Base_SetConfig+0xf8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a10      	ldr	r2, [pc, #64]	; (8004750 <TIM_Base_SetConfig+0x12c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_Base_SetConfig+0xf8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <TIM_Base_SetConfig+0x130>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d103      	bne.n	8004724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	615a      	str	r2, [r3, #20]
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40010400 	.word	0x40010400
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e042      	b.n	800482c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fc f9e7 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2224      	movs	r2, #36	; 0x24
 80047c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f82c 	bl	8004834 <UART_SetConfig>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e022      	b.n	800482c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fe8c 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 ff13 	bl	8005650 <UART_CheckIdleState>
 800482a:	4603      	mov	r3, r0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004838:	b092      	sub	sp, #72	; 0x48
 800483a:	af00      	add	r7, sp, #0
 800483c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	431a      	orrs	r2, r3
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	431a      	orrs	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4313      	orrs	r3, r2
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4bbe      	ldr	r3, [pc, #760]	; (8004b5c <UART_SetConfig+0x328>)
 8004864:	4013      	ands	r3, r2
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800486c:	430b      	orrs	r3, r1
 800486e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4ab3      	ldr	r2, [pc, #716]	; (8004b60 <UART_SetConfig+0x32c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800489c:	4313      	orrs	r3, r2
 800489e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	4baf      	ldr	r3, [pc, #700]	; (8004b64 <UART_SetConfig+0x330>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f023 010f 	bic.w	r1, r3, #15
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4aa6      	ldr	r2, [pc, #664]	; (8004b68 <UART_SetConfig+0x334>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d177      	bne.n	80049c4 <UART_SetConfig+0x190>
 80048d4:	4ba5      	ldr	r3, [pc, #660]	; (8004b6c <UART_SetConfig+0x338>)
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048dc:	2b28      	cmp	r3, #40	; 0x28
 80048de:	d86d      	bhi.n	80049bc <UART_SetConfig+0x188>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0xb4>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800498d 	.word	0x0800498d
 80048ec:	080049bd 	.word	0x080049bd
 80048f0:	080049bd 	.word	0x080049bd
 80048f4:	080049bd 	.word	0x080049bd
 80048f8:	080049bd 	.word	0x080049bd
 80048fc:	080049bd 	.word	0x080049bd
 8004900:	080049bd 	.word	0x080049bd
 8004904:	080049bd 	.word	0x080049bd
 8004908:	08004995 	.word	0x08004995
 800490c:	080049bd 	.word	0x080049bd
 8004910:	080049bd 	.word	0x080049bd
 8004914:	080049bd 	.word	0x080049bd
 8004918:	080049bd 	.word	0x080049bd
 800491c:	080049bd 	.word	0x080049bd
 8004920:	080049bd 	.word	0x080049bd
 8004924:	080049bd 	.word	0x080049bd
 8004928:	0800499d 	.word	0x0800499d
 800492c:	080049bd 	.word	0x080049bd
 8004930:	080049bd 	.word	0x080049bd
 8004934:	080049bd 	.word	0x080049bd
 8004938:	080049bd 	.word	0x080049bd
 800493c:	080049bd 	.word	0x080049bd
 8004940:	080049bd 	.word	0x080049bd
 8004944:	080049bd 	.word	0x080049bd
 8004948:	080049a5 	.word	0x080049a5
 800494c:	080049bd 	.word	0x080049bd
 8004950:	080049bd 	.word	0x080049bd
 8004954:	080049bd 	.word	0x080049bd
 8004958:	080049bd 	.word	0x080049bd
 800495c:	080049bd 	.word	0x080049bd
 8004960:	080049bd 	.word	0x080049bd
 8004964:	080049bd 	.word	0x080049bd
 8004968:	080049ad 	.word	0x080049ad
 800496c:	080049bd 	.word	0x080049bd
 8004970:	080049bd 	.word	0x080049bd
 8004974:	080049bd 	.word	0x080049bd
 8004978:	080049bd 	.word	0x080049bd
 800497c:	080049bd 	.word	0x080049bd
 8004980:	080049bd 	.word	0x080049bd
 8004984:	080049bd 	.word	0x080049bd
 8004988:	080049b5 	.word	0x080049b5
 800498c:	2301      	movs	r3, #1
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004992:	e326      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499a:	e322      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a2:	e31e      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049aa:	e31a      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 80049ac:	2320      	movs	r3, #32
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b2:	e316      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 80049b4:	2340      	movs	r3, #64	; 0x40
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ba:	e312      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c2:	e30e      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a69      	ldr	r2, [pc, #420]	; (8004b70 <UART_SetConfig+0x33c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d130      	bne.n	8004a30 <UART_SetConfig+0x1fc>
 80049ce:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <UART_SetConfig+0x338>)
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d826      	bhi.n	8004a28 <UART_SetConfig+0x1f4>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <UART_SetConfig+0x1ac>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	08004a01 	.word	0x08004a01
 80049e8:	08004a09 	.word	0x08004a09
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fe:	e2f0      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a00:	2304      	movs	r3, #4
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a06:	e2ec      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0e:	e2e8      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e2e4      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a18:	2320      	movs	r3, #32
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e2e0      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a20:	2340      	movs	r3, #64	; 0x40
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e2dc      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e2d8      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a4f      	ldr	r2, [pc, #316]	; (8004b74 <UART_SetConfig+0x340>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d130      	bne.n	8004a9c <UART_SetConfig+0x268>
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <UART_SetConfig+0x338>)
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d826      	bhi.n	8004a94 <UART_SetConfig+0x260>
 8004a46:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0x218>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a65 	.word	0x08004a65
 8004a50:	08004a6d 	.word	0x08004a6d
 8004a54:	08004a75 	.word	0x08004a75
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6a:	e2ba      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a72:	e2b6      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7a:	e2b2      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a82:	e2ae      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a84:	2320      	movs	r3, #32
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e2aa      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a8c:	2340      	movs	r3, #64	; 0x40
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e2a6      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e2a2      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a35      	ldr	r2, [pc, #212]	; (8004b78 <UART_SetConfig+0x344>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d130      	bne.n	8004b08 <UART_SetConfig+0x2d4>
 8004aa6:	4b31      	ldr	r3, [pc, #196]	; (8004b6c <UART_SetConfig+0x338>)
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d826      	bhi.n	8004b00 <UART_SetConfig+0x2cc>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x284>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004ad1 	.word	0x08004ad1
 8004abc:	08004ad9 	.word	0x08004ad9
 8004ac0:	08004ae1 	.word	0x08004ae1
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004af1 	.word	0x08004af1
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad6:	e284      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ade:	e280      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae6:	e27c      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aee:	e278      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004af0:	2320      	movs	r3, #32
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af6:	e274      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004af8:	2340      	movs	r3, #64	; 0x40
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e270      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e26c      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <UART_SetConfig+0x348>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d142      	bne.n	8004b98 <UART_SetConfig+0x364>
 8004b12:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <UART_SetConfig+0x338>)
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d838      	bhi.n	8004b90 <UART_SetConfig+0x35c>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <UART_SetConfig+0x2f0>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b3d 	.word	0x08004b3d
 8004b28:	08004b45 	.word	0x08004b45
 8004b2c:	08004b4d 	.word	0x08004b4d
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b81 	.word	0x08004b81
 8004b38:	08004b89 	.word	0x08004b89
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b42:	e24e      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4a:	e24a      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b52:	e246      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5a:	e242      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b5c:	cfff69f3 	.word	0xcfff69f3
 8004b60:	58000c00 	.word	0x58000c00
 8004b64:	11fff4ff 	.word	0x11fff4ff
 8004b68:	40011000 	.word	0x40011000
 8004b6c:	58024400 	.word	0x58024400
 8004b70:	40004400 	.word	0x40004400
 8004b74:	40004800 	.word	0x40004800
 8004b78:	40004c00 	.word	0x40004c00
 8004b7c:	40005000 	.word	0x40005000
 8004b80:	2320      	movs	r3, #32
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b86:	e22c      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b88:	2340      	movs	r3, #64	; 0x40
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8e:	e228      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b96:	e224      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4ab1      	ldr	r2, [pc, #708]	; (8004e64 <UART_SetConfig+0x630>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d176      	bne.n	8004c90 <UART_SetConfig+0x45c>
 8004ba2:	4bb1      	ldr	r3, [pc, #708]	; (8004e68 <UART_SetConfig+0x634>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004baa:	2b28      	cmp	r3, #40	; 0x28
 8004bac:	d86c      	bhi.n	8004c88 <UART_SetConfig+0x454>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x380>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004c59 	.word	0x08004c59
 8004bb8:	08004c89 	.word	0x08004c89
 8004bbc:	08004c89 	.word	0x08004c89
 8004bc0:	08004c89 	.word	0x08004c89
 8004bc4:	08004c89 	.word	0x08004c89
 8004bc8:	08004c89 	.word	0x08004c89
 8004bcc:	08004c89 	.word	0x08004c89
 8004bd0:	08004c89 	.word	0x08004c89
 8004bd4:	08004c61 	.word	0x08004c61
 8004bd8:	08004c89 	.word	0x08004c89
 8004bdc:	08004c89 	.word	0x08004c89
 8004be0:	08004c89 	.word	0x08004c89
 8004be4:	08004c89 	.word	0x08004c89
 8004be8:	08004c89 	.word	0x08004c89
 8004bec:	08004c89 	.word	0x08004c89
 8004bf0:	08004c89 	.word	0x08004c89
 8004bf4:	08004c69 	.word	0x08004c69
 8004bf8:	08004c89 	.word	0x08004c89
 8004bfc:	08004c89 	.word	0x08004c89
 8004c00:	08004c89 	.word	0x08004c89
 8004c04:	08004c89 	.word	0x08004c89
 8004c08:	08004c89 	.word	0x08004c89
 8004c0c:	08004c89 	.word	0x08004c89
 8004c10:	08004c89 	.word	0x08004c89
 8004c14:	08004c71 	.word	0x08004c71
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004c89 	.word	0x08004c89
 8004c2c:	08004c89 	.word	0x08004c89
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c79 	.word	0x08004c79
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c89 	.word	0x08004c89
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c89 	.word	0x08004c89
 8004c48:	08004c89 	.word	0x08004c89
 8004c4c:	08004c89 	.word	0x08004c89
 8004c50:	08004c89 	.word	0x08004c89
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5e:	e1c0      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c66:	e1bc      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6e:	e1b8      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c76:	e1b4      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7e:	e1b0      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004c80:	2340      	movs	r3, #64	; 0x40
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e1ac      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8e:	e1a8      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a75      	ldr	r2, [pc, #468]	; (8004e6c <UART_SetConfig+0x638>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d130      	bne.n	8004cfc <UART_SetConfig+0x4c8>
 8004c9a:	4b73      	ldr	r3, [pc, #460]	; (8004e68 <UART_SetConfig+0x634>)
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d826      	bhi.n	8004cf4 <UART_SetConfig+0x4c0>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x478>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cc5 	.word	0x08004cc5
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	08004cd5 	.word	0x08004cd5
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cca:	e18a      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e186      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e182      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e17e      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e17a      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004cec:	2340      	movs	r3, #64	; 0x40
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e176      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e172      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a5b      	ldr	r2, [pc, #364]	; (8004e70 <UART_SetConfig+0x63c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d130      	bne.n	8004d68 <UART_SetConfig+0x534>
 8004d06:	4b58      	ldr	r3, [pc, #352]	; (8004e68 <UART_SetConfig+0x634>)
 8004d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d826      	bhi.n	8004d60 <UART_SetConfig+0x52c>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x4e4>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d31 	.word	0x08004d31
 8004d1c:	08004d39 	.word	0x08004d39
 8004d20:	08004d41 	.word	0x08004d41
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d36:	e154      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3e:	e150      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d46:	e14c      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e148      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004d50:	2320      	movs	r3, #32
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e144      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004d58:	2340      	movs	r3, #64	; 0x40
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e140      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e13c      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a41      	ldr	r2, [pc, #260]	; (8004e74 <UART_SetConfig+0x640>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	f040 8082 	bne.w	8004e78 <UART_SetConfig+0x644>
 8004d74:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <UART_SetConfig+0x634>)
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d7c:	2b28      	cmp	r3, #40	; 0x28
 8004d7e:	d86d      	bhi.n	8004e5c <UART_SetConfig+0x628>
 8004d80:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x554>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004e2d 	.word	0x08004e2d
 8004d8c:	08004e5d 	.word	0x08004e5d
 8004d90:	08004e5d 	.word	0x08004e5d
 8004d94:	08004e5d 	.word	0x08004e5d
 8004d98:	08004e5d 	.word	0x08004e5d
 8004d9c:	08004e5d 	.word	0x08004e5d
 8004da0:	08004e5d 	.word	0x08004e5d
 8004da4:	08004e5d 	.word	0x08004e5d
 8004da8:	08004e35 	.word	0x08004e35
 8004dac:	08004e5d 	.word	0x08004e5d
 8004db0:	08004e5d 	.word	0x08004e5d
 8004db4:	08004e5d 	.word	0x08004e5d
 8004db8:	08004e5d 	.word	0x08004e5d
 8004dbc:	08004e5d 	.word	0x08004e5d
 8004dc0:	08004e5d 	.word	0x08004e5d
 8004dc4:	08004e5d 	.word	0x08004e5d
 8004dc8:	08004e3d 	.word	0x08004e3d
 8004dcc:	08004e5d 	.word	0x08004e5d
 8004dd0:	08004e5d 	.word	0x08004e5d
 8004dd4:	08004e5d 	.word	0x08004e5d
 8004dd8:	08004e5d 	.word	0x08004e5d
 8004ddc:	08004e5d 	.word	0x08004e5d
 8004de0:	08004e5d 	.word	0x08004e5d
 8004de4:	08004e5d 	.word	0x08004e5d
 8004de8:	08004e45 	.word	0x08004e45
 8004dec:	08004e5d 	.word	0x08004e5d
 8004df0:	08004e5d 	.word	0x08004e5d
 8004df4:	08004e5d 	.word	0x08004e5d
 8004df8:	08004e5d 	.word	0x08004e5d
 8004dfc:	08004e5d 	.word	0x08004e5d
 8004e00:	08004e5d 	.word	0x08004e5d
 8004e04:	08004e5d 	.word	0x08004e5d
 8004e08:	08004e4d 	.word	0x08004e4d
 8004e0c:	08004e5d 	.word	0x08004e5d
 8004e10:	08004e5d 	.word	0x08004e5d
 8004e14:	08004e5d 	.word	0x08004e5d
 8004e18:	08004e5d 	.word	0x08004e5d
 8004e1c:	08004e5d 	.word	0x08004e5d
 8004e20:	08004e5d 	.word	0x08004e5d
 8004e24:	08004e5d 	.word	0x08004e5d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e0d6      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004e34:	2304      	movs	r3, #4
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3a:	e0d2      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e42:	e0ce      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004e44:	2310      	movs	r3, #16
 8004e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4a:	e0ca      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e52:	e0c6      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004e54:	2340      	movs	r3, #64	; 0x40
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5a:	e0c2      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e62:	e0be      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004e64:	40011400 	.word	0x40011400
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	40007800 	.word	0x40007800
 8004e70:	40007c00 	.word	0x40007c00
 8004e74:	40011800 	.word	0x40011800
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4aad      	ldr	r2, [pc, #692]	; (8005134 <UART_SetConfig+0x900>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d176      	bne.n	8004f70 <UART_SetConfig+0x73c>
 8004e82:	4bad      	ldr	r3, [pc, #692]	; (8005138 <UART_SetConfig+0x904>)
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e8a:	2b28      	cmp	r3, #40	; 0x28
 8004e8c:	d86c      	bhi.n	8004f68 <UART_SetConfig+0x734>
 8004e8e:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <UART_SetConfig+0x660>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004f39 	.word	0x08004f39
 8004e98:	08004f69 	.word	0x08004f69
 8004e9c:	08004f69 	.word	0x08004f69
 8004ea0:	08004f69 	.word	0x08004f69
 8004ea4:	08004f69 	.word	0x08004f69
 8004ea8:	08004f69 	.word	0x08004f69
 8004eac:	08004f69 	.word	0x08004f69
 8004eb0:	08004f69 	.word	0x08004f69
 8004eb4:	08004f41 	.word	0x08004f41
 8004eb8:	08004f69 	.word	0x08004f69
 8004ebc:	08004f69 	.word	0x08004f69
 8004ec0:	08004f69 	.word	0x08004f69
 8004ec4:	08004f69 	.word	0x08004f69
 8004ec8:	08004f69 	.word	0x08004f69
 8004ecc:	08004f69 	.word	0x08004f69
 8004ed0:	08004f69 	.word	0x08004f69
 8004ed4:	08004f49 	.word	0x08004f49
 8004ed8:	08004f69 	.word	0x08004f69
 8004edc:	08004f69 	.word	0x08004f69
 8004ee0:	08004f69 	.word	0x08004f69
 8004ee4:	08004f69 	.word	0x08004f69
 8004ee8:	08004f69 	.word	0x08004f69
 8004eec:	08004f69 	.word	0x08004f69
 8004ef0:	08004f69 	.word	0x08004f69
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	08004f69 	.word	0x08004f69
 8004efc:	08004f69 	.word	0x08004f69
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004f69 	.word	0x08004f69
 8004f08:	08004f69 	.word	0x08004f69
 8004f0c:	08004f69 	.word	0x08004f69
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f59 	.word	0x08004f59
 8004f18:	08004f69 	.word	0x08004f69
 8004f1c:	08004f69 	.word	0x08004f69
 8004f20:	08004f69 	.word	0x08004f69
 8004f24:	08004f69 	.word	0x08004f69
 8004f28:	08004f69 	.word	0x08004f69
 8004f2c:	08004f69 	.word	0x08004f69
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e050      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004f40:	2304      	movs	r3, #4
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e04c      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e048      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e044      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004f58:	2320      	movs	r3, #32
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e040      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e03c      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6e:	e038      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a71      	ldr	r2, [pc, #452]	; (800513c <UART_SetConfig+0x908>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d130      	bne.n	8004fdc <UART_SetConfig+0x7a8>
 8004f7a:	4b6f      	ldr	r3, [pc, #444]	; (8005138 <UART_SetConfig+0x904>)
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d826      	bhi.n	8004fd4 <UART_SetConfig+0x7a0>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x758>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fa5 	.word	0x08004fa5
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	08004fb5 	.word	0x08004fb5
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e01a      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004fac:	2304      	movs	r3, #4
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e016      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e012      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e00e      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e00a      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e006      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e002      	b.n	8004fe2 <UART_SetConfig+0x7ae>
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a55      	ldr	r2, [pc, #340]	; (800513c <UART_SetConfig+0x908>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f040 80f8 	bne.w	80051de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	dc46      	bgt.n	8005084 <UART_SetConfig+0x850>
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	db75      	blt.n	80050e6 <UART_SetConfig+0x8b2>
 8004ffa:	3b02      	subs	r3, #2
 8004ffc:	2b1e      	cmp	r3, #30
 8004ffe:	d872      	bhi.n	80050e6 <UART_SetConfig+0x8b2>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x7d4>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800508b 	.word	0x0800508b
 800500c:	080050e7 	.word	0x080050e7
 8005010:	08005093 	.word	0x08005093
 8005014:	080050e7 	.word	0x080050e7
 8005018:	080050e7 	.word	0x080050e7
 800501c:	080050e7 	.word	0x080050e7
 8005020:	080050a3 	.word	0x080050a3
 8005024:	080050e7 	.word	0x080050e7
 8005028:	080050e7 	.word	0x080050e7
 800502c:	080050e7 	.word	0x080050e7
 8005030:	080050e7 	.word	0x080050e7
 8005034:	080050e7 	.word	0x080050e7
 8005038:	080050e7 	.word	0x080050e7
 800503c:	080050e7 	.word	0x080050e7
 8005040:	080050b3 	.word	0x080050b3
 8005044:	080050e7 	.word	0x080050e7
 8005048:	080050e7 	.word	0x080050e7
 800504c:	080050e7 	.word	0x080050e7
 8005050:	080050e7 	.word	0x080050e7
 8005054:	080050e7 	.word	0x080050e7
 8005058:	080050e7 	.word	0x080050e7
 800505c:	080050e7 	.word	0x080050e7
 8005060:	080050e7 	.word	0x080050e7
 8005064:	080050e7 	.word	0x080050e7
 8005068:	080050e7 	.word	0x080050e7
 800506c:	080050e7 	.word	0x080050e7
 8005070:	080050e7 	.word	0x080050e7
 8005074:	080050e7 	.word	0x080050e7
 8005078:	080050e7 	.word	0x080050e7
 800507c:	080050e7 	.word	0x080050e7
 8005080:	080050d9 	.word	0x080050d9
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d02a      	beq.n	80050de <UART_SetConfig+0x8aa>
 8005088:	e02d      	b.n	80050e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800508a:	f7fe fc87 	bl	800399c <HAL_RCCEx_GetD3PCLK1Freq>
 800508e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005090:	e02f      	b.n	80050f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fc96 	bl	80039c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a0:	e027      	b.n	80050f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050a2:	f107 0318 	add.w	r3, r7, #24
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe fde2 	bl	8003c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050b0:	e01f      	b.n	80050f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <UART_SetConfig+0x904>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <UART_SetConfig+0x904>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	08db      	lsrs	r3, r3, #3
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	4a1d      	ldr	r2, [pc, #116]	; (8005140 <UART_SetConfig+0x90c>)
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050d0:	e00f      	b.n	80050f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80050d2:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <UART_SetConfig+0x90c>)
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d6:	e00c      	b.n	80050f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050d8:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <UART_SetConfig+0x910>)
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80050f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 81ee 	beq.w	80054d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	4a12      	ldr	r2, [pc, #72]	; (8005148 <UART_SetConfig+0x914>)
 8005100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005104:	461a      	mov	r2, r3
 8005106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005108:	fbb3 f3f2 	udiv	r3, r3, r2
 800510c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511a:	429a      	cmp	r2, r3
 800511c:	d305      	bcc.n	800512a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	429a      	cmp	r2, r3
 8005128:	d910      	bls.n	800514c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005130:	e1d1      	b.n	80054d6 <UART_SetConfig+0xca2>
 8005132:	bf00      	nop
 8005134:	40011c00 	.word	0x40011c00
 8005138:	58024400 	.word	0x58024400
 800513c:	58000c00 	.word	0x58000c00
 8005140:	03d09000 	.word	0x03d09000
 8005144:	003d0900 	.word	0x003d0900
 8005148:	0800a9d4 	.word	0x0800a9d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800514c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514e:	2200      	movs	r2, #0
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	60fa      	str	r2, [r7, #12]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	4ac0      	ldr	r2, [pc, #768]	; (800545c <UART_SetConfig+0xc28>)
 800515a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515e:	b29b      	uxth	r3, r3
 8005160:	2200      	movs	r2, #0
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800516a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800516e:	f7fb f909 	bl	8000384 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	020b      	lsls	r3, r1, #8
 8005184:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005188:	0202      	lsls	r2, r0, #8
 800518a:	6979      	ldr	r1, [r7, #20]
 800518c:	6849      	ldr	r1, [r1, #4]
 800518e:	0849      	lsrs	r1, r1, #1
 8005190:	2000      	movs	r0, #0
 8005192:	460c      	mov	r4, r1
 8005194:	4605      	mov	r5, r0
 8005196:	eb12 0804 	adds.w	r8, r2, r4
 800519a:	eb43 0905 	adc.w	r9, r3, r5
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	469a      	mov	sl, r3
 80051a6:	4693      	mov	fp, r2
 80051a8:	4652      	mov	r2, sl
 80051aa:	465b      	mov	r3, fp
 80051ac:	4640      	mov	r0, r8
 80051ae:	4649      	mov	r1, r9
 80051b0:	f7fb f8e8 	bl	8000384 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c2:	d308      	bcc.n	80051d6 <UART_SetConfig+0x9a2>
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ca:	d204      	bcs.n	80051d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	e17f      	b.n	80054d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80051dc:	e17b      	b.n	80054d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e6:	f040 80bd 	bne.w	8005364 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80051ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	dc48      	bgt.n	8005284 <UART_SetConfig+0xa50>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	db7b      	blt.n	80052ee <UART_SetConfig+0xaba>
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d879      	bhi.n	80052ee <UART_SetConfig+0xaba>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <UART_SetConfig+0x9cc>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	0800528b 	.word	0x0800528b
 8005204:	08005293 	.word	0x08005293
 8005208:	080052ef 	.word	0x080052ef
 800520c:	080052ef 	.word	0x080052ef
 8005210:	0800529b 	.word	0x0800529b
 8005214:	080052ef 	.word	0x080052ef
 8005218:	080052ef 	.word	0x080052ef
 800521c:	080052ef 	.word	0x080052ef
 8005220:	080052ab 	.word	0x080052ab
 8005224:	080052ef 	.word	0x080052ef
 8005228:	080052ef 	.word	0x080052ef
 800522c:	080052ef 	.word	0x080052ef
 8005230:	080052ef 	.word	0x080052ef
 8005234:	080052ef 	.word	0x080052ef
 8005238:	080052ef 	.word	0x080052ef
 800523c:	080052ef 	.word	0x080052ef
 8005240:	080052bb 	.word	0x080052bb
 8005244:	080052ef 	.word	0x080052ef
 8005248:	080052ef 	.word	0x080052ef
 800524c:	080052ef 	.word	0x080052ef
 8005250:	080052ef 	.word	0x080052ef
 8005254:	080052ef 	.word	0x080052ef
 8005258:	080052ef 	.word	0x080052ef
 800525c:	080052ef 	.word	0x080052ef
 8005260:	080052ef 	.word	0x080052ef
 8005264:	080052ef 	.word	0x080052ef
 8005268:	080052ef 	.word	0x080052ef
 800526c:	080052ef 	.word	0x080052ef
 8005270:	080052ef 	.word	0x080052ef
 8005274:	080052ef 	.word	0x080052ef
 8005278:	080052ef 	.word	0x080052ef
 800527c:	080052ef 	.word	0x080052ef
 8005280:	080052e1 	.word	0x080052e1
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d02e      	beq.n	80052e6 <UART_SetConfig+0xab2>
 8005288:	e031      	b.n	80052ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528a:	f7fd f95b 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 800528e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005290:	e033      	b.n	80052fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005292:	f7fd f96d 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 8005296:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005298:	e02f      	b.n	80052fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800529a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fb92 	bl	80039c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052a8:	e027      	b.n	80052fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052aa:	f107 0318 	add.w	r3, r7, #24
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe fcde 	bl	8003c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052b8:	e01f      	b.n	80052fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ba:	4b69      	ldr	r3, [pc, #420]	; (8005460 <UART_SetConfig+0xc2c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052c6:	4b66      	ldr	r3, [pc, #408]	; (8005460 <UART_SetConfig+0xc2c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	4a64      	ldr	r2, [pc, #400]	; (8005464 <UART_SetConfig+0xc30>)
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052d8:	e00f      	b.n	80052fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80052da:	4b62      	ldr	r3, [pc, #392]	; (8005464 <UART_SetConfig+0xc30>)
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052de:	e00c      	b.n	80052fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052e0:	4b61      	ldr	r3, [pc, #388]	; (8005468 <UART_SetConfig+0xc34>)
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052e4:	e009      	b.n	80052fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ec:	e005      	b.n	80052fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80052f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80ea 	beq.w	80054d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	4a55      	ldr	r2, [pc, #340]	; (800545c <UART_SetConfig+0xc28>)
 8005308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800530c:	461a      	mov	r2, r3
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	fbb3 f3f2 	udiv	r3, r3, r2
 8005314:	005a      	lsls	r2, r3, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	441a      	add	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	fbb2 f3f3 	udiv	r3, r2, r3
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	2b0f      	cmp	r3, #15
 800532c:	d916      	bls.n	800535c <UART_SetConfig+0xb28>
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005334:	d212      	bcs.n	800535c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	b29b      	uxth	r3, r3
 800533a:	f023 030f 	bic.w	r3, r3, #15
 800533e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	b29b      	uxth	r3, r3
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	b29a      	uxth	r2, r3
 800534c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800534e:	4313      	orrs	r3, r2
 8005350:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	e0bc      	b.n	80054d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005362:	e0b8      	b.n	80054d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005364:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005368:	2b20      	cmp	r3, #32
 800536a:	dc4b      	bgt.n	8005404 <UART_SetConfig+0xbd0>
 800536c:	2b00      	cmp	r3, #0
 800536e:	f2c0 8087 	blt.w	8005480 <UART_SetConfig+0xc4c>
 8005372:	2b20      	cmp	r3, #32
 8005374:	f200 8084 	bhi.w	8005480 <UART_SetConfig+0xc4c>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0xb4c>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	0800540b 	.word	0x0800540b
 8005384:	08005413 	.word	0x08005413
 8005388:	08005481 	.word	0x08005481
 800538c:	08005481 	.word	0x08005481
 8005390:	0800541b 	.word	0x0800541b
 8005394:	08005481 	.word	0x08005481
 8005398:	08005481 	.word	0x08005481
 800539c:	08005481 	.word	0x08005481
 80053a0:	0800542b 	.word	0x0800542b
 80053a4:	08005481 	.word	0x08005481
 80053a8:	08005481 	.word	0x08005481
 80053ac:	08005481 	.word	0x08005481
 80053b0:	08005481 	.word	0x08005481
 80053b4:	08005481 	.word	0x08005481
 80053b8:	08005481 	.word	0x08005481
 80053bc:	08005481 	.word	0x08005481
 80053c0:	0800543b 	.word	0x0800543b
 80053c4:	08005481 	.word	0x08005481
 80053c8:	08005481 	.word	0x08005481
 80053cc:	08005481 	.word	0x08005481
 80053d0:	08005481 	.word	0x08005481
 80053d4:	08005481 	.word	0x08005481
 80053d8:	08005481 	.word	0x08005481
 80053dc:	08005481 	.word	0x08005481
 80053e0:	08005481 	.word	0x08005481
 80053e4:	08005481 	.word	0x08005481
 80053e8:	08005481 	.word	0x08005481
 80053ec:	08005481 	.word	0x08005481
 80053f0:	08005481 	.word	0x08005481
 80053f4:	08005481 	.word	0x08005481
 80053f8:	08005481 	.word	0x08005481
 80053fc:	08005481 	.word	0x08005481
 8005400:	08005473 	.word	0x08005473
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d037      	beq.n	8005478 <UART_SetConfig+0xc44>
 8005408:	e03a      	b.n	8005480 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800540a:	f7fd f89b 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 800540e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005410:	e03c      	b.n	800548c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005412:	f7fd f8ad 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 8005416:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005418:	e038      	b.n	800548c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800541a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fad2 	bl	80039c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005428:	e030      	b.n	800548c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800542a:	f107 0318 	add.w	r3, r7, #24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fc1e 	bl	8003c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005438:	e028      	b.n	800548c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <UART_SetConfig+0xc2c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d012      	beq.n	800546c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <UART_SetConfig+0xc2c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	08db      	lsrs	r3, r3, #3
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	4a04      	ldr	r2, [pc, #16]	; (8005464 <UART_SetConfig+0xc30>)
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005458:	e018      	b.n	800548c <UART_SetConfig+0xc58>
 800545a:	bf00      	nop
 800545c:	0800a9d4 	.word	0x0800a9d4
 8005460:	58024400 	.word	0x58024400
 8005464:	03d09000 	.word	0x03d09000
 8005468:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800546c:	4b24      	ldr	r3, [pc, #144]	; (8005500 <UART_SetConfig+0xccc>)
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005470:	e00c      	b.n	800548c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <UART_SetConfig+0xcd0>)
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005476:	e009      	b.n	800548c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547e:	e005      	b.n	800548c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800548a:	bf00      	nop
    }

    if (pclk != 0U)
 800548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d021      	beq.n	80054d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <UART_SetConfig+0xcd4>)
 8005498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549c:	461a      	mov	r2, r3
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	441a      	add	r2, r3
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d909      	bls.n	80054d0 <UART_SetConfig+0xc9c>
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c2:	d205      	bcs.n	80054d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	e002      	b.n	80054d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2201      	movs	r2, #1
 80054da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2200      	movs	r2, #0
 80054ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2200      	movs	r2, #0
 80054f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3748      	adds	r7, #72	; 0x48
 80054fa:	46bd      	mov	sp, r7
 80054fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005500:	03d09000 	.word	0x03d09000
 8005504:	003d0900 	.word	0x003d0900
 8005508:	0800a9d4 	.word	0x0800a9d4

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d10a      	bne.n	8005622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b098      	sub	sp, #96	; 0x60
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005660:	f7fb fcce 	bl	8001000 <HAL_GetTick>
 8005664:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d12f      	bne.n	80056d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f88e 	bl	80057a4 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d022      	beq.n	80056d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	653b      	str	r3, [r7, #80]	; 0x50
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
 80056ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e6      	bne.n	800568e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e063      	b.n	800579c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d149      	bne.n	8005776 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ea:	2200      	movs	r2, #0
 80056ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f857 	bl	80057a4 <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d03c      	beq.n	8005776 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	623b      	str	r3, [r7, #32]
   return(result);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005710:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571a:	633b      	str	r3, [r7, #48]	; 0x30
 800571c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	60fb      	str	r3, [r7, #12]
   return(result);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	64bb      	str	r3, [r7, #72]	; 0x48
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800574e:	61fa      	str	r2, [r7, #28]
 8005750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	69b9      	ldr	r1, [r7, #24]
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	617b      	str	r3, [r7, #20]
   return(result);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e012      	b.n	800579c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3758      	adds	r7, #88	; 0x58
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b4:	e049      	b.n	800584a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d045      	beq.n	800584a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fb fc1f 	bl	8001000 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e048      	b.n	800586a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d031      	beq.n	800584a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d110      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2208      	movs	r2, #8
 80057fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f839 	bl	8005874 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2208      	movs	r2, #8
 8005806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e029      	b.n	800586a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005824:	d111      	bne.n	800584a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800582e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f81f 	bl	8005874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e00f      	b.n	800586a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4013      	ands	r3, r2
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	429a      	cmp	r2, r3
 8005866:	d0a6      	beq.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b095      	sub	sp, #84	; 0x54
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	643b      	str	r3, [r7, #64]	; 0x40
 800589c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e6      	bne.n	800587c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <UART_EndRxTransfer+0xc8>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e5      	bne.n	80058ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d118      	bne.n	800591c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 0310 	bic.w	r3, r3, #16
 80058fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	613b      	str	r3, [r7, #16]
   return(result);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e6      	bne.n	80058ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005930:	bf00      	nop
 8005932:	3754      	adds	r7, #84	; 0x54
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	effffffe 	.word	0xeffffffe

08005940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_UARTEx_DisableFifoMode+0x16>
 8005952:	2302      	movs	r3, #2
 8005954:	e027      	b.n	80059a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2224      	movs	r2, #36	; 0x24
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e02d      	b.n	8005a26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2224      	movs	r2, #36	; 0x24
 80059d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f850 	bl	8005aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e02d      	b.n	8005aa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2224      	movs	r2, #36	; 0x24
 8005a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f812 	bl	8005aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005acc:	e031      	b.n	8005b32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ace:	2310      	movs	r3, #16
 8005ad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	0e5b      	lsrs	r3, r3, #25
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	0f5b      	lsrs	r3, r3, #29
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005af6:	7bbb      	ldrb	r3, [r7, #14]
 8005af8:	7b3a      	ldrb	r2, [r7, #12]
 8005afa:	4911      	ldr	r1, [pc, #68]	; (8005b40 <UARTEx_SetNbDataToProcess+0x94>)
 8005afc:	5c8a      	ldrb	r2, [r1, r2]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b02:	7b3a      	ldrb	r2, [r7, #12]
 8005b04:	490f      	ldr	r1, [pc, #60]	; (8005b44 <UARTEx_SetNbDataToProcess+0x98>)
 8005b06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	7b7a      	ldrb	r2, [r7, #13]
 8005b18:	4909      	ldr	r1, [pc, #36]	; (8005b40 <UARTEx_SetNbDataToProcess+0x94>)
 8005b1a:	5c8a      	ldrb	r2, [r1, r2]
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b20:	7b7a      	ldrb	r2, [r7, #13]
 8005b22:	4908      	ldr	r1, [pc, #32]	; (8005b44 <UARTEx_SetNbDataToProcess+0x98>)
 8005b24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b26:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	0800a9ec 	.word	0x0800a9ec
 8005b44:	0800a9f4 	.word	0x0800a9f4

08005b48 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f103 0208 	add.w	r2, r3, #8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f103 0208 	add.w	r2, r3, #8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f103 0208 	add.w	r2, r3, #8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d103      	bne.n	8005bc2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e00c      	b.n	8005bdc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e002      	b.n	8005bd0 <vListInsert+0x2e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d2f6      	bcs.n	8005bca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6892      	ldr	r2, [r2, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6852      	ldr	r2, [r2, #4]
 8005c34:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d103      	bne.n	8005c48 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	1e5a      	subs	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005c72:	2301      	movs	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xQueueGenericReset+0x2e>
        __asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	60fb      	str	r3, [r7, #12]
    }
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05d      	beq.n	8005d58 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d059      	beq.n	8005d58 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	2100      	movs	r1, #0
 8005cae:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d000      	beq.n	8005cb8 <xQueueGenericReset+0x50>
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d14c      	bne.n	8005d58 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005cbe:	f001 ff39 	bl	8007b34 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	6939      	ldr	r1, [r7, #16]
 8005ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	441a      	add	r2, r3
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	6939      	ldr	r1, [r7, #16]
 8005cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	441a      	add	r2, r3
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	22ff      	movs	r2, #255	; 0xff
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d114      	bne.n	8005d3e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01a      	beq.n	8005d52 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3310      	adds	r3, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 ffe1 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <xQueueGenericReset+0x11c>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	e009      	b.n	8005d52 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	3310      	adds	r3, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff00 	bl	8005b48 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fefb 	bl	8005b48 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005d52:	f001 ff1f 	bl	8007b94 <vPortExitCritical>
 8005d56:	e001      	b.n	8005d5c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <xQueueGenericReset+0x110>
        __asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60bb      	str	r3, [r7, #8]
    }
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005d78:	697b      	ldr	r3, [r7, #20]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d02e      	beq.n	8005dfe <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005da0:	2100      	movs	r1, #0
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	fba3 2302 	umull	r2, r3, r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d000      	beq.n	8005db0 <xQueueGenericCreate+0x28>
 8005dae:	2101      	movs	r1, #1
 8005db0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d123      	bne.n	8005dfe <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005dbe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005dc2:	d81c      	bhi.n	8005dfe <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	3350      	adds	r3, #80	; 0x50
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 ffda 	bl	8007d8c <pvPortMalloc>
 8005dd8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01c      	beq.n	8005e1a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3350      	adds	r3, #80	; 0x50
 8005de8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dea:	79fa      	ldrb	r2, [r7, #7]
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f814 	bl	8005e24 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005dfc:	e00d      	b.n	8005e1a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xQueueGenericCreate+0x92>
        __asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	613b      	str	r3, [r7, #16]
    }
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
    }
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e002      	b.n	8005e46 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e52:	2101      	movs	r1, #1
 8005e54:	69b8      	ldr	r0, [r7, #24]
 8005e56:	f7ff ff07 	bl	8005c68 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	2073      	movs	r0, #115	; 0x73
 8005e6a:	f003 f94d 	bl	8009108 <SEGGER_SYSVIEW_RecordU32x3>
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b08f      	sub	sp, #60	; 0x3c
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <xQueueReceive+0x30>
        __asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	623b      	str	r3, [r7, #32]
    }
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <xQueueReceive+0x3e>
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <xQueueReceive+0x42>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueReceive+0x44>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <xQueueReceive+0x5e>
        __asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	61fb      	str	r3, [r7, #28]
    }
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ed6:	f001 f953 	bl	8007180 <xTaskGetSchedulerState>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <xQueueReceive+0x6e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <xQueueReceive+0x72>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueueReceive+0x74>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueReceive+0x8e>
        __asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	61bb      	str	r3, [r7, #24]
    }
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f06:	f001 fe15 	bl	8007b34 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d02f      	beq.n	8005f76 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f1a:	f000 f8bd 	bl	8006098 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	4618      	mov	r0, r3
 8005f22:	f003 fe1d 	bl	8009b60 <SEGGER_SYSVIEW_ShrinkId>
 8005f26:	4604      	mov	r4, r0
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f003 fe19 	bl	8009b60 <SEGGER_SYSVIEW_ShrinkId>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2101      	movs	r1, #1
 8005f34:	9100      	str	r1, [sp, #0]
 8005f36:	4621      	mov	r1, r4
 8005f38:	205c      	movs	r0, #92	; 0x5c
 8005f3a:	f003 f95b 	bl	80091f4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	1e5a      	subs	r2, r3, #1
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00f      	beq.n	8005f6e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	3310      	adds	r3, #16
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fec8 	bl	8006ce8 <xTaskRemoveFromEventList>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005f5e:	4b4d      	ldr	r3, [pc, #308]	; (8006094 <xQueueReceive+0x21c>)
 8005f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005f6e:	f001 fe11 	bl	8007b94 <vPortExitCritical>
                return pdPASS;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e08a      	b.n	800608c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d113      	bne.n	8005fa4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005f7c:	f001 fe0a 	bl	8007b94 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	4618      	mov	r0, r3
 8005f84:	f003 fdec 	bl	8009b60 <SEGGER_SYSVIEW_ShrinkId>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f003 fde8 	bl	8009b60 <SEGGER_SYSVIEW_ShrinkId>
 8005f90:	4602      	mov	r2, r0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2101      	movs	r1, #1
 8005f96:	9100      	str	r1, [sp, #0]
 8005f98:	4621      	mov	r1, r4
 8005f9a:	205c      	movs	r0, #92	; 0x5c
 8005f9c:	f003 f92a 	bl	80091f4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e073      	b.n	800608c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005faa:	f107 0310 	add.w	r3, r7, #16
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 ff74 	bl	8006e9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005fb8:	f001 fdec 	bl	8007b94 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005fbc:	f000 fb70 	bl	80066a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005fc0:	f001 fdb8 	bl	8007b34 <vPortEnterCritical>
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d103      	bne.n	8005fda <xQueueReceive+0x162>
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	d103      	bne.n	8005ff0 <xQueueReceive+0x178>
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff0:	f001 fdd0 	bl	8007b94 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff4:	1d3a      	adds	r2, r7, #4
 8005ff6:	f107 0310 	add.w	r3, r7, #16
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 ff63 	bl	8006ec8 <xTaskCheckForTimeOut>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d124      	bne.n	8006052 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600a:	f000 f8bd 	bl	8006188 <prvIsQueueEmpty>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d018      	beq.n	8006046 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	3324      	adds	r3, #36	; 0x24
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fdf7 	bl	8006c10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006024:	f000 f85e 	bl	80060e4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006028:	f000 fb48 	bl	80066bc <xTaskResumeAll>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	f47f af69 	bne.w	8005f06 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006034:	4b17      	ldr	r3, [pc, #92]	; (8006094 <xQueueReceive+0x21c>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	e75f      	b.n	8005f06 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006048:	f000 f84c 	bl	80060e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800604c:	f000 fb36 	bl	80066bc <xTaskResumeAll>
 8006050:	e759      	b.n	8005f06 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006054:	f000 f846 	bl	80060e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006058:	f000 fb30 	bl	80066bc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800605c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605e:	f000 f893 	bl	8006188 <prvIsQueueEmpty>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	f43f af4e 	beq.w	8005f06 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	4618      	mov	r0, r3
 800606e:	f003 fd77 	bl	8009b60 <SEGGER_SYSVIEW_ShrinkId>
 8006072:	4604      	mov	r4, r0
 8006074:	2000      	movs	r0, #0
 8006076:	f003 fd73 	bl	8009b60 <SEGGER_SYSVIEW_ShrinkId>
 800607a:	4602      	mov	r2, r0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2101      	movs	r1, #1
 8006080:	9100      	str	r1, [sp, #0]
 8006082:	4621      	mov	r1, r4
 8006084:	205c      	movs	r0, #92	; 0x5c
 8006086:	f003 f8b5 	bl	80091f4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800608a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800608c:	4618      	mov	r0, r3
 800608e:	3734      	adds	r7, #52	; 0x34
 8006090:	46bd      	mov	sp, r7
 8006092:	bd90      	pop	{r4, r7, pc}
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d018      	beq.n	80060dc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	441a      	add	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d303      	bcc.n	80060cc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68d9      	ldr	r1, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	461a      	mov	r2, r3
 80060d6:	6838      	ldr	r0, [r7, #0]
 80060d8:	f003 fed0 	bl	8009e7c <memcpy>
    }
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80060ec:	f001 fd22 	bl	8007b34 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060f6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80060f8:	e011      	b.n	800611e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d012      	beq.n	8006128 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fdee 	bl	8006ce8 <xTaskRemoveFromEventList>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006112:	f000 ff3f 	bl	8006f94 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	3b01      	subs	r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800611e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	dce9      	bgt.n	80060fa <prvUnlockQueue+0x16>
 8006126:	e000      	b.n	800612a <prvUnlockQueue+0x46>
                    break;
 8006128:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	22ff      	movs	r2, #255	; 0xff
 800612e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006132:	f001 fd2f 	bl	8007b94 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006136:	f001 fcfd 	bl	8007b34 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006140:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006142:	e011      	b.n	8006168 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d012      	beq.n	8006172 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3310      	adds	r3, #16
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fdc9 	bl	8006ce8 <xTaskRemoveFromEventList>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800615c:	f000 ff1a 	bl	8006f94 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	3b01      	subs	r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dce9      	bgt.n	8006144 <prvUnlockQueue+0x60>
 8006170:	e000      	b.n	8006174 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006172:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	22ff      	movs	r2, #255	; 0xff
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800617c:	f001 fd0a 	bl	8007b94 <vPortExitCritical>
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006190:	f001 fcd0 	bl	8007b34 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e001      	b.n	80061a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80061a6:	f001 fcf5 	bl	8007b94 <vPortExitCritical>

    return xReturn;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <vQueueAddToRegistry+0x2a>
        __asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60fb      	str	r3, [r7, #12]
    }
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d024      	beq.n	800622e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e01e      	b.n	8006228 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80061ea:	4a1c      	ldr	r2, [pc, #112]	; (800625c <vQueueAddToRegistry+0xa8>)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d105      	bne.n	8006206 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <vQueueAddToRegistry+0xa8>)
 8006200:	4413      	add	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
                    break;
 8006204:	e013      	b.n	800622e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <vQueueAddToRegistry+0x6e>
 800620c:	4a13      	ldr	r2, [pc, #76]	; (800625c <vQueueAddToRegistry+0xa8>)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4a0f      	ldr	r2, [pc, #60]	; (800625c <vQueueAddToRegistry+0xa8>)
 800621e:	4413      	add	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	3301      	adds	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b07      	cmp	r3, #7
 800622c:	d9dd      	bls.n	80061ea <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00f      	beq.n	8006254 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	f003 fc8c 	bl	8009b60 <SEGGER_SYSVIEW_ShrinkId>
 8006248:	4601      	mov	r1, r0
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	2071      	movs	r0, #113	; 0x71
 8006250:	f002 ff00 	bl	8009054 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	2400017c 	.word	0x2400017c

08006260 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006270:	f001 fc60 	bl	8007b34 <vPortEnterCritical>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d103      	bne.n	800628a <vQueueWaitForMessageRestricted+0x2a>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006290:	b25b      	sxtb	r3, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d103      	bne.n	80062a0 <vQueueWaitForMessageRestricted+0x40>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a0:	f001 fc78 	bl	8007b94 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3324      	adds	r3, #36	; 0x24
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fccf 	bl	8006c58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80062ba:	6978      	ldr	r0, [r7, #20]
 80062bc:	f7ff ff12 	bl	80060e4 <prvUnlockQueue>
    }
 80062c0:	bf00      	nop
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08c      	sub	sp, #48	; 0x30
 80062cc:	af04      	add	r7, sp, #16
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062d8:	88fb      	ldrh	r3, [r7, #6]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fd55 	bl	8007d8c <pvPortMalloc>
 80062e2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d013      	beq.n	8006312 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062ea:	205c      	movs	r0, #92	; 0x5c
 80062ec:	f001 fd4e 	bl	8007d8c <pvPortMalloc>
 80062f0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80062f8:	225c      	movs	r2, #92	; 0x5c
 80062fa:	2100      	movs	r1, #0
 80062fc:	69f8      	ldr	r0, [r7, #28]
 80062fe:	f003 fdcb 	bl	8009e98 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
 8006308:	e005      	b.n	8006316 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	f001 fdf8 	bl	8007f00 <vPortFree>
 8006310:	e001      	b.n	8006316 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d013      	beq.n	8006344 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	2300      	movs	r3, #0
 8006320:	9303      	str	r3, [sp, #12]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	9302      	str	r3, [sp, #8]
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f80e 	bl	8006354 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006338:	69f8      	ldr	r0, [r7, #28]
 800633a:	f000 f899 	bl	8006470 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800633e:	2301      	movs	r3, #1
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	e002      	b.n	800634a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006344:	f04f 33ff 	mov.w	r3, #4294967295
 8006348:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800634a:	69bb      	ldr	r3, [r7, #24]
    }
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	461a      	mov	r2, r3
 800636c:	21a5      	movs	r1, #165	; 0xa5
 800636e:	f003 fd93 	bl	8009e98 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800637c:	440b      	add	r3, r1
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f023 0307 	bic.w	r3, r3, #7
 800638a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <prvInitialiseNewTask+0x58>
        __asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	617b      	str	r3, [r7, #20]
    }
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01e      	beq.n	80063f0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	e012      	b.n	80063de <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	7819      	ldrb	r1, [r3, #0]
 80063c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	3334      	adds	r3, #52	; 0x34
 80063c8:	460a      	mov	r2, r1
 80063ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	3301      	adds	r3, #1
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2b0f      	cmp	r3, #15
 80063e2:	d9e9      	bls.n	80063b8 <prvInitialiseNewTask+0x64>
 80063e4:	e000      	b.n	80063e8 <prvInitialiseNewTask+0x94>
            {
                break;
 80063e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	2b37      	cmp	r3, #55	; 0x37
 80063f4:	d90a      	bls.n	800640c <prvInitialiseNewTask+0xb8>
        __asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	613b      	str	r3, [r7, #16]
    }
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	2b37      	cmp	r3, #55	; 0x37
 8006410:	d901      	bls.n	8006416 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006412:	2337      	movs	r3, #55	; 0x37
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006420:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	3304      	adds	r3, #4
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fbae 	bl	8005b88 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	3318      	adds	r3, #24
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fba9 	bl	8005b88 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	68f9      	ldr	r1, [r7, #12]
 8006450:	69b8      	ldr	r0, [r7, #24]
 8006452:	f001 f9c1 	bl	80077d8 <pxPortInitialiseStack>
 8006456:	4602      	mov	r2, r0
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006466:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006468:	bf00      	nop
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006470:	b5b0      	push	{r4, r5, r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af02      	add	r7, sp, #8
 8006476:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006478:	f001 fb5c 	bl	8007b34 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800647c:	4b50      	ldr	r3, [pc, #320]	; (80065c0 <prvAddNewTaskToReadyList+0x150>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3301      	adds	r3, #1
 8006482:	4a4f      	ldr	r2, [pc, #316]	; (80065c0 <prvAddNewTaskToReadyList+0x150>)
 8006484:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006486:	4b4f      	ldr	r3, [pc, #316]	; (80065c4 <prvAddNewTaskToReadyList+0x154>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800648e:	4a4d      	ldr	r2, [pc, #308]	; (80065c4 <prvAddNewTaskToReadyList+0x154>)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006494:	4b4a      	ldr	r3, [pc, #296]	; (80065c0 <prvAddNewTaskToReadyList+0x150>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d110      	bne.n	80064be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800649c:	f000 fd9e 	bl	8006fdc <prvInitialiseTaskLists>
 80064a0:	e00d      	b.n	80064be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80064a2:	4b49      	ldr	r3, [pc, #292]	; (80065c8 <prvAddNewTaskToReadyList+0x158>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064aa:	4b46      	ldr	r3, [pc, #280]	; (80065c4 <prvAddNewTaskToReadyList+0x154>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d802      	bhi.n	80064be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80064b8:	4a42      	ldr	r2, [pc, #264]	; (80065c4 <prvAddNewTaskToReadyList+0x154>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80064be:	4b43      	ldr	r3, [pc, #268]	; (80065cc <prvAddNewTaskToReadyList+0x15c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a41      	ldr	r2, [pc, #260]	; (80065cc <prvAddNewTaskToReadyList+0x15c>)
 80064c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064c8:	4b40      	ldr	r3, [pc, #256]	; (80065cc <prvAddNewTaskToReadyList+0x15c>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <prvAddNewTaskToReadyList+0x94>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4618      	mov	r0, r3
 80064da:	f003 fa7b 	bl	80099d4 <SEGGER_SYSVIEW_OnTaskCreate>
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	461d      	mov	r5, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461c      	mov	r4, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	1ae3      	subs	r3, r4, r3
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	462b      	mov	r3, r5
 8006500:	f001 fed6 	bl	80082b0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	f003 fae8 	bl	8009adc <SEGGER_SYSVIEW_OnTaskStartReady>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <prvAddNewTaskToReadyList+0x160>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d903      	bls.n	8006520 <prvAddNewTaskToReadyList+0xb0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4a2c      	ldr	r2, [pc, #176]	; (80065d0 <prvAddNewTaskToReadyList+0x160>)
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	492b      	ldr	r1, [pc, #172]	; (80065d4 <prvAddNewTaskToReadyList+0x164>)
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	3304      	adds	r3, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	609a      	str	r2, [r3, #8]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	3204      	adds	r2, #4
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	1d1a      	adds	r2, r3, #4
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	609a      	str	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <prvAddNewTaskToReadyList+0x164>)
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	615a      	str	r2, [r3, #20]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4919      	ldr	r1, [pc, #100]	; (80065d4 <prvAddNewTaskToReadyList+0x164>)
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1c59      	adds	r1, r3, #1
 800657e:	4815      	ldr	r0, [pc, #84]	; (80065d4 <prvAddNewTaskToReadyList+0x164>)
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4403      	add	r3, r0
 800658a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800658c:	f001 fb02 	bl	8007b94 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006590:	4b0d      	ldr	r3, [pc, #52]	; (80065c8 <prvAddNewTaskToReadyList+0x158>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <prvAddNewTaskToReadyList+0x146>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <prvAddNewTaskToReadyList+0x154>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d207      	bcs.n	80065b6 <prvAddNewTaskToReadyList+0x146>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <prvAddNewTaskToReadyList+0x168>)
 80065a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80065b6:	bf00      	nop
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bdb0      	pop	{r4, r5, r7, pc}
 80065be:	bf00      	nop
 80065c0:	24000690 	.word	0x24000690
 80065c4:	240001bc 	.word	0x240001bc
 80065c8:	2400069c 	.word	0x2400069c
 80065cc:	240006ac 	.word	0x240006ac
 80065d0:	24000698 	.word	0x24000698
 80065d4:	240001c0 	.word	0x240001c0
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80065e2:	4b27      	ldr	r3, [pc, #156]	; (8006680 <vTaskStartScheduler+0xa4>)
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	2300      	movs	r3, #0
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	2300      	movs	r3, #0
 80065ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065f0:	4924      	ldr	r1, [pc, #144]	; (8006684 <vTaskStartScheduler+0xa8>)
 80065f2:	4825      	ldr	r0, [pc, #148]	; (8006688 <vTaskStartScheduler+0xac>)
 80065f4:	f7ff fe68 	bl	80062c8 <xTaskCreate>
 80065f8:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 8006600:	f000 fe4a 	bl	8007298 <xTimerCreateTimerTask>
 8006604:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d124      	bne.n	8006656 <vTaskStartScheduler+0x7a>
        __asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	60bb      	str	r3, [r7, #8]
    }
 800661e:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006620:	4b1a      	ldr	r3, [pc, #104]	; (800668c <vTaskStartScheduler+0xb0>)
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <vTaskStartScheduler+0xb4>)
 800662a:	2201      	movs	r2, #1
 800662c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800662e:	4b19      	ldr	r3, [pc, #100]	; (8006694 <vTaskStartScheduler+0xb8>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006634:	4b18      	ldr	r3, [pc, #96]	; (8006698 <vTaskStartScheduler+0xbc>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b11      	ldr	r3, [pc, #68]	; (8006680 <vTaskStartScheduler+0xa4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d102      	bne.n	8006646 <vTaskStartScheduler+0x6a>
 8006640:	f003 f9ac 	bl	800999c <SEGGER_SYSVIEW_OnIdle>
 8006644:	e004      	b.n	8006650 <vTaskStartScheduler+0x74>
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <vTaskStartScheduler+0xbc>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f003 fa04 	bl	8009a58 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006650:	f001 f950 	bl	80078f4 <xPortStartScheduler>
 8006654:	e00e      	b.n	8006674 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d10a      	bne.n	8006674 <vTaskStartScheduler+0x98>
        __asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	607b      	str	r3, [r7, #4]
    }
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <vTaskStartScheduler+0x96>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006674:	4b09      	ldr	r3, [pc, #36]	; (800669c <vTaskStartScheduler+0xc0>)
 8006676:	681b      	ldr	r3, [r3, #0]
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	240006b4 	.word	0x240006b4
 8006684:	0800a8f4 	.word	0x0800a8f4
 8006688:	08006fad 	.word	0x08006fad
 800668c:	240006b0 	.word	0x240006b0
 8006690:	2400069c 	.word	0x2400069c
 8006694:	24000694 	.word	0x24000694
 8006698:	240001bc 	.word	0x240001bc
 800669c:	24000010 	.word	0x24000010

080066a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <vTaskSuspendAll+0x18>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a03      	ldr	r2, [pc, #12]	; (80066b8 <vTaskSuspendAll+0x18>)
 80066ac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80066ae:	bf00      	nop
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	240006b8 	.word	0x240006b8

080066bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80066ca:	4b73      	ldr	r3, [pc, #460]	; (8006898 <xTaskResumeAll+0x1dc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <xTaskResumeAll+0x2c>
        __asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	607b      	str	r3, [r7, #4]
    }
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80066e8:	f001 fa24 	bl	8007b34 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80066ec:	4b6a      	ldr	r3, [pc, #424]	; (8006898 <xTaskResumeAll+0x1dc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4a69      	ldr	r2, [pc, #420]	; (8006898 <xTaskResumeAll+0x1dc>)
 80066f4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f6:	4b68      	ldr	r3, [pc, #416]	; (8006898 <xTaskResumeAll+0x1dc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f040 80c5 	bne.w	800688a <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006700:	4b66      	ldr	r3, [pc, #408]	; (800689c <xTaskResumeAll+0x1e0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80c0 	beq.w	800688a <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800670a:	e08f      	b.n	800682c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670c:	4b64      	ldr	r3, [pc, #400]	; (80068a0 <xTaskResumeAll+0x1e4>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	6a12      	ldr	r2, [r2, #32]
 8006722:	609a      	str	r2, [r3, #8]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	69d2      	ldr	r2, [r2, #28]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3318      	adds	r3, #24
 8006736:	429a      	cmp	r2, r3
 8006738:	d103      	bne.n	8006742 <xTaskResumeAll+0x86>
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	6a1a      	ldr	r2, [r3, #32]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	2200      	movs	r2, #0
 8006746:	629a      	str	r2, [r3, #40]	; 0x28
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	68d2      	ldr	r2, [r2, #12]
 8006760:	609a      	str	r2, [r3, #8]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	6892      	ldr	r2, [r2, #8]
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3304      	adds	r3, #4
 8006774:	429a      	cmp	r2, r3
 8006776:	d103      	bne.n	8006780 <xTaskResumeAll+0xc4>
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	605a      	str	r2, [r3, #4]
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2200      	movs	r2, #0
 8006784:	615a      	str	r2, [r3, #20]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4618      	mov	r0, r3
 8006794:	f003 f9a2 	bl	8009adc <SEGGER_SYSVIEW_OnTaskStartReady>
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	4b41      	ldr	r3, [pc, #260]	; (80068a4 <xTaskResumeAll+0x1e8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d903      	bls.n	80067ac <xTaskResumeAll+0xf0>
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	4a3e      	ldr	r2, [pc, #248]	; (80068a4 <xTaskResumeAll+0x1e8>)
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	493d      	ldr	r1, [pc, #244]	; (80068a8 <xTaskResumeAll+0x1ec>)
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3304      	adds	r3, #4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	609a      	str	r2, [r3, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	3204      	adds	r2, #4
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	609a      	str	r2, [r3, #8]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4a2e      	ldr	r2, [pc, #184]	; (80068a8 <xTaskResumeAll+0x1ec>)
 80067f0:	441a      	add	r2, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	615a      	str	r2, [r3, #20]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fa:	492b      	ldr	r1, [pc, #172]	; (80068a8 <xTaskResumeAll+0x1ec>)
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	4827      	ldr	r0, [pc, #156]	; (80068a8 <xTaskResumeAll+0x1ec>)
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4403      	add	r3, r0
 8006816:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4b23      	ldr	r3, [pc, #140]	; (80068ac <xTaskResumeAll+0x1f0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	429a      	cmp	r2, r3
 8006824:	d302      	bcc.n	800682c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8006826:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <xTaskResumeAll+0x1f4>)
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800682c:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <xTaskResumeAll+0x1e4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f47f af6b 	bne.w	800670c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800683c:	f000 fc84 	bl	8007148 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006840:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <xTaskResumeAll+0x1f8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800684c:	f000 f858 	bl	8006900 <xTaskIncrementTick>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8006856:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <xTaskResumeAll+0x1f4>)
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	3b01      	subs	r3, #1
 8006860:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f1      	bne.n	800684c <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8006868:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <xTaskResumeAll+0x1f8>)
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800686e:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <xTaskResumeAll+0x1f4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006876:	2301      	movs	r3, #1
 8006878:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800687a:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <xTaskResumeAll+0x1fc>)
 800687c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800688a:	f001 f983 	bl	8007b94 <vPortExitCritical>

    return xAlreadyYielded;
 800688e:	69bb      	ldr	r3, [r7, #24]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3720      	adds	r7, #32
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	240006b8 	.word	0x240006b8
 800689c:	24000690 	.word	0x24000690
 80068a0:	24000650 	.word	0x24000650
 80068a4:	24000698 	.word	0x24000698
 80068a8:	240001c0 	.word	0x240001c0
 80068ac:	240001bc 	.word	0x240001bc
 80068b0:	240006a4 	.word	0x240006a4
 80068b4:	240006a0 	.word	0x240006a0
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <xTaskGetTickCount+0x1c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80068c8:	687b      	ldr	r3, [r7, #4]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	24000694 	.word	0x24000694

080068dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068e2:	f001 fa13 	bl	8007d0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80068ea:	4b04      	ldr	r3, [pc, #16]	; (80068fc <xTaskGetTickCountFromISR+0x20>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80068f0:	683b      	ldr	r3, [r7, #0]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	24000694 	.word	0x24000694

08006900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800690a:	4b80      	ldr	r3, [pc, #512]	; (8006b0c <xTaskIncrementTick+0x20c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 80f1 	bne.w	8006af6 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006914:	4b7e      	ldr	r3, [pc, #504]	; (8006b10 <xTaskIncrementTick+0x210>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800691c:	4a7c      	ldr	r2, [pc, #496]	; (8006b10 <xTaskIncrementTick+0x210>)
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d120      	bne.n	800696a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006928:	4b7a      	ldr	r3, [pc, #488]	; (8006b14 <xTaskIncrementTick+0x214>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <xTaskIncrementTick+0x48>
        __asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	607b      	str	r3, [r7, #4]
    }
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xTaskIncrementTick+0x46>
 8006948:	4b72      	ldr	r3, [pc, #456]	; (8006b14 <xTaskIncrementTick+0x214>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	4b72      	ldr	r3, [pc, #456]	; (8006b18 <xTaskIncrementTick+0x218>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a70      	ldr	r2, [pc, #448]	; (8006b14 <xTaskIncrementTick+0x214>)
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4a70      	ldr	r2, [pc, #448]	; (8006b18 <xTaskIncrementTick+0x218>)
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	4b6f      	ldr	r3, [pc, #444]	; (8006b1c <xTaskIncrementTick+0x21c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	4a6e      	ldr	r2, [pc, #440]	; (8006b1c <xTaskIncrementTick+0x21c>)
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	f000 fbef 	bl	8007148 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800696a:	4b6d      	ldr	r3, [pc, #436]	; (8006b20 <xTaskIncrementTick+0x220>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a3a      	ldr	r2, [r7, #32]
 8006970:	429a      	cmp	r2, r3
 8006972:	f0c0 80ab 	bcc.w	8006acc <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006976:	4b67      	ldr	r3, [pc, #412]	; (8006b14 <xTaskIncrementTick+0x214>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006980:	4b67      	ldr	r3, [pc, #412]	; (8006b20 <xTaskIncrementTick+0x220>)
 8006982:	f04f 32ff 	mov.w	r2, #4294967295
 8006986:	601a      	str	r2, [r3, #0]
                    break;
 8006988:	e0a0      	b.n	8006acc <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698a:	4b62      	ldr	r3, [pc, #392]	; (8006b14 <xTaskIncrementTick+0x214>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800699a:	6a3a      	ldr	r2, [r7, #32]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d203      	bcs.n	80069aa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80069a2:	4a5f      	ldr	r2, [pc, #380]	; (8006b20 <xTaskIncrementTick+0x220>)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80069a8:	e090      	b.n	8006acc <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	68d2      	ldr	r2, [r2, #12]
 80069b8:	609a      	str	r2, [r3, #8]
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	6892      	ldr	r2, [r2, #8]
 80069c2:	605a      	str	r2, [r3, #4]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	3304      	adds	r3, #4
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d103      	bne.n	80069d8 <xTaskIncrementTick+0xd8>
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2200      	movs	r2, #0
 80069dc:	615a      	str	r2, [r3, #20]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	1e5a      	subs	r2, r3, #1
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01e      	beq.n	8006a2e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	6a12      	ldr	r2, [r2, #32]
 80069fe:	609a      	str	r2, [r3, #8]
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	69d2      	ldr	r2, [r2, #28]
 8006a08:	605a      	str	r2, [r3, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	3318      	adds	r3, #24
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d103      	bne.n	8006a1e <xTaskIncrementTick+0x11e>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	6a1a      	ldr	r2, [r3, #32]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	605a      	str	r2, [r3, #4]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2200      	movs	r2, #0
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	1e5a      	subs	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f003 f853 	bl	8009adc <SEGGER_SYSVIEW_OnTaskStartReady>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	4b3a      	ldr	r3, [pc, #232]	; (8006b24 <xTaskIncrementTick+0x224>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d903      	bls.n	8006a4a <xTaskIncrementTick+0x14a>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	4a37      	ldr	r2, [pc, #220]	; (8006b24 <xTaskIncrementTick+0x224>)
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	4936      	ldr	r1, [pc, #216]	; (8006b28 <xTaskIncrementTick+0x228>)
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	609a      	str	r2, [r3, #8]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	3204      	adds	r2, #4
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	1d1a      	adds	r2, r3, #4
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	609a      	str	r2, [r3, #8]
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4a26      	ldr	r2, [pc, #152]	; (8006b28 <xTaskIncrementTick+0x228>)
 8006a8e:	441a      	add	r2, r3
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	615a      	str	r2, [r3, #20]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a98:	4923      	ldr	r1, [pc, #140]	; (8006b28 <xTaskIncrementTick+0x228>)
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	1c59      	adds	r1, r3, #1
 8006aa8:	481f      	ldr	r0, [pc, #124]	; (8006b28 <xTaskIncrementTick+0x228>)
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4403      	add	r3, r0
 8006ab4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	4b1c      	ldr	r3, [pc, #112]	; (8006b2c <xTaskIncrementTick+0x22c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	f67f af58 	bls.w	8006976 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aca:	e754      	b.n	8006976 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006acc:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <xTaskIncrementTick+0x22c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad2:	4915      	ldr	r1, [pc, #84]	; (8006b28 <xTaskIncrementTick+0x228>)
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d901      	bls.n	8006ae8 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006ae8:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <xTaskIncrementTick+0x230>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8006af0:	2301      	movs	r3, #1
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	e004      	b.n	8006b00 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006af6:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <xTaskIncrementTick+0x234>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	4a0d      	ldr	r2, [pc, #52]	; (8006b34 <xTaskIncrementTick+0x234>)
 8006afe:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3728      	adds	r7, #40	; 0x28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	240006b8 	.word	0x240006b8
 8006b10:	24000694 	.word	0x24000694
 8006b14:	24000648 	.word	0x24000648
 8006b18:	2400064c 	.word	0x2400064c
 8006b1c:	240006a8 	.word	0x240006a8
 8006b20:	240006b0 	.word	0x240006b0
 8006b24:	24000698 	.word	0x24000698
 8006b28:	240001c0 	.word	0x240001c0
 8006b2c:	240001bc 	.word	0x240001bc
 8006b30:	240006a4 	.word	0x240006a4
 8006b34:	240006a0 	.word	0x240006a0

08006b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b3e:	4b2e      	ldr	r3, [pc, #184]	; (8006bf8 <vTaskSwitchContext+0xc0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006b46:	4b2d      	ldr	r3, [pc, #180]	; (8006bfc <vTaskSwitchContext+0xc4>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006b4c:	e04f      	b.n	8006bee <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8006b4e:	4b2b      	ldr	r3, [pc, #172]	; (8006bfc <vTaskSwitchContext+0xc4>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b54:	4b2a      	ldr	r3, [pc, #168]	; (8006c00 <vTaskSwitchContext+0xc8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	e010      	b.n	8006b7e <vTaskSwitchContext+0x46>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <vTaskSwitchContext+0x40>
        __asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	607b      	str	r3, [r7, #4]
    }
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <vTaskSwitchContext+0x3e>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	4921      	ldr	r1, [pc, #132]	; (8006c04 <vTaskSwitchContext+0xcc>)
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0e4      	beq.n	8006b5c <vTaskSwitchContext+0x24>
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <vTaskSwitchContext+0xcc>)
 8006b9e:	4413      	add	r3, r2
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	605a      	str	r2, [r3, #4]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d104      	bne.n	8006bc2 <vTaskSwitchContext+0x8a>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4a0f      	ldr	r2, [pc, #60]	; (8006c08 <vTaskSwitchContext+0xd0>)
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <vTaskSwitchContext+0xc8>)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <vTaskSwitchContext+0xd0>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <vTaskSwitchContext+0xd4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d102      	bne.n	8006be4 <vTaskSwitchContext+0xac>
 8006bde:	f002 fedd 	bl	800999c <SEGGER_SYSVIEW_OnIdle>
}
 8006be2:	e004      	b.n	8006bee <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 8006be4:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <vTaskSwitchContext+0xd0>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f002 ff35 	bl	8009a58 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	240006b8 	.word	0x240006b8
 8006bfc:	240006a4 	.word	0x240006a4
 8006c00:	24000698 	.word	0x24000698
 8006c04:	240001c0 	.word	0x240001c0
 8006c08:	240001bc 	.word	0x240001bc
 8006c0c:	240006b4 	.word	0x240006b4

08006c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	60fb      	str	r3, [r7, #12]
    }
 8006c32:	bf00      	nop
 8006c34:	e7fe      	b.n	8006c34 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c36:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <vTaskPlaceOnEventList+0x44>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3318      	adds	r3, #24
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fe ffaf 	bl	8005ba2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c44:	2101      	movs	r1, #1
 8006c46:	6838      	ldr	r0, [r7, #0]
 8006c48:	f000 fab8 	bl	80071bc <prvAddCurrentTaskToDelayedList>
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	240001bc 	.word	0x240001bc

08006c58 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	613b      	str	r3, [r7, #16]
    }
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	61da      	str	r2, [r3, #28]
 8006c8e:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	6892      	ldr	r2, [r2, #8]
 8006c96:	621a      	str	r2, [r3, #32]
 8006c98:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	3218      	adds	r2, #24
 8006ca2:	605a      	str	r2, [r3, #4]
 8006ca4:	4b0f      	ldr	r3, [pc, #60]	; (8006ce4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f103 0218 	add.w	r2, r3, #24
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	609a      	str	r2, [r3, #8]
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ccc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006cce:	2024      	movs	r0, #36	; 0x24
 8006cd0:	f002 f966 	bl	8008fa0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	68b8      	ldr	r0, [r7, #8]
 8006cd8:	f000 fa70 	bl	80071bc <prvAddCurrentTaskToDelayedList>
    }
 8006cdc:	bf00      	nop
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	240001bc 	.word	0x240001bc

08006ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08a      	sub	sp, #40	; 0x28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	60fb      	str	r3, [r7, #12]
    }
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	6a3a      	ldr	r2, [r7, #32]
 8006d20:	6a12      	ldr	r2, [r2, #32]
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	6a3a      	ldr	r2, [r7, #32]
 8006d2a:	69d2      	ldr	r2, [r2, #28]
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	3318      	adds	r3, #24
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d103      	bne.n	8006d42 <xTaskRemoveFromEventList+0x5a>
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	2200      	movs	r2, #0
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	1e5a      	subs	r2, r3, #1
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d52:	4b4c      	ldr	r3, [pc, #304]	; (8006e84 <xTaskRemoveFromEventList+0x19c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d163      	bne.n	8006e22 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	6a3a      	ldr	r2, [r7, #32]
 8006d66:	68d2      	ldr	r2, [r2, #12]
 8006d68:	609a      	str	r2, [r3, #8]
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	6892      	ldr	r2, [r2, #8]
 8006d72:	605a      	str	r2, [r3, #4]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d103      	bne.n	8006d88 <xTaskRemoveFromEventList+0xa0>
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	605a      	str	r2, [r3, #4]
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	615a      	str	r2, [r3, #20]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	1e5a      	subs	r2, r3, #1
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f002 fe9e 	bl	8009adc <SEGGER_SYSVIEW_OnTaskStartReady>
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b38      	ldr	r3, [pc, #224]	; (8006e88 <xTaskRemoveFromEventList+0x1a0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d903      	bls.n	8006db4 <xTaskRemoveFromEventList+0xcc>
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	4a35      	ldr	r2, [pc, #212]	; (8006e88 <xTaskRemoveFromEventList+0x1a0>)
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	4934      	ldr	r1, [pc, #208]	; (8006e8c <xTaskRemoveFromEventList+0x1a4>)
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	3204      	adds	r2, #4
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	1d1a      	adds	r2, r3, #4
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	609a      	str	r2, [r3, #8]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4a25      	ldr	r2, [pc, #148]	; (8006e8c <xTaskRemoveFromEventList+0x1a4>)
 8006df8:	441a      	add	r2, r3
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	615a      	str	r2, [r3, #20]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	4922      	ldr	r1, [pc, #136]	; (8006e8c <xTaskRemoveFromEventList+0x1a4>)
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	1c59      	adds	r1, r3, #1
 8006e12:	481e      	ldr	r0, [pc, #120]	; (8006e8c <xTaskRemoveFromEventList+0x1a4>)
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4403      	add	r3, r0
 8006e1e:	6019      	str	r1, [r3, #0]
 8006e20:	e01b      	b.n	8006e5a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e22:	4b1b      	ldr	r3, [pc, #108]	; (8006e90 <xTaskRemoveFromEventList+0x1a8>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	61da      	str	r2, [r3, #28]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	621a      	str	r2, [r3, #32]
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	3218      	adds	r2, #24
 8006e3e:	605a      	str	r2, [r3, #4]
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	f103 0218 	add.w	r2, r3, #24
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	609a      	str	r2, [r3, #8]
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <xTaskRemoveFromEventList+0x1a8>)
 8006e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <xTaskRemoveFromEventList+0x1a8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a0e      	ldr	r2, [pc, #56]	; (8006e90 <xTaskRemoveFromEventList+0x1a8>)
 8006e58:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <xTaskRemoveFromEventList+0x1ac>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d905      	bls.n	8006e74 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <xTaskRemoveFromEventList+0x1b0>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e001      	b.n	8006e78 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3728      	adds	r7, #40	; 0x28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	240006b8 	.word	0x240006b8
 8006e88:	24000698 	.word	0x24000698
 8006e8c:	240001c0 	.word	0x240001c0
 8006e90:	24000650 	.word	0x24000650
 8006e94:	240001bc 	.word	0x240001bc
 8006e98:	240006a4 	.word	0x240006a4

08006e9c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <vTaskInternalSetTimeOutState+0x24>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <vTaskInternalSetTimeOutState+0x28>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	240006a8 	.word	0x240006a8
 8006ec4:	24000694 	.word	0x24000694

08006ec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10a      	bne.n	8006eee <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	613b      	str	r3, [r7, #16]
    }
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
    }
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006f0a:	f000 fe13 	bl	8007b34 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <xTaskCheckForTimeOut+0xc4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d102      	bne.n	8006f2e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	e026      	b.n	8006f7c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <xTaskCheckForTimeOut+0xc8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d00a      	beq.n	8006f50 <xTaskCheckForTimeOut+0x88>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d305      	bcc.n	8006f50 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006f44:	2301      	movs	r3, #1
 8006f46:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e015      	b.n	8006f7c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d20b      	bcs.n	8006f72 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	1ad2      	subs	r2, r2, r3
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ff98 	bl	8006e9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	e004      	b.n	8006f7c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006f7c:	f000 fe0a 	bl	8007b94 <vPortExitCritical>

    return xReturn;
 8006f80:	69fb      	ldr	r3, [r7, #28]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	24000694 	.word	0x24000694
 8006f90:	240006a8 	.word	0x240006a8

08006f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006f98:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <vTaskMissedYield+0x14>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	240006a4 	.word	0x240006a4

08006fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006fb4:	f000 f852 	bl	800705c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <prvIdleTask+0x28>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d9f9      	bls.n	8006fb4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <prvIdleTask+0x2c>)
 8006fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006fd0:	e7f0      	b.n	8006fb4 <prvIdleTask+0x8>
 8006fd2:	bf00      	nop
 8006fd4:	240001c0 	.word	0x240001c0
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	e00c      	b.n	8007002 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4a12      	ldr	r2, [pc, #72]	; (800703c <prvInitialiseTaskLists+0x60>)
 8006ff4:	4413      	add	r3, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fda6 	bl	8005b48 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3301      	adds	r3, #1
 8007000:	607b      	str	r3, [r7, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b37      	cmp	r3, #55	; 0x37
 8007006:	d9ef      	bls.n	8006fe8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007008:	480d      	ldr	r0, [pc, #52]	; (8007040 <prvInitialiseTaskLists+0x64>)
 800700a:	f7fe fd9d 	bl	8005b48 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800700e:	480d      	ldr	r0, [pc, #52]	; (8007044 <prvInitialiseTaskLists+0x68>)
 8007010:	f7fe fd9a 	bl	8005b48 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007014:	480c      	ldr	r0, [pc, #48]	; (8007048 <prvInitialiseTaskLists+0x6c>)
 8007016:	f7fe fd97 	bl	8005b48 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800701a:	480c      	ldr	r0, [pc, #48]	; (800704c <prvInitialiseTaskLists+0x70>)
 800701c:	f7fe fd94 	bl	8005b48 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007020:	480b      	ldr	r0, [pc, #44]	; (8007050 <prvInitialiseTaskLists+0x74>)
 8007022:	f7fe fd91 	bl	8005b48 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <prvInitialiseTaskLists+0x78>)
 8007028:	4a05      	ldr	r2, [pc, #20]	; (8007040 <prvInitialiseTaskLists+0x64>)
 800702a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <prvInitialiseTaskLists+0x7c>)
 800702e:	4a05      	ldr	r2, [pc, #20]	; (8007044 <prvInitialiseTaskLists+0x68>)
 8007030:	601a      	str	r2, [r3, #0]
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	240001c0 	.word	0x240001c0
 8007040:	24000620 	.word	0x24000620
 8007044:	24000634 	.word	0x24000634
 8007048:	24000650 	.word	0x24000650
 800704c:	24000664 	.word	0x24000664
 8007050:	2400067c 	.word	0x2400067c
 8007054:	24000648 	.word	0x24000648
 8007058:	2400064c 	.word	0x2400064c

0800705c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007062:	e019      	b.n	8007098 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007064:	f000 fd66 	bl	8007b34 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007068:	4b10      	ldr	r3, [pc, #64]	; (80070ac <prvCheckTasksWaitingTermination+0x50>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fdcd 	bl	8005c14 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <prvCheckTasksWaitingTermination+0x54>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3b01      	subs	r3, #1
 8007080:	4a0b      	ldr	r2, [pc, #44]	; (80070b0 <prvCheckTasksWaitingTermination+0x54>)
 8007082:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007084:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <prvCheckTasksWaitingTermination+0x58>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3b01      	subs	r3, #1
 800708a:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <prvCheckTasksWaitingTermination+0x58>)
 800708c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800708e:	f000 fd81 	bl	8007b94 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f848 	bl	8007128 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007098:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <prvCheckTasksWaitingTermination+0x58>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e1      	bne.n	8007064 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	24000664 	.word	0x24000664
 80070b0:	24000690 	.word	0x24000690
 80070b4:	24000678 	.word	0x24000678

080070b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80070c4:	e005      	b.n	80070d2 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3301      	adds	r3, #1
 80070ca:	607b      	str	r3, [r7, #4]
            ulCount++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2ba5      	cmp	r3, #165	; 0xa5
 80070d8:	d0f5      	beq.n	80070c6 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	089b      	lsrs	r3, r3, #2
 80070de:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	b29b      	uxth	r3, r3
    }
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d102      	bne.n	8007104 <uxTaskGetStackHighWaterMark+0x14>
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <uxTaskGetStackHighWaterMark+0x34>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	e000      	b.n	8007106 <uxTaskGetStackHighWaterMark+0x16>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800710e:	6938      	ldr	r0, [r7, #16]
 8007110:	f7ff ffd2 	bl	80070b8 <prvTaskCheckFreeStackSpace>
 8007114:	4603      	mov	r3, r0
 8007116:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8007118:	68fb      	ldr	r3, [r7, #12]
    }
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	240001bc 	.word	0x240001bc

08007128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fee3 	bl	8007f00 <vPortFree>
            vPortFree( pxTCB );
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fee0 	bl	8007f00 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <prvResetNextTaskUnblockTime+0x30>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <prvResetNextTaskUnblockTime+0x34>)
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800715e:	e005      	b.n	800716c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <prvResetNextTaskUnblockTime+0x30>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a04      	ldr	r2, [pc, #16]	; (800717c <prvResetNextTaskUnblockTime+0x34>)
 800716a:	6013      	str	r3, [r2, #0]
}
 800716c:	bf00      	nop
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	24000648 	.word	0x24000648
 800717c:	240006b0 	.word	0x240006b0

08007180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <xTaskGetSchedulerState+0x34>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800718e:	2301      	movs	r3, #1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	e008      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <xTaskGetSchedulerState+0x38>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800719c:	2302      	movs	r3, #2
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e001      	b.n	80071a6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80071a6:	687b      	ldr	r3, [r7, #4]
    }
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	2400069c 	.word	0x2400069c
 80071b8:	240006b8 	.word	0x240006b8

080071bc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80071c6:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <prvAddCurrentTaskToDelayedList+0xc4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071cc:	4b2d      	ldr	r3, [pc, #180]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fd1e 	bl	8005c14 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d124      	bne.n	800722a <prvAddCurrentTaskToDelayedList+0x6e>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d021      	beq.n	800722a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e6:	4b28      	ldr	r3, [pc, #160]	; (8007288 <prvAddCurrentTaskToDelayedList+0xcc>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	4b25      	ldr	r3, [pc, #148]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	609a      	str	r2, [r3, #8]
 80071f4:	4b23      	ldr	r3, [pc, #140]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	6892      	ldr	r2, [r2, #8]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	4b21      	ldr	r3, [pc, #132]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	3204      	adds	r2, #4
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	4b1e      	ldr	r3, [pc, #120]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	1d1a      	adds	r2, r3, #4
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	4b1b      	ldr	r3, [pc, #108]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <prvAddCurrentTaskToDelayedList+0xcc>)
 800721a:	615a      	str	r2, [r3, #20]
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <prvAddCurrentTaskToDelayedList+0xcc>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	4a19      	ldr	r2, [pc, #100]	; (8007288 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007228:	e026      	b.n	8007278 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4413      	add	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007232:	4b14      	ldr	r3, [pc, #80]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	429a      	cmp	r2, r3
 8007240:	d209      	bcs.n	8007256 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <prvAddCurrentTaskToDelayedList+0xd0>)
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7fe fca7 	bl	8005ba2 <vListInsert>
}
 8007254:	e010      	b.n	8007278 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007256:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <prvAddCurrentTaskToDelayedList+0xd4>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <prvAddCurrentTaskToDelayedList+0xc8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3304      	adds	r3, #4
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f7fe fc9d 	bl	8005ba2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <prvAddCurrentTaskToDelayedList+0xd8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	429a      	cmp	r2, r3
 8007270:	d202      	bcs.n	8007278 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8007272:	4a08      	ldr	r2, [pc, #32]	; (8007294 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6013      	str	r3, [r2, #0]
}
 8007278:	bf00      	nop
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	24000694 	.word	0x24000694
 8007284:	240001bc 	.word	0x240001bc
 8007288:	2400067c 	.word	0x2400067c
 800728c:	2400064c 	.word	0x2400064c
 8007290:	24000648 	.word	0x24000648
 8007294:	240006b0 	.word	0x240006b0

08007298 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80072a2:	f000 fa63 	bl	800776c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <xTimerCreateTimerTask+0x54>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80072ae:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <xTimerCreateTimerTask+0x58>)
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	2302      	movs	r3, #2
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	2300      	movs	r3, #0
 80072b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072bc:	490d      	ldr	r1, [pc, #52]	; (80072f4 <xTimerCreateTimerTask+0x5c>)
 80072be:	480e      	ldr	r0, [pc, #56]	; (80072f8 <xTimerCreateTimerTask+0x60>)
 80072c0:	f7ff f802 	bl	80062c8 <xTaskCreate>
 80072c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	603b      	str	r3, [r7, #0]
    }
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80072e2:	687b      	ldr	r3, [r7, #4]
    }
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	240006ec 	.word	0x240006ec
 80072f0:	240006f0 	.word	0x240006f0
 80072f4:	0800a8fc 	.word	0x0800a8fc
 80072f8:	080073a1 	.word	0x080073a1

080072fc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007308:	e008      	b.n	800731c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4413      	add	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	699a      	ldr	r2, [r3, #24]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	18d1      	adds	r1, r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f8dd 	bl	80074e8 <prvInsertTimerInActiveList>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1ea      	bne.n	800730a <prvReloadTimer+0xe>
        }
    }
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <prvProcessExpiredTimer+0x5c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3304      	adds	r3, #4
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe fc5b 	bl	8005c14 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff ffc3 	bl	80072fc <prvReloadTimer>
 8007376:	e008      	b.n	800738a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	4798      	blx	r3
    }
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	240006e4 	.word	0x240006e4

080073a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073a8:	f107 0308 	add.w	r3, r7, #8
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 f857 	bl	8007460 <prvGetNextExpireTime>
 80073b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4619      	mov	r1, r3
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f803 	bl	80073c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80073be:	f000 f8d5 	bl	800756c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073c2:	e7f1      	b.n	80073a8 <prvTimerTask+0x8>

080073c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80073ce:	f7ff f967 	bl	80066a0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073d2:	f107 0308 	add.w	r3, r7, #8
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f866 	bl	80074a8 <prvSampleTimeNow>
 80073dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d130      	bne.n	8007446 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <prvProcessTimerOrBlockTask+0x3c>
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d806      	bhi.n	8007400 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80073f2:	f7ff f963 	bl	80066bc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073f6:	68f9      	ldr	r1, [r7, #12]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ffa1 	bl	8007340 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80073fe:	e024      	b.n	800744a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d008      	beq.n	8007418 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <prvProcessTimerOrBlockTask+0x90>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <prvProcessTimerOrBlockTask+0x50>
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <prvProcessTimerOrBlockTask+0x52>
 8007414:	2300      	movs	r3, #0
 8007416:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007418:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <prvProcessTimerOrBlockTask+0x94>)
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	4619      	mov	r1, r3
 8007426:	f7fe ff1b 	bl	8006260 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800742a:	f7ff f947 	bl	80066bc <xTaskResumeAll>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <prvProcessTimerOrBlockTask+0x98>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
    }
 8007444:	e001      	b.n	800744a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007446:	f7ff f939 	bl	80066bc <xTaskResumeAll>
    }
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	240006e8 	.word	0x240006e8
 8007458:	240006ec 	.word	0x240006ec
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <prvGetNextExpireTime+0x44>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <prvGetNextExpireTime+0x16>
 8007472:	2201      	movs	r2, #1
 8007474:	e000      	b.n	8007478 <prvGetNextExpireTime+0x18>
 8007476:	2200      	movs	r2, #0
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007484:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <prvGetNextExpireTime+0x44>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e001      	b.n	8007494 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007494:	68fb      	ldr	r3, [r7, #12]
    }
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	240006e4 	.word	0x240006e4

080074a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80074b0:	f7ff fa04 	bl	80068bc <xTaskGetTickCount>
 80074b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80074b6:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <prvSampleTimeNow+0x3c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d205      	bcs.n	80074cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80074c0:	f000 f92e 	bl	8007720 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	e002      	b.n	80074d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80074d2:	4a04      	ldr	r2, [pc, #16]	; (80074e4 <prvSampleTimeNow+0x3c>)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80074d8:	68fb      	ldr	r3, [r7, #12]
    }
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	240006f4 	.word	0x240006f4

080074e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d812      	bhi.n	8007534 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	1ad2      	subs	r2, r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	429a      	cmp	r2, r3
 800751a:	d302      	bcc.n	8007522 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800751c:	2301      	movs	r3, #1
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e01b      	b.n	800755a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007522:	4b10      	ldr	r3, [pc, #64]	; (8007564 <prvInsertTimerInActiveList+0x7c>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3304      	adds	r3, #4
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f7fe fb38 	bl	8005ba2 <vListInsert>
 8007532:	e012      	b.n	800755a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d206      	bcs.n	800754a <prvInsertTimerInActiveList+0x62>
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d302      	bcc.n	800754a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e007      	b.n	800755a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800754a:	4b07      	ldr	r3, [pc, #28]	; (8007568 <prvInsertTimerInActiveList+0x80>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3304      	adds	r3, #4
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f7fe fb24 	bl	8005ba2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800755a:	697b      	ldr	r3, [r7, #20]
    }
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	240006e8 	.word	0x240006e8
 8007568:	240006e4 	.word	0x240006e4

0800756c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007572:	e0c2      	b.n	80076fa <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	da18      	bge.n	80075ac <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	3304      	adds	r3, #4
 800757e:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <prvProcessReceivedCommands+0x30>
        __asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	61bb      	str	r3, [r7, #24]
    }
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a2:	6850      	ldr	r0, [r2, #4]
 80075a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a6:	6892      	ldr	r2, [r2, #8]
 80075a8:	4611      	mov	r1, r2
 80075aa:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f2c0 80a2 	blt.w	80076f8 <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fb25 	bl	8005c14 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075ca:	463b      	mov	r3, r7
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff ff6b 	bl	80074a8 <prvSampleTimeNow>
 80075d2:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	2b08      	cmp	r3, #8
 80075da:	f200 808e 	bhi.w	80076fa <prvProcessReceivedCommands+0x18e>
 80075de:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <prvProcessReceivedCommands+0x78>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007609 	.word	0x08007609
 80075ec:	08007671 	.word	0x08007671
 80075f0:	08007685 	.word	0x08007685
 80075f4:	080076cf 	.word	0x080076cf
 80075f8:	08007609 	.word	0x08007609
 80075fc:	08007609 	.word	0x08007609
 8007600:	08007671 	.word	0x08007671
 8007604:	08007685 	.word	0x08007685
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	b2da      	uxtb	r2, r3
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	18d1      	adds	r1, r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	6a38      	ldr	r0, [r7, #32]
 8007628:	f7ff ff5e 	bl	80074e8 <prvInsertTimerInActiveList>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d063      	beq.n	80076fa <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	4413      	add	r3, r2
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	4619      	mov	r1, r3
 800764c:	6a38      	ldr	r0, [r7, #32]
 800764e:	f7ff fe55 	bl	80072fc <prvReloadTimer>
 8007652:	e008      	b.n	8007666 <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	6a38      	ldr	r0, [r7, #32]
 800766c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800766e:	e044      	b.n	80076fa <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007676:	f023 0301 	bic.w	r3, r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007682:	e03a      	b.n	80076fa <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	b2da      	uxtb	r2, r3
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <prvProcessReceivedCommands+0x14e>
        __asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	617b      	str	r3, [r7, #20]
    }
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	18d1      	adds	r1, r2, r3
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	6a38      	ldr	r0, [r7, #32]
 80076c8:	f7ff ff0e 	bl	80074e8 <prvInsertTimerInActiveList>
                        break;
 80076cc:	e015      	b.n	80076fa <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 80076dc:	6a38      	ldr	r0, [r7, #32]
 80076de:	f000 fc0f 	bl	8007f00 <vPortFree>
 80076e2:	e00a      	b.n	80076fa <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80076f6:	e000      	b.n	80076fa <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80076f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076fa:	4b08      	ldr	r3, [pc, #32]	; (800771c <prvProcessReceivedCommands+0x1b0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	1d39      	adds	r1, r7, #4
 8007700:	2200      	movs	r2, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fbb8 	bl	8005e78 <xQueueReceive>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	f47f af32 	bne.w	8007574 <prvProcessReceivedCommands+0x8>
        }
    }
 8007710:	bf00      	nop
 8007712:	bf00      	nop
 8007714:	3728      	adds	r7, #40	; 0x28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	240006ec 	.word	0x240006ec

08007720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007726:	e009      	b.n	800773c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007728:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <prvSwitchTimerLists+0x44>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007732:	f04f 31ff 	mov.w	r1, #4294967295
 8007736:	6838      	ldr	r0, [r7, #0]
 8007738:	f7ff fe02 	bl	8007340 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <prvSwitchTimerLists+0x44>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvSwitchTimerLists+0x44>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <prvSwitchTimerLists+0x48>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a04      	ldr	r2, [pc, #16]	; (8007764 <prvSwitchTimerLists+0x44>)
 8007752:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007754:	4a04      	ldr	r2, [pc, #16]	; (8007768 <prvSwitchTimerLists+0x48>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6013      	str	r3, [r2, #0]
    }
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	240006e4 	.word	0x240006e4
 8007768:	240006e8 	.word	0x240006e8

0800776c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007770:	f000 f9e0 	bl	8007b34 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007774:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <prvCheckForValidListAndQueue+0x54>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d11d      	bne.n	80077b8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800777c:	4811      	ldr	r0, [pc, #68]	; (80077c4 <prvCheckForValidListAndQueue+0x58>)
 800777e:	f7fe f9e3 	bl	8005b48 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007782:	4811      	ldr	r0, [pc, #68]	; (80077c8 <prvCheckForValidListAndQueue+0x5c>)
 8007784:	f7fe f9e0 	bl	8005b48 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007788:	4b10      	ldr	r3, [pc, #64]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 800778a:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <prvCheckForValidListAndQueue+0x58>)
 800778c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800778e:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <prvCheckForValidListAndQueue+0x64>)
 8007790:	4a0d      	ldr	r2, [pc, #52]	; (80077c8 <prvCheckForValidListAndQueue+0x5c>)
 8007792:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007794:	2200      	movs	r2, #0
 8007796:	2110      	movs	r1, #16
 8007798:	200a      	movs	r0, #10
 800779a:	f7fe faf5 	bl	8005d88 <xQueueGenericCreate>
 800779e:	4603      	mov	r3, r0
 80077a0:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <prvCheckForValidListAndQueue+0x54>)
 80077a2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <prvCheckForValidListAndQueue+0x54>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <prvCheckForValidListAndQueue+0x54>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4908      	ldr	r1, [pc, #32]	; (80077d4 <prvCheckForValidListAndQueue+0x68>)
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fcfe 	bl	80061b4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80077b8:	f000 f9ec 	bl	8007b94 <vPortExitCritical>
    }
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	240006ec 	.word	0x240006ec
 80077c4:	240006bc 	.word	0x240006bc
 80077c8:	240006d0 	.word	0x240006d0
 80077cc:	240006e4 	.word	0x240006e4
 80077d0:	240006e8 	.word	0x240006e8
 80077d4:	0800a904 	.word	0x0800a904

080077d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3b04      	subs	r3, #4
 80077e8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f023 0201 	bic.w	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3b04      	subs	r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007808:	4a0c      	ldr	r2, [pc, #48]	; (800783c <pxPortInitialiseStack+0x64>)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b14      	subs	r3, #20
 8007812:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3b04      	subs	r3, #4
 800781e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f06f 0202 	mvn.w	r2, #2
 8007826:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3b20      	subs	r3, #32
 800782c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	08007841 	.word	0x08007841

08007840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <prvTaskExitError+0x54>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d00a      	beq.n	800786a <prvTaskExitError+0x2a>
        __asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	60fb      	str	r3, [r7, #12]
    }
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <prvTaskExitError+0x28>
        __asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60bb      	str	r3, [r7, #8]
    }
 800787c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800787e:	bf00      	nop
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0fc      	beq.n	8007880 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	24000014 	.word	0x24000014
	...

080078a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <pxCurrentTCBConst2>)
 80078a2:	6819      	ldr	r1, [r3, #0]
 80078a4:	6808      	ldr	r0, [r1, #0]
 80078a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	f380 8809 	msr	PSP, r0
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	4770      	bx	lr
 80078bc:	f3af 8000 	nop.w

080078c0 <pxCurrentTCBConst2>:
 80078c0:	240001bc 	.word	0x240001bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop

080078c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80078c8:	4808      	ldr	r0, [pc, #32]	; (80078ec <prvPortStartFirstTask+0x24>)
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f380 8808 	msr	MSP, r0
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8814 	msr	CONTROL, r0
 80078da:	b662      	cpsie	i
 80078dc:	b661      	cpsie	f
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	df00      	svc	0
 80078e8:	bf00      	nop
 80078ea:	0000      	.short	0x0000
 80078ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop

080078f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078fa:	4b46      	ldr	r3, [pc, #280]	; (8007a14 <xPortStartScheduler+0x120>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a46      	ldr	r2, [pc, #280]	; (8007a18 <xPortStartScheduler+0x124>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10a      	bne.n	800791a <xPortStartScheduler+0x26>
        __asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	613b      	str	r3, [r7, #16]
    }
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800791a:	4b3e      	ldr	r3, [pc, #248]	; (8007a14 <xPortStartScheduler+0x120>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a3f      	ldr	r2, [pc, #252]	; (8007a1c <xPortStartScheduler+0x128>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d10a      	bne.n	800793a <xPortStartScheduler+0x46>
        __asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	60fb      	str	r3, [r7, #12]
    }
 8007936:	bf00      	nop
 8007938:	e7fe      	b.n	8007938 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800793a:	4b39      	ldr	r3, [pc, #228]	; (8007a20 <xPortStartScheduler+0x12c>)
 800793c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	22ff      	movs	r2, #255	; 0xff
 800794a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800795c:	b2da      	uxtb	r2, r3
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <xPortStartScheduler+0x130>)
 8007960:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007962:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <xPortStartScheduler+0x134>)
 8007964:	2207      	movs	r2, #7
 8007966:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007968:	e009      	b.n	800797e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800796a:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <xPortStartScheduler+0x134>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3b01      	subs	r3, #1
 8007970:	4a2d      	ldr	r2, [pc, #180]	; (8007a28 <xPortStartScheduler+0x134>)
 8007972:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	b2db      	uxtb	r3, r3
 800797c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d0ef      	beq.n	800796a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800798a:	4b27      	ldr	r3, [pc, #156]	; (8007a28 <xPortStartScheduler+0x134>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f1c3 0307 	rsb	r3, r3, #7
 8007992:	2b04      	cmp	r3, #4
 8007994:	d00a      	beq.n	80079ac <xPortStartScheduler+0xb8>
        __asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	60bb      	str	r3, [r7, #8]
    }
 80079a8:	bf00      	nop
 80079aa:	e7fe      	b.n	80079aa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079ac:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <xPortStartScheduler+0x134>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <xPortStartScheduler+0x134>)
 80079b4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079b6:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <xPortStartScheduler+0x134>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079be:	4a1a      	ldr	r2, [pc, #104]	; (8007a28 <xPortStartScheduler+0x134>)
 80079c0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80079ca:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <xPortStartScheduler+0x138>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <xPortStartScheduler+0x138>)
 80079d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80079d6:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <xPortStartScheduler+0x138>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a14      	ldr	r2, [pc, #80]	; (8007a2c <xPortStartScheduler+0x138>)
 80079dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80079e2:	f000 f963 	bl	8007cac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80079e6:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <xPortStartScheduler+0x13c>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80079ec:	f000 f982 	bl	8007cf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079f0:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <xPortStartScheduler+0x140>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a0f      	ldr	r2, [pc, #60]	; (8007a34 <xPortStartScheduler+0x140>)
 80079f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80079fc:	f7ff ff64 	bl	80078c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007a00:	f7ff f89a 	bl	8006b38 <vTaskSwitchContext>
    prvTaskExitError();
 8007a04:	f7ff ff1c 	bl	8007840 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	e000ed00 	.word	0xe000ed00
 8007a18:	410fc271 	.word	0x410fc271
 8007a1c:	410fc270 	.word	0x410fc270
 8007a20:	e000e400 	.word	0xe000e400
 8007a24:	240006f8 	.word	0x240006f8
 8007a28:	240006fc 	.word	0x240006fc
 8007a2c:	e000ed20 	.word	0xe000ed20
 8007a30:	24000014 	.word	0x24000014
 8007a34:	e000ef34 	.word	0xe000ef34

08007a38 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a3e:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <vInitPrioGroupValue+0xe4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a37      	ldr	r2, [pc, #220]	; (8007b20 <vInitPrioGroupValue+0xe8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d10a      	bne.n	8007a5e <vInitPrioGroupValue+0x26>
        __asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	613b      	str	r3, [r7, #16]
    }
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a5e:	4b2f      	ldr	r3, [pc, #188]	; (8007b1c <vInitPrioGroupValue+0xe4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a30      	ldr	r2, [pc, #192]	; (8007b24 <vInitPrioGroupValue+0xec>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d10a      	bne.n	8007a7e <vInitPrioGroupValue+0x46>
        __asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60fb      	str	r3, [r7, #12]
    }
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a7e:	4b2a      	ldr	r3, [pc, #168]	; (8007b28 <vInitPrioGroupValue+0xf0>)
 8007a80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	22ff      	movs	r2, #255	; 0xff
 8007a8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	4b22      	ldr	r3, [pc, #136]	; (8007b2c <vInitPrioGroupValue+0xf4>)
 8007aa4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aa6:	4b22      	ldr	r3, [pc, #136]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007aa8:	2207      	movs	r2, #7
 8007aaa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aac:	e009      	b.n	8007ac2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007aae:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	4a1e      	ldr	r2, [pc, #120]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007ab6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d0ef      	beq.n	8007aae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ace:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f1c3 0307 	rsb	r3, r3, #7
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d00a      	beq.n	8007af0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	60bb      	str	r3, [r7, #8]
    }
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	4a0e      	ldr	r2, [pc, #56]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007af8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007afa:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b02:	4a0b      	ldr	r2, [pc, #44]	; (8007b30 <vInitPrioGroupValue+0xf8>)
 8007b04:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007b0e:	bf00      	nop
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	e000ed00 	.word	0xe000ed00
 8007b20:	410fc271 	.word	0x410fc271
 8007b24:	410fc270 	.word	0x410fc270
 8007b28:	e000e400 	.word	0xe000e400
 8007b2c:	240006f8 	.word	0x240006f8
 8007b30:	240006fc 	.word	0x240006fc

08007b34 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
        __asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	607b      	str	r3, [r7, #4]
    }
 8007b4c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3301      	adds	r3, #1
 8007b54:	4a0d      	ldr	r2, [pc, #52]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b56:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d10f      	bne.n	8007b80 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <vPortEnterCritical+0x5c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <vPortEnterCritical+0x4c>
        __asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	603b      	str	r3, [r7, #0]
    }
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <vPortEnterCritical+0x4a>
    }
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	24000014 	.word	0x24000014
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <vPortExitCritical+0x50>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <vPortExitCritical+0x24>
        __asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	607b      	str	r3, [r7, #4]
    }
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <vPortExitCritical+0x50>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007bc2:	4b08      	ldr	r3, [pc, #32]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <vPortExitCritical+0x42>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007bd4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	24000014 	.word	0x24000014
	...

08007bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007bf0:	f3ef 8009 	mrs	r0, PSP
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <pxCurrentTCBConst>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f01e 0f10 	tst.w	lr, #16
 8007c00:	bf08      	it	eq
 8007c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	6010      	str	r0, [r2, #0]
 8007c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c14:	f380 8811 	msr	BASEPRI, r0
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f7fe ff8a 	bl	8006b38 <vTaskSwitchContext>
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	f380 8811 	msr	BASEPRI, r0
 8007c2c:	bc09      	pop	{r0, r3}
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	6808      	ldr	r0, [r1, #0]
 8007c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c36:	f01e 0f10 	tst.w	lr, #16
 8007c3a:	bf08      	it	eq
 8007c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c40:	f380 8809 	msr	PSP, r0
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst>:
 8007c50:	240001bc 	.word	0x240001bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
        __asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
    }
 8007c70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007c72:	f001 fe19 	bl	80098a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007c76:	f7fe fe43 	bl	8006900 <xTaskIncrementTick>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d006      	beq.n	8007c8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007c80:	f001 fe70 	bl	8009964 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c84:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <SysTick_Handler+0x50>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e001      	b.n	8007c92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8007c8e:	f001 fe4d 	bl	800992c <SEGGER_SYSVIEW_RecordExitISR>
 8007c92:	2300      	movs	r3, #0
 8007c94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	f383 8811 	msr	BASEPRI, r3
    }
 8007c9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <vPortSetupTimerInterrupt+0x34>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <vPortSetupTimerInterrupt+0x38>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <vPortSetupTimerInterrupt+0x3c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <vPortSetupTimerInterrupt+0x40>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	099b      	lsrs	r3, r3, #6
 8007cc8:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <vPortSetupTimerInterrupt+0x44>)
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cce:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <vPortSetupTimerInterrupt+0x34>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e010 	.word	0xe000e010
 8007ce4:	e000e018 	.word	0xe000e018
 8007ce8:	24000000 	.word	0x24000000
 8007cec:	10624dd3 	.word	0x10624dd3
 8007cf0:	e000e014 	.word	0xe000e014

08007cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d04 <vPortEnableVFP+0x10>
 8007cf8:	6801      	ldr	r1, [r0, #0]
 8007cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cfe:	6001      	str	r1, [r0, #0]
 8007d00:	4770      	bx	lr
 8007d02:	0000      	.short	0x0000
 8007d04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop

08007d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007d12:	f3ef 8305 	mrs	r3, IPSR
 8007d16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d914      	bls.n	8007d48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d1e:	4a17      	ldr	r2, [pc, #92]	; (8007d7c <vPortValidateInterruptPriority+0x70>)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4413      	add	r3, r2
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d28:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <vPortValidateInterruptPriority+0x74>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	7afa      	ldrb	r2, [r7, #11]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d20a      	bcs.n	8007d48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	607b      	str	r3, [r7, #4]
    }
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <vPortValidateInterruptPriority+0x78>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d50:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <vPortValidateInterruptPriority+0x7c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d90a      	bls.n	8007d6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	603b      	str	r3, [r7, #0]
    }
 8007d6a:	bf00      	nop
 8007d6c:	e7fe      	b.n	8007d6c <vPortValidateInterruptPriority+0x60>
    }
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	e000e3f0 	.word	0xe000e3f0
 8007d80:	240006f8 	.word	0x240006f8
 8007d84:	e000ed0c 	.word	0xe000ed0c
 8007d88:	240006fc 	.word	0x240006fc

08007d8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007d98:	f7fe fc82 	bl	80066a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007d9c:	4b53      	ldr	r3, [pc, #332]	; (8007eec <pvPortMalloc+0x160>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007da4:	f000 f908 	bl	8007fb8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d012      	beq.n	8007dd4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007dae:	2208      	movs	r2, #8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	3308      	adds	r3, #8
 8007dba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	43db      	mvns	r3, r3
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d804      	bhi.n	8007dd0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	4413      	add	r3, r2
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	e001      	b.n	8007dd4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	db70      	blt.n	8007ebc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d06d      	beq.n	8007ebc <pvPortMalloc+0x130>
 8007de0:	4b43      	ldr	r3, [pc, #268]	; (8007ef0 <pvPortMalloc+0x164>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d868      	bhi.n	8007ebc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007dea:	4b42      	ldr	r3, [pc, #264]	; (8007ef4 <pvPortMalloc+0x168>)
 8007dec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007dee:	4b41      	ldr	r3, [pc, #260]	; (8007ef4 <pvPortMalloc+0x168>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007df4:	e004      	b.n	8007e00 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d903      	bls.n	8007e12 <pvPortMalloc+0x86>
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f1      	bne.n	8007df6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007e12:	4b36      	ldr	r3, [pc, #216]	; (8007eec <pvPortMalloc+0x160>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d04f      	beq.n	8007ebc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2208      	movs	r2, #8
 8007e22:	4413      	add	r3, r2
 8007e24:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	1ad2      	subs	r2, r2, r3
 8007e36:	2308      	movs	r3, #8
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d91f      	bls.n	8007e7e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <pvPortMalloc+0xda>
        __asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	613b      	str	r3, [r7, #16]
    }
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	1ad2      	subs	r2, r2, r3
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e78:	6978      	ldr	r0, [r7, #20]
 8007e7a:	f000 f8f9 	bl	8008070 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ef0 <pvPortMalloc+0x164>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <pvPortMalloc+0x164>)
 8007e8a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e8c:	4b18      	ldr	r3, [pc, #96]	; (8007ef0 <pvPortMalloc+0x164>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	4b19      	ldr	r3, [pc, #100]	; (8007ef8 <pvPortMalloc+0x16c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d203      	bcs.n	8007ea0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e98:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <pvPortMalloc+0x164>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a16      	ldr	r2, [pc, #88]	; (8007ef8 <pvPortMalloc+0x16c>)
 8007e9e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <pvPortMalloc+0x170>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	4a10      	ldr	r2, [pc, #64]	; (8007efc <pvPortMalloc+0x170>)
 8007eba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007ebc:	f7fe fbfe 	bl	80066bc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <pvPortMalloc+0x154>
        __asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	60fb      	str	r3, [r7, #12]
    }
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <pvPortMalloc+0x152>
    return pvReturn;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3728      	adds	r7, #40	; 0x28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	24013308 	.word	0x24013308
 8007ef0:	2401330c 	.word	0x2401330c
 8007ef4:	24013300 	.word	0x24013300
 8007ef8:	24013310 	.word	0x24013310
 8007efc:	24013314 	.word	0x24013314

08007f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d049      	beq.n	8007fa6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007f12:	2308      	movs	r3, #8
 8007f14:	425b      	negs	r3, r3
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	4413      	add	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	db0a      	blt.n	8007f3e <vPortFree+0x3e>
        __asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60fb      	str	r3, [r7, #12]
    }
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <vPortFree+0x5c>
        __asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	60bb      	str	r3, [r7, #8]
    }
 8007f58:	bf00      	nop
 8007f5a:	e7fe      	b.n	8007f5a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	0fdb      	lsrs	r3, r3, #31
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01c      	beq.n	8007fa6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d118      	bne.n	8007fa6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007f80:	f7fe fb8e 	bl	80066a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <vPortFree+0xb0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	4a08      	ldr	r2, [pc, #32]	; (8007fb0 <vPortFree+0xb0>)
 8007f90:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f92:	6938      	ldr	r0, [r7, #16]
 8007f94:	f000 f86c 	bl	8008070 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <vPortFree+0xb4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	4a05      	ldr	r2, [pc, #20]	; (8007fb4 <vPortFree+0xb4>)
 8007fa0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007fa2:	f7fe fb8b 	bl	80066bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007fa6:	bf00      	nop
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	2401330c 	.word	0x2401330c
 8007fb4:	24013318 	.word	0x24013318

08007fb8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fbe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007fc2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007fc4:	4b25      	ldr	r3, [pc, #148]	; (800805c <prvHeapInit+0xa4>)
 8007fc6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00c      	beq.n	8007fec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3307      	adds	r3, #7
 8007fd6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 0307 	bic.w	r3, r3, #7
 8007fde:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	4a1d      	ldr	r2, [pc, #116]	; (800805c <prvHeapInit+0xa4>)
 8007fe8:	4413      	add	r3, r2
 8007fea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <prvHeapInit+0xa8>)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <prvHeapInit+0xa8>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008004:	2208      	movs	r2, #8
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f023 0307 	bic.w	r3, r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a13      	ldr	r2, [pc, #76]	; (8008064 <prvHeapInit+0xac>)
 8008018:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <prvHeapInit+0xac>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2200      	movs	r2, #0
 8008020:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008022:	4b10      	ldr	r3, [pc, #64]	; (8008064 <prvHeapInit+0xac>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	1ad2      	subs	r2, r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <prvHeapInit+0xac>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	4a08      	ldr	r2, [pc, #32]	; (8008068 <prvHeapInit+0xb0>)
 8008046:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4a07      	ldr	r2, [pc, #28]	; (800806c <prvHeapInit+0xb4>)
 800804e:	6013      	str	r3, [r2, #0]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	24000700 	.word	0x24000700
 8008060:	24013300 	.word	0x24013300
 8008064:	24013308 	.word	0x24013308
 8008068:	24013310 	.word	0x24013310
 800806c:	2401330c 	.word	0x2401330c

08008070 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008078:	4b28      	ldr	r3, [pc, #160]	; (800811c <prvInsertBlockIntoFreeList+0xac>)
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e002      	b.n	8008084 <prvInsertBlockIntoFreeList+0x14>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	429a      	cmp	r2, r3
 800808c:	d8f7      	bhi.n	800807e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4413      	add	r3, r2
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d108      	bne.n	80080b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	441a      	add	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	441a      	add	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d118      	bne.n	80080f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b15      	ldr	r3, [pc, #84]	; (8008120 <prvInsertBlockIntoFreeList+0xb0>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d00d      	beq.n	80080ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	441a      	add	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e008      	b.n	8008100 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080ee:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <prvInsertBlockIntoFreeList+0xb0>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e003      	b.n	8008100 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	429a      	cmp	r2, r3
 8008106:	d002      	beq.n	800810e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	24013300 	.word	0x24013300
 8008120:	24013308 	.word	0x24013308

08008124 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008128:	4803      	ldr	r0, [pc, #12]	; (8008138 <_cbSendSystemDesc+0x14>)
 800812a:	f001 fb67 	bl	80097fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800812e:	4803      	ldr	r0, [pc, #12]	; (800813c <_cbSendSystemDesc+0x18>)
 8008130:	f001 fb64 	bl	80097fc <SEGGER_SYSVIEW_SendSysDesc>
}
 8008134:	bf00      	nop
 8008136:	bd80      	pop	{r7, pc}
 8008138:	0800a90c 	.word	0x0800a90c
 800813c:	0800a948 	.word	0x0800a948

08008140 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <SEGGER_SYSVIEW_Conf+0x20>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <SEGGER_SYSVIEW_Conf+0x20>)
 800814a:	6819      	ldr	r1, [r3, #0]
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <SEGGER_SYSVIEW_Conf+0x24>)
 800814e:	4a06      	ldr	r2, [pc, #24]	; (8008168 <SEGGER_SYSVIEW_Conf+0x28>)
 8008150:	f000 fed2 	bl	8008ef8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008154:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008158:	f000 ff12 	bl	8008f80 <SEGGER_SYSVIEW_SetRAMBase>
}
 800815c:	bf00      	nop
 800815e:	bd80      	pop	{r7, pc}
 8008160:	24000000 	.word	0x24000000
 8008164:	08008125 	.word	0x08008125
 8008168:	0800a9fc 	.word	0x0800a9fc

0800816c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816e:	b085      	sub	sp, #20
 8008170:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	e048      	b.n	800820a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8008178:	4929      	ldr	r1, [pc, #164]	; (8008220 <_cbSendTaskList+0xb4>)
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe ffb1 	bl	80070f0 <uxTaskGetStackHighWaterMark>
 800818e:	4601      	mov	r1, r0
 8008190:	4823      	ldr	r0, [pc, #140]	; (8008220 <_cbSendTaskList+0xb4>)
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4403      	add	r3, r0
 800819e:	3310      	adds	r3, #16
 80081a0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80081a2:	491f      	ldr	r1, [pc, #124]	; (8008220 <_cbSendTaskList+0xb4>)
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	491b      	ldr	r1, [pc, #108]	; (8008220 <_cbSendTaskList+0xb4>)
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	3304      	adds	r3, #4
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	4c16      	ldr	r4, [pc, #88]	; (8008220 <_cbSendTaskList+0xb4>)
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4423      	add	r3, r4
 80081d2:	3308      	adds	r3, #8
 80081d4:	681c      	ldr	r4, [r3, #0]
 80081d6:	4d12      	ldr	r5, [pc, #72]	; (8008220 <_cbSendTaskList+0xb4>)
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	442b      	add	r3, r5
 80081e4:	330c      	adds	r3, #12
 80081e6:	681d      	ldr	r5, [r3, #0]
 80081e8:	4e0d      	ldr	r6, [pc, #52]	; (8008220 <_cbSendTaskList+0xb4>)
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4433      	add	r3, r6
 80081f6:	3310      	adds	r3, #16
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	462b      	mov	r3, r5
 80081fe:	4622      	mov	r2, r4
 8008200:	f000 f8be 	bl	8008380 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3301      	adds	r3, #1
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	4b06      	ldr	r3, [pc, #24]	; (8008224 <_cbSendTaskList+0xb8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d3b1      	bcc.n	8008178 <_cbSendTaskList+0xc>
  }
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821e:	bf00      	nop
 8008220:	2401331c 	.word	0x2401331c
 8008224:	240133bc 	.word	0x240133bc

08008228 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008230:	f7fe fb54 	bl	80068dc <xTaskGetTickCountFromISR>
 8008234:	4603      	mov	r3, r0
 8008236:	2200      	movs	r2, #0
 8008238:	469a      	mov	sl, r3
 800823a:	4693      	mov	fp, r2
 800823c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	f04f 0a00 	mov.w	sl, #0
 800824c:	f04f 0b00 	mov.w	fp, #0
 8008250:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008254:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008258:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800825c:	4652      	mov	r2, sl
 800825e:	465b      	mov	r3, fp
 8008260:	1a14      	subs	r4, r2, r0
 8008262:	eb63 0501 	sbc.w	r5, r3, r1
 8008266:	f04f 0200 	mov.w	r2, #0
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	00ab      	lsls	r3, r5, #2
 8008270:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008274:	00a2      	lsls	r2, r4, #2
 8008276:	4614      	mov	r4, r2
 8008278:	461d      	mov	r5, r3
 800827a:	eb14 0800 	adds.w	r8, r4, r0
 800827e:	eb45 0901 	adc.w	r9, r5, r1
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800828e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008296:	4690      	mov	r8, r2
 8008298:	4699      	mov	r9, r3
 800829a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800829e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80082a2:	4610      	mov	r0, r2
 80082a4:	4619      	mov	r1, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080082b0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80082be:	2205      	movs	r2, #5
 80082c0:	492b      	ldr	r1, [pc, #172]	; (8008370 <SYSVIEW_AddTask+0xc0>)
 80082c2:	68b8      	ldr	r0, [r7, #8]
 80082c4:	f001 fdca 	bl	8009e5c <memcmp>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d04b      	beq.n	8008366 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80082ce:	4b29      	ldr	r3, [pc, #164]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b07      	cmp	r3, #7
 80082d4:	d903      	bls.n	80082de <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80082d6:	4828      	ldr	r0, [pc, #160]	; (8008378 <SYSVIEW_AddTask+0xc8>)
 80082d8:	f001 fd2e 	bl	8009d38 <SEGGER_SYSVIEW_Warn>
    return;
 80082dc:	e044      	b.n	8008368 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80082de:	4b25      	ldr	r3, [pc, #148]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4926      	ldr	r1, [pc, #152]	; (800837c <SYSVIEW_AddTask+0xcc>)
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80082f2:	4b20      	ldr	r3, [pc, #128]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4921      	ldr	r1, [pc, #132]	; (800837c <SYSVIEW_AddTask+0xcc>)
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	3304      	adds	r3, #4
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008308:	4b1a      	ldr	r3, [pc, #104]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	491b      	ldr	r1, [pc, #108]	; (800837c <SYSVIEW_AddTask+0xcc>)
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	440b      	add	r3, r1
 8008318:	3308      	adds	r3, #8
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800831e:	4b15      	ldr	r3, [pc, #84]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	4916      	ldr	r1, [pc, #88]	; (800837c <SYSVIEW_AddTask+0xcc>)
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	440b      	add	r3, r1
 800832e:	330c      	adds	r3, #12
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	4910      	ldr	r1, [pc, #64]	; (800837c <SYSVIEW_AddTask+0xcc>)
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	3310      	adds	r3, #16
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800834a:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3301      	adds	r3, #1
 8008350:	4a08      	ldr	r2, [pc, #32]	; (8008374 <SYSVIEW_AddTask+0xc4>)
 8008352:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	68b9      	ldr	r1, [r7, #8]
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f80e 	bl	8008380 <SYSVIEW_SendTaskInfo>
 8008364:	e000      	b.n	8008368 <SYSVIEW_AddTask+0xb8>
    return;
 8008366:	bf00      	nop

}
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	0800a958 	.word	0x0800a958
 8008374:	240133bc 	.word	0x240133bc
 8008378:	0800a960 	.word	0x0800a960
 800837c:	2401331c 	.word	0x2401331c

08008380 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800838e:	f107 0314 	add.w	r3, r7, #20
 8008392:	2214      	movs	r2, #20
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f001 fd7e 	bl	8009e98 <memset>
  TaskInfo.TaskID     = TaskID;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80083b0:	f107 0314 	add.w	r3, r7, #20
 80083b4:	4618      	mov	r0, r3
 80083b6:	f001 f929 	bl	800960c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80083ba:	bf00      	nop
 80083bc:	3728      	adds	r7, #40	; 0x28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80083ca:	4b26      	ldr	r3, [pc, #152]	; (8008464 <_DoInit+0xa0>)
 80083cc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80083ce:	22a8      	movs	r2, #168	; 0xa8
 80083d0:	2100      	movs	r1, #0
 80083d2:	6838      	ldr	r0, [r7, #0]
 80083d4:	f001 fd60 	bl	8009e98 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2203      	movs	r2, #3
 80083dc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2203      	movs	r2, #3
 80083e2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	4a20      	ldr	r2, [pc, #128]	; (8008468 <_DoInit+0xa4>)
 80083e8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	4a1f      	ldr	r2, [pc, #124]	; (800846c <_DoInit+0xa8>)
 80083ee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083f6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2200      	movs	r2, #0
 80083fc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2200      	movs	r2, #0
 8008408:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	4a16      	ldr	r2, [pc, #88]	; (8008468 <_DoInit+0xa4>)
 800840e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	4a17      	ldr	r2, [pc, #92]	; (8008470 <_DoInit+0xac>)
 8008414:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2210      	movs	r2, #16
 800841a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2200      	movs	r2, #0
 8008420:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2200      	movs	r2, #0
 8008426:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800842e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008432:	2300      	movs	r3, #0
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	e00c      	b.n	8008452 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f1c3 030f 	rsb	r3, r3, #15
 800843e:	4a0d      	ldr	r2, [pc, #52]	; (8008474 <_DoInit+0xb0>)
 8008440:	5cd1      	ldrb	r1, [r2, r3]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	460a      	mov	r2, r1
 800844a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3301      	adds	r3, #1
 8008450:	607b      	str	r3, [r7, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b0f      	cmp	r3, #15
 8008456:	d9ef      	bls.n	8008438 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008458:	f3bf 8f5f 	dmb	sy
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	240133c0 	.word	0x240133c0
 8008468:	0800a9b0 	.word	0x0800a9b0
 800846c:	24013468 	.word	0x24013468
 8008470:	24013868 	.word	0x24013868
 8008474:	0800aa04 	.word	0x0800aa04

08008478 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008484:	2300      	movs	r3, #0
 8008486:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	429a      	cmp	r2, r3
 800849a:	d905      	bls.n	80084a8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
 80084a6:	e007      	b.n	80084b8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	69b9      	ldr	r1, [r7, #24]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	1acb      	subs	r3, r1, r3
 80084b2:	4413      	add	r3, r2
 80084b4:	3b01      	subs	r3, #1
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c2:	4293      	cmp	r3, r2
 80084c4:	bf28      	it	cs
 80084c6:	4613      	movcs	r3, r2
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80084ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4293      	cmp	r3, r2
 80084d0:	bf28      	it	cs
 80084d2:	4613      	movcs	r3, r2
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80084e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	6978      	ldr	r0, [r7, #20]
 80084e6:	f001 fcc9 	bl	8009e7c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80084ea:	6a3a      	ldr	r2, [r7, #32]
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	4413      	add	r3, r2
 80084f0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	4413      	add	r3, r2
 80084f8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	4413      	add	r3, r2
 8008508:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	429a      	cmp	r2, r3
 8008512:	d101      	bne.n	8008518 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008518:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1b2      	bne.n	800848e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008528:	6a3b      	ldr	r3, [r7, #32]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3728      	adds	r7, #40	; 0x28
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008532:	b580      	push	{r7, lr}
 8008534:	b088      	sub	sp, #32
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d911      	bls.n	800857a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	6938      	ldr	r0, [r7, #16]
 8008566:	f001 fc89 	bl	8009e7c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800856a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	441a      	add	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008578:	e01f      	b.n	80085ba <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	4413      	add	r3, r2
 8008586:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	6938      	ldr	r0, [r7, #16]
 800858e:	f001 fc75 	bl	8009e7c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	4413      	add	r3, r2
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6938      	ldr	r0, [r7, #16]
 80085ac:	f001 fc66 	bl	8009e7c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80085b0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	60da      	str	r2, [r3, #12]
}
 80085ba:	bf00      	nop
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80085c2:	b480      	push	{r7}
 80085c4:	b087      	sub	sp, #28
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d808      	bhi.n	80085f0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689a      	ldr	r2, [r3, #8]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1ad2      	subs	r2, r2, r3
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	4413      	add	r3, r2
 80085ea:	3b01      	subs	r3, #1
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	e004      	b.n	80085fa <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80085fa:	697b      	ldr	r3, [r7, #20]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	; 0x30
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008614:	4b3e      	ldr	r3, [pc, #248]	; (8008710 <SEGGER_RTT_ReadNoLock+0x108>)
 8008616:	623b      	str	r3, [r7, #32]
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <SEGGER_RTT_ReadNoLock+0x1e>
 8008622:	f7ff fecf 	bl	80083c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4613      	mov	r3, r2
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	4413      	add	r3, r2
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	3360      	adds	r3, #96	; 0x60
 8008632:	4a37      	ldr	r2, [pc, #220]	; (8008710 <SEGGER_RTT_ReadNoLock+0x108>)
 8008634:	4413      	add	r3, r2
 8008636:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008648:	2300      	movs	r3, #0
 800864a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800864c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	429a      	cmp	r2, r3
 8008652:	d92b      	bls.n	80086ac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4293      	cmp	r3, r2
 8008664:	bf28      	it	cs
 8008666:	4613      	movcs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	4413      	add	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	6939      	ldr	r1, [r7, #16]
 8008678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800867a:	f001 fbff 	bl	8009e7c <memcpy>
    NumBytesRead += NumBytesRem;
 800867e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	4413      	add	r3, r2
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4413      	add	r3, r2
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4413      	add	r3, r2
 800869c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d101      	bne.n	80086ac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80086a8:	2300      	movs	r3, #0
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	bf28      	it	cs
 80086bc:	4613      	movcs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d019      	beq.n	80086fa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	4413      	add	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	6939      	ldr	r1, [r7, #16]
 80086d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086d6:	f001 fbd1 	bl	8009e7c <memcpy>
    NumBytesRead += NumBytesRem;
 80086da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	4413      	add	r3, r2
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80086e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80086f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	4413      	add	r3, r2
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008704:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008708:	4618      	mov	r0, r3
 800870a:	3730      	adds	r7, #48	; 0x30
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	240133c0 	.word	0x240133c0

08008714 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	4613      	mov	r3, r2
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	4413      	add	r3, r2
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008732:	4413      	add	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d029      	beq.n	8008792 <SEGGER_RTT_WriteNoLock+0x7e>
 800873e:	2b02      	cmp	r3, #2
 8008740:	d82e      	bhi.n	80087a0 <SEGGER_RTT_WriteNoLock+0x8c>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <SEGGER_RTT_WriteNoLock+0x38>
 8008746:	2b01      	cmp	r3, #1
 8008748:	d013      	beq.n	8008772 <SEGGER_RTT_WriteNoLock+0x5e>
 800874a:	e029      	b.n	80087a0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800874c:	6978      	ldr	r0, [r7, #20]
 800874e:	f7ff ff38 	bl	80085c2 <_GetAvailWriteSpace>
 8008752:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d202      	bcs.n	8008762 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800875c:	2300      	movs	r3, #0
 800875e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008760:	e021      	b.n	80087a6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	69b9      	ldr	r1, [r7, #24]
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	f7ff fee1 	bl	8008532 <_WriteNoCheck>
    break;
 8008770:	e019      	b.n	80087a6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008772:	6978      	ldr	r0, [r7, #20]
 8008774:	f7ff ff25 	bl	80085c2 <_GetAvailWriteSpace>
 8008778:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4293      	cmp	r3, r2
 8008780:	bf28      	it	cs
 8008782:	4613      	movcs	r3, r2
 8008784:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008786:	69fa      	ldr	r2, [r7, #28]
 8008788:	69b9      	ldr	r1, [r7, #24]
 800878a:	6978      	ldr	r0, [r7, #20]
 800878c:	f7ff fed1 	bl	8008532 <_WriteNoCheck>
    break;
 8008790:	e009      	b.n	80087a6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	69b9      	ldr	r1, [r7, #24]
 8008796:	6978      	ldr	r0, [r7, #20]
 8008798:	f7ff fe6e 	bl	8008478 <_WriteBlocking>
 800879c:	61f8      	str	r0, [r7, #28]
    break;
 800879e:	e002      	b.n	80087a6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
    break;
 80087a4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80087a6:	69fb      	ldr	r3, [r7, #28]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	240133c0 	.word	0x240133c0

080087b4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80087c0:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <SEGGER_RTT_Write+0x48>)
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <SEGGER_RTT_Write+0x1e>
 80087ce:	f7ff fdf9 	bl	80083c4 <_DoInit>
  SEGGER_RTT_LOCK();
 80087d2:	f3ef 8311 	mrs	r3, BASEPRI
 80087d6:	f04f 0120 	mov.w	r1, #32
 80087da:	f381 8811 	msr	BASEPRI, r1
 80087de:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff ff95 	bl	8008714 <SEGGER_RTT_WriteNoLock>
 80087ea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80087f2:	697b      	ldr	r3, [r7, #20]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	240133c0 	.word	0x240133c0

08008800 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800880e:	4b3d      	ldr	r3, [pc, #244]	; (8008904 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <SEGGER_RTT_AllocUpBuffer+0x20>
 800881c:	f7ff fdd2 	bl	80083c4 <_DoInit>
  SEGGER_RTT_LOCK();
 8008820:	f3ef 8311 	mrs	r3, BASEPRI
 8008824:	f04f 0120 	mov.w	r1, #32
 8008828:	f381 8811 	msr	BASEPRI, r1
 800882c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800882e:	4b35      	ldr	r3, [pc, #212]	; (8008904 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008830:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008836:	6939      	ldr	r1, [r7, #16]
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	4613      	mov	r3, r2
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	4413      	add	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	440b      	add	r3, r1
 8008846:	3304      	adds	r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d008      	beq.n	8008860 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	3301      	adds	r3, #1
 8008852:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	69fa      	ldr	r2, [r7, #28]
 800885a:	429a      	cmp	r2, r3
 800885c:	dbeb      	blt.n	8008836 <SEGGER_RTT_AllocUpBuffer+0x36>
 800885e:	e000      	b.n	8008862 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008860:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	429a      	cmp	r2, r3
 800886a:	da3f      	bge.n	80088ec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800886c:	6939      	ldr	r1, [r7, #16]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	4613      	mov	r3, r2
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	4413      	add	r3, r2
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	440b      	add	r3, r1
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008880:	6939      	ldr	r1, [r7, #16]
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	4613      	mov	r3, r2
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4413      	add	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	440b      	add	r3, r1
 8008890:	3304      	adds	r3, #4
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008896:	6939      	ldr	r1, [r7, #16]
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	4613      	mov	r3, r2
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4413      	add	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	440b      	add	r3, r1
 80088a4:	3320      	adds	r3, #32
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80088aa:	6939      	ldr	r1, [r7, #16]
 80088ac:	69fa      	ldr	r2, [r7, #28]
 80088ae:	4613      	mov	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	4413      	add	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	440b      	add	r3, r1
 80088b8:	3328      	adds	r3, #40	; 0x28
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80088be:	6939      	ldr	r1, [r7, #16]
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	4613      	mov	r3, r2
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	4413      	add	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	440b      	add	r3, r1
 80088cc:	3324      	adds	r3, #36	; 0x24
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80088d2:	6939      	ldr	r1, [r7, #16]
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	4613      	mov	r3, r2
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4413      	add	r3, r2
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	440b      	add	r3, r1
 80088e0:	332c      	adds	r3, #44	; 0x2c
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80088e6:	f3bf 8f5f 	dmb	sy
 80088ea:	e002      	b.n	80088f2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80088ec:	f04f 33ff 	mov.w	r3, #4294967295
 80088f0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80088f8:	69fb      	ldr	r3, [r7, #28]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3720      	adds	r7, #32
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	240133c0 	.word	0x240133c0

08008908 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	; 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008916:	4b21      	ldr	r3, [pc, #132]	; (800899c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008924:	f7ff fd4e 	bl	80083c4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008928:	4b1c      	ldr	r3, [pc, #112]	; (800899c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800892a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d82c      	bhi.n	800898c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8008932:	f3ef 8311 	mrs	r3, BASEPRI
 8008936:	f04f 0120 	mov.w	r1, #32
 800893a:	f381 8811 	msr	BASEPRI, r1
 800893e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4613      	mov	r3, r2
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	4413      	add	r3, r2
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	3360      	adds	r3, #96	; 0x60
 800894c:	69fa      	ldr	r2, [r7, #28]
 800894e:	4413      	add	r3, r2
 8008950:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00e      	beq.n	8008976 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2200      	movs	r2, #0
 800896e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2200      	movs	r2, #0
 8008974:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800897c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008986:	2300      	movs	r3, #0
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
 800898a:	e002      	b.n	8008992 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008994:	4618      	mov	r0, r3
 8008996:	3728      	adds	r7, #40	; 0x28
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	240133c0 	.word	0x240133c0

080089a0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00f      	beq.n	80089d6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80089b6:	e002      	b.n	80089be <_EncodeStr+0x1e>
      Len++;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	3301      	adds	r3, #1
 80089bc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	4413      	add	r3, r2
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f6      	bne.n	80089b8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d901      	bls.n	80089d6 <_EncodeStr+0x36>
      Len = Limit;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2bfe      	cmp	r3, #254	; 0xfe
 80089da:	d806      	bhi.n	80089ea <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	60fa      	str	r2, [r7, #12]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	b2d2      	uxtb	r2, r2
 80089e6:	701a      	strb	r2, [r3, #0]
 80089e8:	e011      	b.n	8008a0e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	60fa      	str	r2, [r7, #12]
 80089f0:	22ff      	movs	r2, #255	; 0xff
 80089f2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	60fa      	str	r2, [r7, #12]
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	0a19      	lsrs	r1, r3, #8
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	60fa      	str	r2, [r7, #12]
 8008a0a:	b2ca      	uxtb	r2, r1
 8008a0c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008a12:	e00a      	b.n	8008a2a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	1c53      	adds	r3, r2, #1
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	1c59      	adds	r1, r3, #1
 8008a1e:	60f9      	str	r1, [r7, #12]
 8008a20:	7812      	ldrb	r2, [r2, #0]
 8008a22:	701a      	strb	r2, [r3, #0]
    n++;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	3301      	adds	r3, #1
 8008a28:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d3f0      	bcc.n	8008a14 <_EncodeStr+0x74>
  }
  return pPayload;
 8008a32:	68fb      	ldr	r3, [r7, #12]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3307      	adds	r3, #7
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008a5e:	4b35      	ldr	r3, [pc, #212]	; (8008b34 <_HandleIncomingPacket+0xdc>)
 8008a60:	7e1b      	ldrb	r3, [r3, #24]
 8008a62:	4618      	mov	r0, r3
 8008a64:	1cfb      	adds	r3, r7, #3
 8008a66:	2201      	movs	r2, #1
 8008a68:	4619      	mov	r1, r3
 8008a6a:	f7ff fdcd 	bl	8008608 <SEGGER_RTT_ReadNoLock>
 8008a6e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d052      	beq.n	8008b1c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	2b80      	cmp	r3, #128	; 0x80
 8008a7a:	d031      	beq.n	8008ae0 <_HandleIncomingPacket+0x88>
 8008a7c:	2b80      	cmp	r3, #128	; 0x80
 8008a7e:	dc40      	bgt.n	8008b02 <_HandleIncomingPacket+0xaa>
 8008a80:	2b07      	cmp	r3, #7
 8008a82:	dc15      	bgt.n	8008ab0 <_HandleIncomingPacket+0x58>
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	dd3c      	ble.n	8008b02 <_HandleIncomingPacket+0xaa>
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	2b06      	cmp	r3, #6
 8008a8c:	d839      	bhi.n	8008b02 <_HandleIncomingPacket+0xaa>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <_HandleIncomingPacket+0x3c>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008ab7 	.word	0x08008ab7
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008ac3 	.word	0x08008ac3
 8008aa0:	08008ac9 	.word	0x08008ac9
 8008aa4:	08008acf 	.word	0x08008acf
 8008aa8:	08008ad5 	.word	0x08008ad5
 8008aac:	08008adb 	.word	0x08008adb
 8008ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8008ab2:	d035      	beq.n	8008b20 <_HandleIncomingPacket+0xc8>
 8008ab4:	e025      	b.n	8008b02 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008ab6:	f000 fc2f 	bl	8009318 <SEGGER_SYSVIEW_Start>
      break;
 8008aba:	e036      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008abc:	f000 fce6 	bl	800948c <SEGGER_SYSVIEW_Stop>
      break;
 8008ac0:	e033      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008ac2:	f000 febf 	bl	8009844 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008ac6:	e030      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008ac8:	f000 fe84 	bl	80097d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008acc:	e02d      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008ace:	f000 fd03 	bl	80094d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008ad2:	e02a      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008ad4:	f001 f8f2 	bl	8009cbc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008ad8:	e027      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008ada:	f001 f8d1 	bl	8009c80 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008ade:	e024      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008ae0:	4b14      	ldr	r3, [pc, #80]	; (8008b34 <_HandleIncomingPacket+0xdc>)
 8008ae2:	7e1b      	ldrb	r3, [r3, #24]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	1cfb      	adds	r3, r7, #3
 8008ae8:	2201      	movs	r2, #1
 8008aea:	4619      	mov	r1, r3
 8008aec:	f7ff fd8c 	bl	8008608 <SEGGER_RTT_ReadNoLock>
 8008af0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d015      	beq.n	8008b24 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 f840 	bl	8009b80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008b00:	e010      	b.n	8008b24 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	b25b      	sxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da0e      	bge.n	8008b28 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008b0a:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <_HandleIncomingPacket+0xdc>)
 8008b0c:	7e1b      	ldrb	r3, [r3, #24]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	1cfb      	adds	r3, r7, #3
 8008b12:	2201      	movs	r2, #1
 8008b14:	4619      	mov	r1, r3
 8008b16:	f7ff fd77 	bl	8008608 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008b1a:	e005      	b.n	8008b28 <_HandleIncomingPacket+0xd0>
    }
  }
 8008b1c:	bf00      	nop
 8008b1e:	e004      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
      break;
 8008b20:	bf00      	nop
 8008b22:	e002      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
      break;
 8008b24:	bf00      	nop
 8008b26:	e000      	b.n	8008b2a <_HandleIncomingPacket+0xd2>
      break;
 8008b28:	bf00      	nop
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	24014880 	.word	0x24014880

08008b38 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	; 0x30
 8008b3c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008b3e:	2301      	movs	r3, #1
 8008b40:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008b42:	1d3b      	adds	r3, r7, #4
 8008b44:	3301      	adds	r3, #1
 8008b46:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b4c:	4b31      	ldr	r3, [pc, #196]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b52:	e00b      	b.n	8008b6c <_TrySendOverflowPacket+0x34>
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	1c59      	adds	r1, r3, #1
 8008b5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	09db      	lsrs	r3, r3, #7
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b70:	d8f0      	bhi.n	8008b54 <_TrySendOverflowPacket+0x1c>
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008b82:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <_TrySendOverflowPacket+0xe0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008b88:	4b22      	ldr	r3, [pc, #136]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	623b      	str	r3, [r7, #32]
 8008b9a:	e00b      	b.n	8008bb4 <_TrySendOverflowPacket+0x7c>
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	1c59      	adds	r1, r3, #1
 8008ba4:	6279      	str	r1, [r7, #36]	; 0x24
 8008ba6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	09db      	lsrs	r3, r3, #7
 8008bb2:	623b      	str	r3, [r7, #32]
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8008bb8:	d8f0      	bhi.n	8008b9c <_TrySendOverflowPacket+0x64>
 8008bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	627a      	str	r2, [r7, #36]	; 0x24
 8008bc0:	6a3a      	ldr	r2, [r7, #32]
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8008bca:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	1d3b      	adds	r3, r7, #4
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	1d3b      	adds	r3, r7, #4
 8008bda:	4619      	mov	r1, r3
 8008bdc:	f7f7 fb88 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008be0:	4603      	mov	r3, r0
 8008be2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008bea:	4a0a      	ldr	r2, [pc, #40]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008bf0:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	e004      	b.n	8008c08 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008bfe:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a03      	ldr	r2, [pc, #12]	; (8008c14 <_TrySendOverflowPacket+0xdc>)
 8008c06:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008c08:	693b      	ldr	r3, [r7, #16]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3730      	adds	r7, #48	; 0x30
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	24014880 	.word	0x24014880
 8008c18:	e0001004 	.word	0xe0001004

08008c1c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08a      	sub	sp, #40	; 0x28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008c28:	4b98      	ldr	r3, [pc, #608]	; (8008e8c <_SendPacket+0x270>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d010      	beq.n	8008c52 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008c30:	4b96      	ldr	r3, [pc, #600]	; (8008e8c <_SendPacket+0x270>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 812d 	beq.w	8008e94 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008c3a:	4b94      	ldr	r3, [pc, #592]	; (8008e8c <_SendPacket+0x270>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d109      	bne.n	8008c56 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008c42:	f7ff ff79 	bl	8008b38 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008c46:	4b91      	ldr	r3, [pc, #580]	; (8008e8c <_SendPacket+0x270>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	f040 8124 	bne.w	8008e98 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8008c50:	e001      	b.n	8008c56 <_SendPacket+0x3a>
    goto Send;
 8008c52:	bf00      	nop
 8008c54:	e000      	b.n	8008c58 <_SendPacket+0x3c>
Send:
 8008c56:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b1f      	cmp	r3, #31
 8008c5c:	d809      	bhi.n	8008c72 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008c5e:	4b8b      	ldr	r3, [pc, #556]	; (8008e8c <_SendPacket+0x270>)
 8008c60:	69da      	ldr	r2, [r3, #28]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	fa22 f303 	lsr.w	r3, r2, r3
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8115 	bne.w	8008e9c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b17      	cmp	r3, #23
 8008c76:	d807      	bhi.n	8008c88 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e0c4      	b.n	8008e12 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b7f      	cmp	r3, #127	; 0x7f
 8008c94:	d912      	bls.n	8008cbc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	09da      	lsrs	r2, r3, #7
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	b2d2      	uxtb	r2, r2
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	3a01      	subs	r2, #1
 8008cae:	60fa      	str	r2, [r7, #12]
 8008cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	e006      	b.n	8008cca <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b7e      	cmp	r3, #126	; 0x7e
 8008cce:	d807      	bhi.n	8008ce0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	e098      	b.n	8008e12 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ce6:	d212      	bcs.n	8008d0e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	09da      	lsrs	r2, r3, #7
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	3a01      	subs	r2, #1
 8008d00:	60fa      	str	r2, [r7, #12]
 8008d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e081      	b.n	8008e12 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d14:	d21d      	bcs.n	8008d52 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	0b9a      	lsrs	r2, r3, #14
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	09db      	lsrs	r3, r3, #7
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	3a01      	subs	r2, #1
 8008d30:	60fa      	str	r2, [r7, #12]
 8008d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	3a01      	subs	r2, #1
 8008d44:	60fa      	str	r2, [r7, #12]
 8008d46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	e05f      	b.n	8008e12 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d58:	d228      	bcs.n	8008dac <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	0d5a      	lsrs	r2, r3, #21
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	0b9b      	lsrs	r3, r3, #14
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	3a01      	subs	r2, #1
 8008d74:	60fa      	str	r2, [r7, #12]
 8008d76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	09db      	lsrs	r3, r3, #7
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	3a01      	subs	r2, #1
 8008d8a:	60fa      	str	r2, [r7, #12]
 8008d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	3a01      	subs	r2, #1
 8008d9e:	60fa      	str	r2, [r7, #12]
 8008da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	e032      	b.n	8008e12 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	0f1a      	lsrs	r2, r3, #28
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	0d5b      	lsrs	r3, r3, #21
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	3a01      	subs	r2, #1
 8008dc6:	60fa      	str	r2, [r7, #12]
 8008dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	0b9b      	lsrs	r3, r3, #14
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	3a01      	subs	r2, #1
 8008ddc:	60fa      	str	r2, [r7, #12]
 8008dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	09db      	lsrs	r3, r3, #7
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	3a01      	subs	r2, #1
 8008df2:	60fa      	str	r2, [r7, #12]
 8008df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	3a01      	subs	r2, #1
 8008e06:	60fa      	str	r2, [r7, #12]
 8008e08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008e12:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <_SendPacket+0x274>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008e18:	4b1c      	ldr	r3, [pc, #112]	; (8008e8c <_SendPacket+0x270>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	623b      	str	r3, [r7, #32]
 8008e2a:	e00b      	b.n	8008e44 <_SendPacket+0x228>
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	1c59      	adds	r1, r3, #1
 8008e34:	6279      	str	r1, [r7, #36]	; 0x24
 8008e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	09db      	lsrs	r3, r3, #7
 8008e42:	623b      	str	r3, [r7, #32]
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	2b7f      	cmp	r3, #127	; 0x7f
 8008e48:	d8f0      	bhi.n	8008e2c <_SendPacket+0x210>
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e50:	6a3a      	ldr	r2, [r7, #32]
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <_SendPacket+0x270>)
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	461a      	mov	r2, r3
 8008e68:	68f9      	ldr	r1, [r7, #12]
 8008e6a:	f7f7 fa41 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008e6e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008e76:	4a05      	ldr	r2, [pc, #20]	; (8008e8c <_SendPacket+0x270>)
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	60d3      	str	r3, [r2, #12]
 8008e7c:	e00f      	b.n	8008e9e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008e7e:	4b03      	ldr	r3, [pc, #12]	; (8008e8c <_SendPacket+0x270>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	4b01      	ldr	r3, [pc, #4]	; (8008e8c <_SendPacket+0x270>)
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	e008      	b.n	8008e9e <_SendPacket+0x282>
 8008e8c:	24014880 	.word	0x24014880
 8008e90:	e0001004 	.word	0xe0001004
    goto SendDone;
 8008e94:	bf00      	nop
 8008e96:	e002      	b.n	8008e9e <_SendPacket+0x282>
      goto SendDone;
 8008e98:	bf00      	nop
 8008e9a:	e000      	b.n	8008e9e <_SendPacket+0x282>
      goto SendDone;
 8008e9c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <_SendPacket+0x2d4>)
 8008ea0:	7e1b      	ldrb	r3, [r3, #24]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4a13      	ldr	r2, [pc, #76]	; (8008ef4 <_SendPacket+0x2d8>)
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	440b      	add	r3, r1
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	4413      	add	r3, r2
 8008eb0:	336c      	adds	r3, #108	; 0x6c
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <_SendPacket+0x2d4>)
 8008eb6:	7e1b      	ldrb	r3, [r3, #24]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	490e      	ldr	r1, [pc, #56]	; (8008ef4 <_SendPacket+0x2d8>)
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	4403      	add	r3, r0
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3370      	adds	r3, #112	; 0x70
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d00b      	beq.n	8008ee6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008ece:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <_SendPacket+0x2d4>)
 8008ed0:	789b      	ldrb	r3, [r3, #2]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d107      	bne.n	8008ee6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <_SendPacket+0x2d4>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008edc:	f7ff fdbc 	bl	8008a58 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008ee0:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <_SendPacket+0x2d4>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008ee6:	bf00      	nop
 8008ee8:	3728      	adds	r7, #40	; 0x28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	24014880 	.word	0x24014880
 8008ef4:	240133c0 	.word	0x240133c0

08008ef8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008f06:	2300      	movs	r3, #0
 8008f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f0c:	4917      	ldr	r1, [pc, #92]	; (8008f6c <SEGGER_SYSVIEW_Init+0x74>)
 8008f0e:	4818      	ldr	r0, [pc, #96]	; (8008f70 <SEGGER_SYSVIEW_Init+0x78>)
 8008f10:	f7ff fc76 	bl	8008800 <SEGGER_RTT_AllocUpBuffer>
 8008f14:	4603      	mov	r3, r0
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	4b16      	ldr	r3, [pc, #88]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f1a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008f1c:	4b15      	ldr	r3, [pc, #84]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f1e:	785a      	ldrb	r2, [r3, #1]
 8008f20:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f22:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008f24:	4b13      	ldr	r3, [pc, #76]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f26:	7e1b      	ldrb	r3, [r3, #24]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	2308      	movs	r3, #8
 8008f30:	4a11      	ldr	r2, [pc, #68]	; (8008f78 <SEGGER_SYSVIEW_Init+0x80>)
 8008f32:	490f      	ldr	r1, [pc, #60]	; (8008f70 <SEGGER_SYSVIEW_Init+0x78>)
 8008f34:	f7ff fce8 	bl	8008908 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008f38:	4b0e      	ldr	r3, [pc, #56]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <SEGGER_SYSVIEW_Init+0x84>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a0c      	ldr	r2, [pc, #48]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f44:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8008f46:	4a0b      	ldr	r2, [pc, #44]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008f4c:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008f52:	4a08      	ldr	r2, [pc, #32]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008f58:	4a06      	ldr	r2, [pc, #24]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008f5e:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <SEGGER_SYSVIEW_Init+0x7c>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008f64:	bf00      	nop
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	24013878 	.word	0x24013878
 8008f70:	0800a9bc 	.word	0x0800a9bc
 8008f74:	24014880 	.word	0x24014880
 8008f78:	24014878 	.word	0x24014878
 8008f7c:	e0001004 	.word	0xe0001004

08008f80 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008f88:	4a04      	ldr	r2, [pc, #16]	; (8008f9c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6113      	str	r3, [r2, #16]
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	24014880 	.word	0x24014880

08008fa0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8008fac:	f04f 0120 	mov.w	r1, #32
 8008fb0:	f381 8811 	msr	BASEPRI, r1
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	4808      	ldr	r0, [pc, #32]	; (8008fd8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008fb8:	f7ff fd42 	bl	8008a40 <_PreparePacket>
 8008fbc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	68b9      	ldr	r1, [r7, #8]
 8008fc2:	68b8      	ldr	r0, [r7, #8]
 8008fc4:	f7ff fe2a 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f383 8811 	msr	BASEPRI, r3
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	240148b0 	.word	0x240148b0

08008fdc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8008fea:	f04f 0120 	mov.w	r1, #32
 8008fee:	f381 8811 	msr	BASEPRI, r1
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	4816      	ldr	r0, [pc, #88]	; (8009050 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008ff6:	f7ff fd23 	bl	8008a40 <_PreparePacket>
 8008ffa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	e00b      	b.n	8009022 <SEGGER_SYSVIEW_RecordU32+0x46>
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	b2da      	uxtb	r2, r3
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	1c59      	adds	r1, r3, #1
 8009012:	61f9      	str	r1, [r7, #28]
 8009014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009018:	b2d2      	uxtb	r2, r2
 800901a:	701a      	strb	r2, [r3, #0]
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	09db      	lsrs	r3, r3, #7
 8009020:	61bb      	str	r3, [r7, #24]
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	2b7f      	cmp	r3, #127	; 0x7f
 8009026:	d8f0      	bhi.n	800900a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	61fa      	str	r2, [r7, #28]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	b2d2      	uxtb	r2, r2
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	68f9      	ldr	r1, [r7, #12]
 800903c:	6938      	ldr	r0, [r7, #16]
 800903e:	f7ff fded 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f383 8811 	msr	BASEPRI, r3
}
 8009048:	bf00      	nop
 800904a:	3720      	adds	r7, #32
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	240148b0 	.word	0x240148b0

08009054 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b08c      	sub	sp, #48	; 0x30
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009060:	f3ef 8311 	mrs	r3, BASEPRI
 8009064:	f04f 0120 	mov.w	r1, #32
 8009068:	f381 8811 	msr	BASEPRI, r1
 800906c:	61fb      	str	r3, [r7, #28]
 800906e:	4825      	ldr	r0, [pc, #148]	; (8009104 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009070:	f7ff fce6 	bl	8008a40 <_PreparePacket>
 8009074:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	62bb      	str	r3, [r7, #40]	; 0x28
 8009082:	e00b      	b.n	800909c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	b2da      	uxtb	r2, r3
 8009088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908a:	1c59      	adds	r1, r3, #1
 800908c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800908e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009092:	b2d2      	uxtb	r2, r2
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	09db      	lsrs	r3, r3, #7
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	2b7f      	cmp	r3, #127	; 0x7f
 80090a0:	d8f0      	bhi.n	8009084 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090aa:	b2d2      	uxtb	r2, r2
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	623b      	str	r3, [r7, #32]
 80090ba:	e00b      	b.n	80090d4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	1c59      	adds	r1, r3, #1
 80090c4:	6279      	str	r1, [r7, #36]	; 0x24
 80090c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	09db      	lsrs	r3, r3, #7
 80090d2:	623b      	str	r3, [r7, #32]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	2b7f      	cmp	r3, #127	; 0x7f
 80090d8:	d8f0      	bhi.n	80090bc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	627a      	str	r2, [r7, #36]	; 0x24
 80090e0:	6a3a      	ldr	r2, [r7, #32]
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	6979      	ldr	r1, [r7, #20]
 80090ee:	69b8      	ldr	r0, [r7, #24]
 80090f0:	f7ff fd94 	bl	8008c1c <_SendPacket>
  RECORD_END();
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	f383 8811 	msr	BASEPRI, r3
}
 80090fa:	bf00      	nop
 80090fc:	3730      	adds	r7, #48	; 0x30
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	240148b0 	.word	0x240148b0

08009108 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8009108:	b580      	push	{r7, lr}
 800910a:	b08e      	sub	sp, #56	; 0x38
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8009116:	f3ef 8311 	mrs	r3, BASEPRI
 800911a:	f04f 0120 	mov.w	r1, #32
 800911e:	f381 8811 	msr	BASEPRI, r1
 8009122:	61fb      	str	r3, [r7, #28]
 8009124:	4832      	ldr	r0, [pc, #200]	; (80091f0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8009126:	f7ff fc8b 	bl	8008a40 <_PreparePacket>
 800912a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	637b      	str	r3, [r7, #52]	; 0x34
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	633b      	str	r3, [r7, #48]	; 0x30
 8009138:	e00b      	b.n	8009152 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	b2da      	uxtb	r2, r3
 800913e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009140:	1c59      	adds	r1, r3, #1
 8009142:	6379      	str	r1, [r7, #52]	; 0x34
 8009144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009148:	b2d2      	uxtb	r2, r2
 800914a:	701a      	strb	r2, [r3, #0]
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	09db      	lsrs	r3, r3, #7
 8009150:	633b      	str	r3, [r7, #48]	; 0x30
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	2b7f      	cmp	r3, #127	; 0x7f
 8009156:	d8f0      	bhi.n	800913a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8009158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	637a      	str	r2, [r7, #52]	; 0x34
 800915e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009160:	b2d2      	uxtb	r2, r2
 8009162:	701a      	strb	r2, [r3, #0]
 8009164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009166:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009170:	e00b      	b.n	800918a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	b2da      	uxtb	r2, r3
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	1c59      	adds	r1, r3, #1
 800917a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800917c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	701a      	strb	r2, [r3, #0]
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	09db      	lsrs	r3, r3, #7
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	2b7f      	cmp	r3, #127	; 0x7f
 800918e:	d8f0      	bhi.n	8009172 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	701a      	strb	r2, [r3, #0]
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	623b      	str	r3, [r7, #32]
 80091a8:	e00b      	b.n	80091c2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	1c59      	adds	r1, r3, #1
 80091b2:	6279      	str	r1, [r7, #36]	; 0x24
 80091b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091b8:	b2d2      	uxtb	r2, r2
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	09db      	lsrs	r3, r3, #7
 80091c0:	623b      	str	r3, [r7, #32]
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	2b7f      	cmp	r3, #127	; 0x7f
 80091c6:	d8f0      	bhi.n	80091aa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	627a      	str	r2, [r7, #36]	; 0x24
 80091ce:	6a3a      	ldr	r2, [r7, #32]
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	6979      	ldr	r1, [r7, #20]
 80091dc:	69b8      	ldr	r0, [r7, #24]
 80091de:	f7ff fd1d 	bl	8008c1c <_SendPacket>
  RECORD_END();
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	f383 8811 	msr	BASEPRI, r3
}
 80091e8:	bf00      	nop
 80091ea:	3738      	adds	r7, #56	; 0x38
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	240148b0 	.word	0x240148b0

080091f4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b090      	sub	sp, #64	; 0x40
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009202:	f3ef 8311 	mrs	r3, BASEPRI
 8009206:	f04f 0120 	mov.w	r1, #32
 800920a:	f381 8811 	msr	BASEPRI, r1
 800920e:	61fb      	str	r3, [r7, #28]
 8009210:	4840      	ldr	r0, [pc, #256]	; (8009314 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009212:	f7ff fc15 	bl	8008a40 <_PreparePacket>
 8009216:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	63bb      	str	r3, [r7, #56]	; 0x38
 8009224:	e00b      	b.n	800923e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	b2da      	uxtb	r2, r3
 800922a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922c:	1c59      	adds	r1, r3, #1
 800922e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	09db      	lsrs	r3, r3, #7
 800923c:	63bb      	str	r3, [r7, #56]	; 0x38
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	2b7f      	cmp	r3, #127	; 0x7f
 8009242:	d8f0      	bhi.n	8009226 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	63fa      	str	r2, [r7, #60]	; 0x3c
 800924a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800924c:	b2d2      	uxtb	r2, r2
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	637b      	str	r3, [r7, #52]	; 0x34
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	633b      	str	r3, [r7, #48]	; 0x30
 800925c:	e00b      	b.n	8009276 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	b2da      	uxtb	r2, r3
 8009262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009264:	1c59      	adds	r1, r3, #1
 8009266:	6379      	str	r1, [r7, #52]	; 0x34
 8009268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800926c:	b2d2      	uxtb	r2, r2
 800926e:	701a      	strb	r2, [r3, #0]
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	09db      	lsrs	r3, r3, #7
 8009274:	633b      	str	r3, [r7, #48]	; 0x30
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	2b7f      	cmp	r3, #127	; 0x7f
 800927a:	d8f0      	bhi.n	800925e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	637a      	str	r2, [r7, #52]	; 0x34
 8009282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
 8009294:	e00b      	b.n	80092ae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009298:	b2da      	uxtb	r2, r3
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	1c59      	adds	r1, r3, #1
 800929e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80092a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092a4:	b2d2      	uxtb	r2, r2
 80092a6:	701a      	strb	r2, [r3, #0]
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	09db      	lsrs	r3, r3, #7
 80092ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	2b7f      	cmp	r3, #127	; 0x7f
 80092b2:	d8f0      	bhi.n	8009296 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092bc:	b2d2      	uxtb	r2, r2
 80092be:	701a      	strb	r2, [r3, #0]
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
 80092c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ca:	623b      	str	r3, [r7, #32]
 80092cc:	e00b      	b.n	80092e6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	1c59      	adds	r1, r3, #1
 80092d6:	6279      	str	r1, [r7, #36]	; 0x24
 80092d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092dc:	b2d2      	uxtb	r2, r2
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	09db      	lsrs	r3, r3, #7
 80092e4:	623b      	str	r3, [r7, #32]
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	2b7f      	cmp	r3, #127	; 0x7f
 80092ea:	d8f0      	bhi.n	80092ce <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	627a      	str	r2, [r7, #36]	; 0x24
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	b2d2      	uxtb	r2, r2
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	69b8      	ldr	r0, [r7, #24]
 8009302:	f7ff fc8b 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	f383 8811 	msr	BASEPRI, r3
}
 800930c:	bf00      	nop
 800930e:	3740      	adds	r7, #64	; 0x40
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	240148b0 	.word	0x240148b0

08009318 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009318:	b580      	push	{r7, lr}
 800931a:	b08c      	sub	sp, #48	; 0x30
 800931c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800931e:	4b58      	ldr	r3, [pc, #352]	; (8009480 <SEGGER_SYSVIEW_Start+0x168>)
 8009320:	2201      	movs	r2, #1
 8009322:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009324:	f3ef 8311 	mrs	r3, BASEPRI
 8009328:	f04f 0120 	mov.w	r1, #32
 800932c:	f381 8811 	msr	BASEPRI, r1
 8009330:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009332:	4b53      	ldr	r3, [pc, #332]	; (8009480 <SEGGER_SYSVIEW_Start+0x168>)
 8009334:	785b      	ldrb	r3, [r3, #1]
 8009336:	220a      	movs	r2, #10
 8009338:	4952      	ldr	r1, [pc, #328]	; (8009484 <SEGGER_SYSVIEW_Start+0x16c>)
 800933a:	4618      	mov	r0, r3
 800933c:	f7f6 ffd8 	bl	80002f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009346:	200a      	movs	r0, #10
 8009348:	f7ff fe2a 	bl	8008fa0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800934c:	f3ef 8311 	mrs	r3, BASEPRI
 8009350:	f04f 0120 	mov.w	r1, #32
 8009354:	f381 8811 	msr	BASEPRI, r1
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	484b      	ldr	r0, [pc, #300]	; (8009488 <SEGGER_SYSVIEW_Start+0x170>)
 800935c:	f7ff fb70 	bl	8008a40 <_PreparePacket>
 8009360:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800936a:	4b45      	ldr	r3, [pc, #276]	; (8009480 <SEGGER_SYSVIEW_Start+0x168>)
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009370:	e00b      	b.n	800938a <SEGGER_SYSVIEW_Start+0x72>
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	b2da      	uxtb	r2, r3
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	1c59      	adds	r1, r3, #1
 800937a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800937c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009380:	b2d2      	uxtb	r2, r2
 8009382:	701a      	strb	r2, [r3, #0]
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	09db      	lsrs	r3, r3, #7
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	2b7f      	cmp	r3, #127	; 0x7f
 800938e:	d8f0      	bhi.n	8009372 <SEGGER_SYSVIEW_Start+0x5a>
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009398:	b2d2      	uxtb	r2, r2
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	627b      	str	r3, [r7, #36]	; 0x24
 80093a4:	4b36      	ldr	r3, [pc, #216]	; (8009480 <SEGGER_SYSVIEW_Start+0x168>)
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	623b      	str	r3, [r7, #32]
 80093aa:	e00b      	b.n	80093c4 <SEGGER_SYSVIEW_Start+0xac>
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	1c59      	adds	r1, r3, #1
 80093b4:	6279      	str	r1, [r7, #36]	; 0x24
 80093b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	09db      	lsrs	r3, r3, #7
 80093c2:	623b      	str	r3, [r7, #32]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	2b7f      	cmp	r3, #127	; 0x7f
 80093c8:	d8f0      	bhi.n	80093ac <SEGGER_SYSVIEW_Start+0x94>
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	627a      	str	r2, [r7, #36]	; 0x24
 80093d0:	6a3a      	ldr	r2, [r7, #32]
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	4b28      	ldr	r3, [pc, #160]	; (8009480 <SEGGER_SYSVIEW_Start+0x168>)
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	61bb      	str	r3, [r7, #24]
 80093e4:	e00b      	b.n	80093fe <SEGGER_SYSVIEW_Start+0xe6>
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	1c59      	adds	r1, r3, #1
 80093ee:	61f9      	str	r1, [r7, #28]
 80093f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	701a      	strb	r2, [r3, #0]
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	09db      	lsrs	r3, r3, #7
 80093fc:	61bb      	str	r3, [r7, #24]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	2b7f      	cmp	r3, #127	; 0x7f
 8009402:	d8f0      	bhi.n	80093e6 <SEGGER_SYSVIEW_Start+0xce>
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	61fa      	str	r2, [r7, #28]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	b2d2      	uxtb	r2, r2
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	2300      	movs	r3, #0
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e00b      	b.n	8009436 <SEGGER_SYSVIEW_Start+0x11e>
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	b2da      	uxtb	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	1c59      	adds	r1, r3, #1
 8009426:	6179      	str	r1, [r7, #20]
 8009428:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800942c:	b2d2      	uxtb	r2, r2
 800942e:	701a      	strb	r2, [r3, #0]
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	09db      	lsrs	r3, r3, #7
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b7f      	cmp	r3, #127	; 0x7f
 800943a:	d8f0      	bhi.n	800941e <SEGGER_SYSVIEW_Start+0x106>
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	617a      	str	r2, [r7, #20]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	b2d2      	uxtb	r2, r2
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800944c:	2218      	movs	r2, #24
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff fbe3 	bl	8008c1c <_SendPacket>
      RECORD_END();
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800945c:	4b08      	ldr	r3, [pc, #32]	; (8009480 <SEGGER_SYSVIEW_Start+0x168>)
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009464:	4b06      	ldr	r3, [pc, #24]	; (8009480 <SEGGER_SYSVIEW_Start+0x168>)
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800946a:	f000 f9eb 	bl	8009844 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800946e:	f000 f9b1 	bl	80097d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009472:	f000 fc23 	bl	8009cbc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009476:	bf00      	nop
 8009478:	3730      	adds	r7, #48	; 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	24014880 	.word	0x24014880
 8009484:	0800aa18 	.word	0x0800aa18
 8009488:	240148b0 	.word	0x240148b0

0800948c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009492:	f3ef 8311 	mrs	r3, BASEPRI
 8009496:	f04f 0120 	mov.w	r1, #32
 800949a:	f381 8811 	msr	BASEPRI, r1
 800949e:	607b      	str	r3, [r7, #4]
 80094a0:	480b      	ldr	r0, [pc, #44]	; (80094d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80094a2:	f7ff facd 	bl	8008a40 <_PreparePacket>
 80094a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80094a8:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80094b0:	220b      	movs	r2, #11
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6838      	ldr	r0, [r7, #0]
 80094b6:	f7ff fbb1 	bl	8008c1c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80094ba:	4b06      	ldr	r3, [pc, #24]	; (80094d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f383 8811 	msr	BASEPRI, r3
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	240148b0 	.word	0x240148b0
 80094d4:	24014880 	.word	0x24014880

080094d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08c      	sub	sp, #48	; 0x30
 80094dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80094de:	f3ef 8311 	mrs	r3, BASEPRI
 80094e2:	f04f 0120 	mov.w	r1, #32
 80094e6:	f381 8811 	msr	BASEPRI, r1
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	4845      	ldr	r0, [pc, #276]	; (8009604 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80094ee:	f7ff faa7 	bl	8008a40 <_PreparePacket>
 80094f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094fc:	4b42      	ldr	r3, [pc, #264]	; (8009608 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
 8009502:	e00b      	b.n	800951c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	b2da      	uxtb	r2, r3
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	1c59      	adds	r1, r3, #1
 800950c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800950e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009512:	b2d2      	uxtb	r2, r2
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	09db      	lsrs	r3, r3, #7
 800951a:	62bb      	str	r3, [r7, #40]	; 0x28
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	2b7f      	cmp	r3, #127	; 0x7f
 8009520:	d8f0      	bhi.n	8009504 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	627b      	str	r3, [r7, #36]	; 0x24
 8009536:	4b34      	ldr	r3, [pc, #208]	; (8009608 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	623b      	str	r3, [r7, #32]
 800953c:	e00b      	b.n	8009556 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	b2da      	uxtb	r2, r3
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	1c59      	adds	r1, r3, #1
 8009546:	6279      	str	r1, [r7, #36]	; 0x24
 8009548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800954c:	b2d2      	uxtb	r2, r2
 800954e:	701a      	strb	r2, [r3, #0]
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	09db      	lsrs	r3, r3, #7
 8009554:	623b      	str	r3, [r7, #32]
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	2b7f      	cmp	r3, #127	; 0x7f
 800955a:	d8f0      	bhi.n	800953e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	627a      	str	r2, [r7, #36]	; 0x24
 8009562:	6a3a      	ldr	r2, [r7, #32]
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	4b25      	ldr	r3, [pc, #148]	; (8009608 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	61bb      	str	r3, [r7, #24]
 8009576:	e00b      	b.n	8009590 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	b2da      	uxtb	r2, r3
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	1c59      	adds	r1, r3, #1
 8009580:	61f9      	str	r1, [r7, #28]
 8009582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009586:	b2d2      	uxtb	r2, r2
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	09db      	lsrs	r3, r3, #7
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b7f      	cmp	r3, #127	; 0x7f
 8009594:	d8f0      	bhi.n	8009578 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	61fa      	str	r2, [r7, #28]
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
 80095ae:	e00b      	b.n	80095c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	1c59      	adds	r1, r3, #1
 80095b8:	6179      	str	r1, [r7, #20]
 80095ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	09db      	lsrs	r3, r3, #7
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	2b7f      	cmp	r3, #127	; 0x7f
 80095cc:	d8f0      	bhi.n	80095b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	617a      	str	r2, [r7, #20]
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80095de:	2218      	movs	r2, #24
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	68b8      	ldr	r0, [r7, #8]
 80095e4:	f7ff fb1a 	bl	8008c1c <_SendPacket>
  RECORD_END();
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80095ee:	4b06      	ldr	r3, [pc, #24]	; (8009608 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80095f6:	4b04      	ldr	r3, [pc, #16]	; (8009608 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	4798      	blx	r3
  }
}
 80095fc:	bf00      	nop
 80095fe:	3730      	adds	r7, #48	; 0x30
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	240148b0 	.word	0x240148b0
 8009608:	24014880 	.word	0x24014880

0800960c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800960c:	b580      	push	{r7, lr}
 800960e:	b092      	sub	sp, #72	; 0x48
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009614:	f3ef 8311 	mrs	r3, BASEPRI
 8009618:	f04f 0120 	mov.w	r1, #32
 800961c:	f381 8811 	msr	BASEPRI, r1
 8009620:	617b      	str	r3, [r7, #20]
 8009622:	486a      	ldr	r0, [pc, #424]	; (80097cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009624:	f7ff fa0c 	bl	8008a40 <_PreparePacket>
 8009628:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	647b      	str	r3, [r7, #68]	; 0x44
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	4b66      	ldr	r3, [pc, #408]	; (80097d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	643b      	str	r3, [r7, #64]	; 0x40
 800963e:	e00b      	b.n	8009658 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009642:	b2da      	uxtb	r2, r3
 8009644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	6479      	str	r1, [r7, #68]	; 0x44
 800964a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009654:	09db      	lsrs	r3, r3, #7
 8009656:	643b      	str	r3, [r7, #64]	; 0x40
 8009658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800965a:	2b7f      	cmp	r3, #127	; 0x7f
 800965c:	d8f0      	bhi.n	8009640 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800965e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	647a      	str	r2, [r7, #68]	; 0x44
 8009664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	63bb      	str	r3, [r7, #56]	; 0x38
 8009678:	e00b      	b.n	8009692 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	b2da      	uxtb	r2, r3
 800967e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009680:	1c59      	adds	r1, r3, #1
 8009682:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009684:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	09db      	lsrs	r3, r3, #7
 8009690:	63bb      	str	r3, [r7, #56]	; 0x38
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	2b7f      	cmp	r3, #127	; 0x7f
 8009696:	d8f0      	bhi.n	800967a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800969e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096a0:	b2d2      	uxtb	r2, r2
 80096a2:	701a      	strb	r2, [r3, #0]
 80096a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff f975 	bl	80089a0 <_EncodeStr>
 80096b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80096b8:	2209      	movs	r2, #9
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	6938      	ldr	r0, [r7, #16]
 80096be:	f7ff faad 	bl	8008c1c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	637b      	str	r3, [r7, #52]	; 0x34
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4b40      	ldr	r3, [pc, #256]	; (80097d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	633b      	str	r3, [r7, #48]	; 0x30
 80096d6:	e00b      	b.n	80096f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096de:	1c59      	adds	r1, r3, #1
 80096e0:	6379      	str	r1, [r7, #52]	; 0x34
 80096e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	09db      	lsrs	r3, r3, #7
 80096ee:	633b      	str	r3, [r7, #48]	; 0x30
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	2b7f      	cmp	r3, #127	; 0x7f
 80096f4:	d8f0      	bhi.n	80096d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80096f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	637a      	str	r2, [r7, #52]	; 0x34
 80096fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009704:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009710:	e00b      	b.n	800972a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	b2da      	uxtb	r2, r3
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	1c59      	adds	r1, r3, #1
 800971a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800971c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009720:	b2d2      	uxtb	r2, r2
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	09db      	lsrs	r3, r3, #7
 8009728:	62bb      	str	r3, [r7, #40]	; 0x28
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	2b7f      	cmp	r3, #127	; 0x7f
 800972e:	d8f0      	bhi.n	8009712 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	623b      	str	r3, [r7, #32]
 800974a:	e00b      	b.n	8009764 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	b2da      	uxtb	r2, r3
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	1c59      	adds	r1, r3, #1
 8009754:	6279      	str	r1, [r7, #36]	; 0x24
 8009756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800975a:	b2d2      	uxtb	r2, r2
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	09db      	lsrs	r3, r3, #7
 8009762:	623b      	str	r3, [r7, #32]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	2b7f      	cmp	r3, #127	; 0x7f
 8009768:	d8f0      	bhi.n	800974c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	627a      	str	r2, [r7, #36]	; 0x24
 8009770:	6a3a      	ldr	r2, [r7, #32]
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]
 8009776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009778:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	2300      	movs	r3, #0
 8009780:	61bb      	str	r3, [r7, #24]
 8009782:	e00b      	b.n	800979c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	b2da      	uxtb	r2, r3
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	1c59      	adds	r1, r3, #1
 800978c:	61f9      	str	r1, [r7, #28]
 800978e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	09db      	lsrs	r3, r3, #7
 800979a:	61bb      	str	r3, [r7, #24]
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	2b7f      	cmp	r3, #127	; 0x7f
 80097a0:	d8f0      	bhi.n	8009784 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	61fa      	str	r2, [r7, #28]
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	701a      	strb	r2, [r3, #0]
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80097b2:	2215      	movs	r2, #21
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	6938      	ldr	r0, [r7, #16]
 80097b8:	f7ff fa30 	bl	8008c1c <_SendPacket>
  RECORD_END();
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f383 8811 	msr	BASEPRI, r3
}
 80097c2:	bf00      	nop
 80097c4:	3748      	adds	r7, #72	; 0x48
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	240148b0 	.word	0x240148b0
 80097d0:	24014880 	.word	0x24014880

080097d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80097ea:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4798      	blx	r3
  }
}
 80097f2:	bf00      	nop
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	24014880 	.word	0x24014880

080097fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009804:	f3ef 8311 	mrs	r3, BASEPRI
 8009808:	f04f 0120 	mov.w	r1, #32
 800980c:	f381 8811 	msr	BASEPRI, r1
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	480b      	ldr	r0, [pc, #44]	; (8009840 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009814:	f7ff f914 	bl	8008a40 <_PreparePacket>
 8009818:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800981a:	2280      	movs	r2, #128	; 0x80
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	6938      	ldr	r0, [r7, #16]
 8009820:	f7ff f8be 	bl	80089a0 <_EncodeStr>
 8009824:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009826:	220e      	movs	r2, #14
 8009828:	68f9      	ldr	r1, [r7, #12]
 800982a:	6938      	ldr	r0, [r7, #16]
 800982c:	f7ff f9f6 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f383 8811 	msr	BASEPRI, r3
}
 8009836:	bf00      	nop
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	240148b0 	.word	0x240148b0

08009844 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800984a:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01a      	beq.n	8009888 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d015      	beq.n	8009888 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800985c:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4798      	blx	r3
 8009864:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009868:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800986a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800986e:	f04f 0200 	mov.w	r2, #0
 8009872:	f04f 0300 	mov.w	r3, #0
 8009876:	000a      	movs	r2, r1
 8009878:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800987a:	4613      	mov	r3, r2
 800987c:	461a      	mov	r2, r3
 800987e:	4621      	mov	r1, r4
 8009880:	200d      	movs	r0, #13
 8009882:	f7ff fbe7 	bl	8009054 <SEGGER_SYSVIEW_RecordU32x2>
 8009886:	e006      	b.n	8009896 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009888:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4619      	mov	r1, r3
 800988e:	200c      	movs	r0, #12
 8009890:	f7ff fba4 	bl	8008fdc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	bd90      	pop	{r4, r7, pc}
 800989e:	bf00      	nop
 80098a0:	24014880 	.word	0x24014880
 80098a4:	e0001004 	.word	0xe0001004

080098a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80098ae:	f3ef 8311 	mrs	r3, BASEPRI
 80098b2:	f04f 0120 	mov.w	r1, #32
 80098b6:	f381 8811 	msr	BASEPRI, r1
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	4819      	ldr	r0, [pc, #100]	; (8009924 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80098be:	f7ff f8bf 	bl	8008a40 <_PreparePacket>
 80098c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80098c8:	4b17      	ldr	r3, [pc, #92]	; (8009928 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	613b      	str	r3, [r7, #16]
 80098da:	e00b      	b.n	80098f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	1c59      	adds	r1, r3, #1
 80098e4:	6179      	str	r1, [r7, #20]
 80098e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	09db      	lsrs	r3, r3, #7
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2b7f      	cmp	r3, #127	; 0x7f
 80098f8:	d8f0      	bhi.n	80098dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	617a      	str	r2, [r7, #20]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800990a:	2202      	movs	r2, #2
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	68b8      	ldr	r0, [r7, #8]
 8009910:	f7ff f984 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f383 8811 	msr	BASEPRI, r3
}
 800991a:	bf00      	nop
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	240148b0 	.word	0x240148b0
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009932:	f3ef 8311 	mrs	r3, BASEPRI
 8009936:	f04f 0120 	mov.w	r1, #32
 800993a:	f381 8811 	msr	BASEPRI, r1
 800993e:	607b      	str	r3, [r7, #4]
 8009940:	4807      	ldr	r0, [pc, #28]	; (8009960 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009942:	f7ff f87d 	bl	8008a40 <_PreparePacket>
 8009946:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009948:	2203      	movs	r2, #3
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6838      	ldr	r0, [r7, #0]
 800994e:	f7ff f965 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f383 8811 	msr	BASEPRI, r3
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	240148b0 	.word	0x240148b0

08009964 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800996a:	f3ef 8311 	mrs	r3, BASEPRI
 800996e:	f04f 0120 	mov.w	r1, #32
 8009972:	f381 8811 	msr	BASEPRI, r1
 8009976:	607b      	str	r3, [r7, #4]
 8009978:	4807      	ldr	r0, [pc, #28]	; (8009998 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800997a:	f7ff f861 	bl	8008a40 <_PreparePacket>
 800997e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009980:	2212      	movs	r2, #18
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6838      	ldr	r0, [r7, #0]
 8009986:	f7ff f949 	bl	8008c1c <_SendPacket>
  RECORD_END();
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f383 8811 	msr	BASEPRI, r3
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	240148b0 	.word	0x240148b0

0800999c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80099a2:	f3ef 8311 	mrs	r3, BASEPRI
 80099a6:	f04f 0120 	mov.w	r1, #32
 80099aa:	f381 8811 	msr	BASEPRI, r1
 80099ae:	607b      	str	r3, [r7, #4]
 80099b0:	4807      	ldr	r0, [pc, #28]	; (80099d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80099b2:	f7ff f845 	bl	8008a40 <_PreparePacket>
 80099b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80099b8:	2211      	movs	r2, #17
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6838      	ldr	r0, [r7, #0]
 80099be:	f7ff f92d 	bl	8008c1c <_SendPacket>
  RECORD_END();
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f383 8811 	msr	BASEPRI, r3
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	240148b0 	.word	0x240148b0

080099d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80099dc:	f3ef 8311 	mrs	r3, BASEPRI
 80099e0:	f04f 0120 	mov.w	r1, #32
 80099e4:	f381 8811 	msr	BASEPRI, r1
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	4819      	ldr	r0, [pc, #100]	; (8009a50 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80099ec:	f7ff f828 	bl	8008a40 <_PreparePacket>
 80099f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80099f6:	4b17      	ldr	r3, [pc, #92]	; (8009a54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	61fb      	str	r3, [r7, #28]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	61bb      	str	r3, [r7, #24]
 8009a08:	e00b      	b.n	8009a22 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	1c59      	adds	r1, r3, #1
 8009a12:	61f9      	str	r1, [r7, #28]
 8009a14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	09db      	lsrs	r3, r3, #7
 8009a20:	61bb      	str	r3, [r7, #24]
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2b7f      	cmp	r3, #127	; 0x7f
 8009a26:	d8f0      	bhi.n	8009a0a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	61fa      	str	r2, [r7, #28]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009a38:	2208      	movs	r2, #8
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	6938      	ldr	r0, [r7, #16]
 8009a3e:	f7ff f8ed 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f383 8811 	msr	BASEPRI, r3
}
 8009a48:	bf00      	nop
 8009a4a:	3720      	adds	r7, #32
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	240148b0 	.word	0x240148b0
 8009a54:	24014880 	.word	0x24014880

08009a58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009a60:	f3ef 8311 	mrs	r3, BASEPRI
 8009a64:	f04f 0120 	mov.w	r1, #32
 8009a68:	f381 8811 	msr	BASEPRI, r1
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	4819      	ldr	r0, [pc, #100]	; (8009ad4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009a70:	f7fe ffe6 	bl	8008a40 <_PreparePacket>
 8009a74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009a7a:	4b17      	ldr	r3, [pc, #92]	; (8009ad8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	61fb      	str	r3, [r7, #28]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	61bb      	str	r3, [r7, #24]
 8009a8c:	e00b      	b.n	8009aa6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	1c59      	adds	r1, r3, #1
 8009a96:	61f9      	str	r1, [r7, #28]
 8009a98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a9c:	b2d2      	uxtb	r2, r2
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	09db      	lsrs	r3, r3, #7
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8009aaa:	d8f0      	bhi.n	8009a8e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	61fa      	str	r2, [r7, #28]
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	701a      	strb	r2, [r3, #0]
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009abc:	2204      	movs	r2, #4
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	6938      	ldr	r0, [r7, #16]
 8009ac2:	f7ff f8ab 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f383 8811 	msr	BASEPRI, r3
}
 8009acc:	bf00      	nop
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	240148b0 	.word	0x240148b0
 8009ad8:	24014880 	.word	0x24014880

08009adc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009ae4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ae8:	f04f 0120 	mov.w	r1, #32
 8009aec:	f381 8811 	msr	BASEPRI, r1
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	4819      	ldr	r0, [pc, #100]	; (8009b58 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009af4:	f7fe ffa4 	bl	8008a40 <_PreparePacket>
 8009af8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009afe:	4b17      	ldr	r3, [pc, #92]	; (8009b5c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	61fb      	str	r3, [r7, #28]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	61bb      	str	r3, [r7, #24]
 8009b10:	e00b      	b.n	8009b2a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	1c59      	adds	r1, r3, #1
 8009b1a:	61f9      	str	r1, [r7, #28]
 8009b1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	09db      	lsrs	r3, r3, #7
 8009b28:	61bb      	str	r3, [r7, #24]
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b2e:	d8f0      	bhi.n	8009b12 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	61fa      	str	r2, [r7, #28]
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	b2d2      	uxtb	r2, r2
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009b40:	2206      	movs	r2, #6
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	6938      	ldr	r0, [r7, #16]
 8009b46:	f7ff f869 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f383 8811 	msr	BASEPRI, r3
}
 8009b50:	bf00      	nop
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	240148b0 	.word	0x240148b0
 8009b5c:	24014880 	.word	0x24014880

08009b60 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	1ad3      	subs	r3, r2, r3
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	24014880 	.word	0x24014880

08009b80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08c      	sub	sp, #48	; 0x30
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009b8a:	4b3b      	ldr	r3, [pc, #236]	; (8009c78 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d06d      	beq.n	8009c6e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8009b92:	4b39      	ldr	r3, [pc, #228]	; (8009c78 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009b98:	2300      	movs	r3, #0
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b9c:	e008      	b.n	8009bb0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	3301      	adds	r3, #1
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d3f2      	bcc.n	8009b9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8009bb8:	e000      	b.n	8009bbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009bba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d055      	beq.n	8009c6e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8009bc6:	f04f 0120 	mov.w	r1, #32
 8009bca:	f381 8811 	msr	BASEPRI, r1
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	482a      	ldr	r0, [pc, #168]	; (8009c7c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009bd2:	f7fe ff35 	bl	8008a40 <_PreparePacket>
 8009bd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	623b      	str	r3, [r7, #32]
 8009be4:	e00b      	b.n	8009bfe <SEGGER_SYSVIEW_SendModule+0x7e>
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	1c59      	adds	r1, r3, #1
 8009bee:	6279      	str	r1, [r7, #36]	; 0x24
 8009bf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	09db      	lsrs	r3, r3, #7
 8009bfc:	623b      	str	r3, [r7, #32]
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	2b7f      	cmp	r3, #127	; 0x7f
 8009c02:	d8f0      	bhi.n	8009be6 <SEGGER_SYSVIEW_SendModule+0x66>
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	627a      	str	r2, [r7, #36]	; 0x24
 8009c0a:	6a3a      	ldr	r2, [r7, #32]
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	61fb      	str	r3, [r7, #28]
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	61bb      	str	r3, [r7, #24]
 8009c1e:	e00b      	b.n	8009c38 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	1c59      	adds	r1, r3, #1
 8009c28:	61f9      	str	r1, [r7, #28]
 8009c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	09db      	lsrs	r3, r3, #7
 8009c36:	61bb      	str	r3, [r7, #24]
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c3c:	d8f0      	bhi.n	8009c20 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	61fa      	str	r2, [r7, #28]
 8009c44:	69ba      	ldr	r2, [r7, #24]
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2280      	movs	r2, #128	; 0x80
 8009c54:	4619      	mov	r1, r3
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7fe fea2 	bl	80089a0 <_EncodeStr>
 8009c5c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009c5e:	2216      	movs	r2, #22
 8009c60:	68f9      	ldr	r1, [r7, #12]
 8009c62:	6938      	ldr	r0, [r7, #16]
 8009c64:	f7fe ffda 	bl	8008c1c <_SendPacket>
      RECORD_END();
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009c6e:	bf00      	nop
 8009c70:	3730      	adds	r7, #48	; 0x30
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	240148a8 	.word	0x240148a8
 8009c7c:	240148b0 	.word	0x240148b0

08009c80 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009c86:	4b0c      	ldr	r3, [pc, #48]	; (8009cb8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00f      	beq.n	8009cae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009c8e:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1f2      	bne.n	8009c94 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009cae:	bf00      	nop
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	240148a8 	.word	0x240148a8

08009cbc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8009cc6:	f04f 0120 	mov.w	r1, #32
 8009cca:	f381 8811 	msr	BASEPRI, r1
 8009cce:	60fb      	str	r3, [r7, #12]
 8009cd0:	4817      	ldr	r0, [pc, #92]	; (8009d30 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009cd2:	f7fe feb5 	bl	8008a40 <_PreparePacket>
 8009cd6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	617b      	str	r3, [r7, #20]
 8009ce0:	4b14      	ldr	r3, [pc, #80]	; (8009d34 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	e00b      	b.n	8009d00 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	1c59      	adds	r1, r3, #1
 8009cf0:	6179      	str	r1, [r7, #20]
 8009cf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	701a      	strb	r2, [r3, #0]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	09db      	lsrs	r3, r3, #7
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b7f      	cmp	r3, #127	; 0x7f
 8009d04:	d8f0      	bhi.n	8009ce8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	617a      	str	r2, [r7, #20]
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	b2d2      	uxtb	r2, r2
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009d16:	221b      	movs	r2, #27
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	68b8      	ldr	r0, [r7, #8]
 8009d1c:	f7fe ff7e 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f383 8811 	msr	BASEPRI, r3
}
 8009d26:	bf00      	nop
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	240148b0 	.word	0x240148b0
 8009d34:	240148ac 	.word	0x240148ac

08009d38 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009d40:	f3ef 8311 	mrs	r3, BASEPRI
 8009d44:	f04f 0120 	mov.w	r1, #32
 8009d48:	f381 8811 	msr	BASEPRI, r1
 8009d4c:	617b      	str	r3, [r7, #20]
 8009d4e:	4827      	ldr	r0, [pc, #156]	; (8009dec <SEGGER_SYSVIEW_Warn+0xb4>)
 8009d50:	f7fe fe76 	bl	8008a40 <_PreparePacket>
 8009d54:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009d56:	2280      	movs	r2, #128	; 0x80
 8009d58:	6879      	ldr	r1, [r7, #4]
 8009d5a:	6938      	ldr	r0, [r7, #16]
 8009d5c:	f7fe fe20 	bl	80089a0 <_EncodeStr>
 8009d60:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	627b      	str	r3, [r7, #36]	; 0x24
 8009d66:	2301      	movs	r3, #1
 8009d68:	623b      	str	r3, [r7, #32]
 8009d6a:	e00b      	b.n	8009d84 <SEGGER_SYSVIEW_Warn+0x4c>
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	1c59      	adds	r1, r3, #1
 8009d74:	6279      	str	r1, [r7, #36]	; 0x24
 8009d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	09db      	lsrs	r3, r3, #7
 8009d82:	623b      	str	r3, [r7, #32]
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	2b7f      	cmp	r3, #127	; 0x7f
 8009d88:	d8f0      	bhi.n	8009d6c <SEGGER_SYSVIEW_Warn+0x34>
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	627a      	str	r2, [r7, #36]	; 0x24
 8009d90:	6a3a      	ldr	r2, [r7, #32]
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	61fb      	str	r3, [r7, #28]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61bb      	str	r3, [r7, #24]
 8009da2:	e00b      	b.n	8009dbc <SEGGER_SYSVIEW_Warn+0x84>
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	1c59      	adds	r1, r3, #1
 8009dac:	61f9      	str	r1, [r7, #28]
 8009dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	09db      	lsrs	r3, r3, #7
 8009dba:	61bb      	str	r3, [r7, #24]
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8009dc0:	d8f0      	bhi.n	8009da4 <SEGGER_SYSVIEW_Warn+0x6c>
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	61fa      	str	r2, [r7, #28]
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009dd2:	221a      	movs	r2, #26
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	6938      	ldr	r0, [r7, #16]
 8009dd8:	f7fe ff20 	bl	8008c1c <_SendPacket>
  RECORD_END();
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f383 8811 	msr	BASEPRI, r3
}
 8009de2:	bf00      	nop
 8009de4:	3728      	adds	r7, #40	; 0x28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	240148b0 	.word	0x240148b0

08009df0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
 8009dfc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	2000      	movs	r0, #0
 8009e04:	f7fe fcd6 	bl	80087b4 <SEGGER_RTT_Write>
  return len;
 8009e08:	683b      	ldr	r3, [r7, #0]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <__libc_init_array>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4d0d      	ldr	r5, [pc, #52]	; (8009e4c <__libc_init_array+0x38>)
 8009e18:	4c0d      	ldr	r4, [pc, #52]	; (8009e50 <__libc_init_array+0x3c>)
 8009e1a:	1b64      	subs	r4, r4, r5
 8009e1c:	10a4      	asrs	r4, r4, #2
 8009e1e:	2600      	movs	r6, #0
 8009e20:	42a6      	cmp	r6, r4
 8009e22:	d109      	bne.n	8009e38 <__libc_init_array+0x24>
 8009e24:	4d0b      	ldr	r5, [pc, #44]	; (8009e54 <__libc_init_array+0x40>)
 8009e26:	4c0c      	ldr	r4, [pc, #48]	; (8009e58 <__libc_init_array+0x44>)
 8009e28:	f000 fd38 	bl	800a89c <_init>
 8009e2c:	1b64      	subs	r4, r4, r5
 8009e2e:	10a4      	asrs	r4, r4, #2
 8009e30:	2600      	movs	r6, #0
 8009e32:	42a6      	cmp	r6, r4
 8009e34:	d105      	bne.n	8009e42 <__libc_init_array+0x2e>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3c:	4798      	blx	r3
 8009e3e:	3601      	adds	r6, #1
 8009e40:	e7ee      	b.n	8009e20 <__libc_init_array+0xc>
 8009e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e46:	4798      	blx	r3
 8009e48:	3601      	adds	r6, #1
 8009e4a:	e7f2      	b.n	8009e32 <__libc_init_array+0x1e>
 8009e4c:	0800aa90 	.word	0x0800aa90
 8009e50:	0800aa90 	.word	0x0800aa90
 8009e54:	0800aa90 	.word	0x0800aa90
 8009e58:	0800aa94 	.word	0x0800aa94

08009e5c <memcmp>:
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	3901      	subs	r1, #1
 8009e60:	4402      	add	r2, r0
 8009e62:	4290      	cmp	r0, r2
 8009e64:	d101      	bne.n	8009e6a <memcmp+0xe>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e005      	b.n	8009e76 <memcmp+0x1a>
 8009e6a:	7803      	ldrb	r3, [r0, #0]
 8009e6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	d001      	beq.n	8009e78 <memcmp+0x1c>
 8009e74:	1b18      	subs	r0, r3, r4
 8009e76:	bd10      	pop	{r4, pc}
 8009e78:	3001      	adds	r0, #1
 8009e7a:	e7f2      	b.n	8009e62 <memcmp+0x6>

08009e7c <memcpy>:
 8009e7c:	440a      	add	r2, r1
 8009e7e:	4291      	cmp	r1, r2
 8009e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e84:	d100      	bne.n	8009e88 <memcpy+0xc>
 8009e86:	4770      	bx	lr
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e92:	4291      	cmp	r1, r2
 8009e94:	d1f9      	bne.n	8009e8a <memcpy+0xe>
 8009e96:	bd10      	pop	{r4, pc}

08009e98 <memset>:
 8009e98:	4402      	add	r2, r0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d100      	bne.n	8009ea2 <memset+0xa>
 8009ea0:	4770      	bx	lr
 8009ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea6:	e7f9      	b.n	8009e9c <memset+0x4>

08009ea8 <_puts_r>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	460e      	mov	r6, r1
 8009eac:	4605      	mov	r5, r0
 8009eae:	b118      	cbz	r0, 8009eb8 <_puts_r+0x10>
 8009eb0:	6983      	ldr	r3, [r0, #24]
 8009eb2:	b90b      	cbnz	r3, 8009eb8 <_puts_r+0x10>
 8009eb4:	f000 fa48 	bl	800a348 <__sinit>
 8009eb8:	69ab      	ldr	r3, [r5, #24]
 8009eba:	68ac      	ldr	r4, [r5, #8]
 8009ebc:	b913      	cbnz	r3, 8009ec4 <_puts_r+0x1c>
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f000 fa42 	bl	800a348 <__sinit>
 8009ec4:	4b2c      	ldr	r3, [pc, #176]	; (8009f78 <_puts_r+0xd0>)
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	d120      	bne.n	8009f0c <_puts_r+0x64>
 8009eca:	686c      	ldr	r4, [r5, #4]
 8009ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ece:	07db      	lsls	r3, r3, #31
 8009ed0:	d405      	bmi.n	8009ede <_puts_r+0x36>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	0598      	lsls	r0, r3, #22
 8009ed6:	d402      	bmi.n	8009ede <_puts_r+0x36>
 8009ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eda:	f000 fad3 	bl	800a484 <__retarget_lock_acquire_recursive>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	0719      	lsls	r1, r3, #28
 8009ee2:	d51d      	bpl.n	8009f20 <_puts_r+0x78>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	b1db      	cbz	r3, 8009f20 <_puts_r+0x78>
 8009ee8:	3e01      	subs	r6, #1
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	60a3      	str	r3, [r4, #8]
 8009ef4:	bb39      	cbnz	r1, 8009f46 <_puts_r+0x9e>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	da38      	bge.n	8009f6c <_puts_r+0xc4>
 8009efa:	4622      	mov	r2, r4
 8009efc:	210a      	movs	r1, #10
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 f848 	bl	8009f94 <__swbuf_r>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d011      	beq.n	8009f2c <_puts_r+0x84>
 8009f08:	250a      	movs	r5, #10
 8009f0a:	e011      	b.n	8009f30 <_puts_r+0x88>
 8009f0c:	4b1b      	ldr	r3, [pc, #108]	; (8009f7c <_puts_r+0xd4>)
 8009f0e:	429c      	cmp	r4, r3
 8009f10:	d101      	bne.n	8009f16 <_puts_r+0x6e>
 8009f12:	68ac      	ldr	r4, [r5, #8]
 8009f14:	e7da      	b.n	8009ecc <_puts_r+0x24>
 8009f16:	4b1a      	ldr	r3, [pc, #104]	; (8009f80 <_puts_r+0xd8>)
 8009f18:	429c      	cmp	r4, r3
 8009f1a:	bf08      	it	eq
 8009f1c:	68ec      	ldreq	r4, [r5, #12]
 8009f1e:	e7d5      	b.n	8009ecc <_puts_r+0x24>
 8009f20:	4621      	mov	r1, r4
 8009f22:	4628      	mov	r0, r5
 8009f24:	f000 f888 	bl	800a038 <__swsetup_r>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d0dd      	beq.n	8009ee8 <_puts_r+0x40>
 8009f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f32:	07da      	lsls	r2, r3, #31
 8009f34:	d405      	bmi.n	8009f42 <_puts_r+0x9a>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	059b      	lsls	r3, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_puts_r+0x9a>
 8009f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3e:	f000 faa2 	bl	800a486 <__retarget_lock_release_recursive>
 8009f42:	4628      	mov	r0, r5
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	da04      	bge.n	8009f54 <_puts_r+0xac>
 8009f4a:	69a2      	ldr	r2, [r4, #24]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	dc06      	bgt.n	8009f5e <_puts_r+0xb6>
 8009f50:	290a      	cmp	r1, #10
 8009f52:	d004      	beq.n	8009f5e <_puts_r+0xb6>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	6022      	str	r2, [r4, #0]
 8009f5a:	7019      	strb	r1, [r3, #0]
 8009f5c:	e7c5      	b.n	8009eea <_puts_r+0x42>
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 f817 	bl	8009f94 <__swbuf_r>
 8009f66:	3001      	adds	r0, #1
 8009f68:	d1bf      	bne.n	8009eea <_puts_r+0x42>
 8009f6a:	e7df      	b.n	8009f2c <_puts_r+0x84>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	250a      	movs	r5, #10
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	6022      	str	r2, [r4, #0]
 8009f74:	701d      	strb	r5, [r3, #0]
 8009f76:	e7db      	b.n	8009f30 <_puts_r+0x88>
 8009f78:	0800aa48 	.word	0x0800aa48
 8009f7c:	0800aa68 	.word	0x0800aa68
 8009f80:	0800aa28 	.word	0x0800aa28

08009f84 <puts>:
 8009f84:	4b02      	ldr	r3, [pc, #8]	; (8009f90 <puts+0xc>)
 8009f86:	4601      	mov	r1, r0
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f7ff bf8d 	b.w	8009ea8 <_puts_r>
 8009f8e:	bf00      	nop
 8009f90:	24000018 	.word	0x24000018

08009f94 <__swbuf_r>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	460e      	mov	r6, r1
 8009f98:	4614      	mov	r4, r2
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	b118      	cbz	r0, 8009fa6 <__swbuf_r+0x12>
 8009f9e:	6983      	ldr	r3, [r0, #24]
 8009fa0:	b90b      	cbnz	r3, 8009fa6 <__swbuf_r+0x12>
 8009fa2:	f000 f9d1 	bl	800a348 <__sinit>
 8009fa6:	4b21      	ldr	r3, [pc, #132]	; (800a02c <__swbuf_r+0x98>)
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	d12b      	bne.n	800a004 <__swbuf_r+0x70>
 8009fac:	686c      	ldr	r4, [r5, #4]
 8009fae:	69a3      	ldr	r3, [r4, #24]
 8009fb0:	60a3      	str	r3, [r4, #8]
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	071a      	lsls	r2, r3, #28
 8009fb6:	d52f      	bpl.n	800a018 <__swbuf_r+0x84>
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	b36b      	cbz	r3, 800a018 <__swbuf_r+0x84>
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	6820      	ldr	r0, [r4, #0]
 8009fc0:	1ac0      	subs	r0, r0, r3
 8009fc2:	6963      	ldr	r3, [r4, #20]
 8009fc4:	b2f6      	uxtb	r6, r6
 8009fc6:	4283      	cmp	r3, r0
 8009fc8:	4637      	mov	r7, r6
 8009fca:	dc04      	bgt.n	8009fd6 <__swbuf_r+0x42>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f000 f926 	bl	800a220 <_fflush_r>
 8009fd4:	bb30      	cbnz	r0, 800a024 <__swbuf_r+0x90>
 8009fd6:	68a3      	ldr	r3, [r4, #8]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	60a3      	str	r3, [r4, #8]
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	6022      	str	r2, [r4, #0]
 8009fe2:	701e      	strb	r6, [r3, #0]
 8009fe4:	6963      	ldr	r3, [r4, #20]
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	4283      	cmp	r3, r0
 8009fea:	d004      	beq.n	8009ff6 <__swbuf_r+0x62>
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	07db      	lsls	r3, r3, #31
 8009ff0:	d506      	bpl.n	800a000 <__swbuf_r+0x6c>
 8009ff2:	2e0a      	cmp	r6, #10
 8009ff4:	d104      	bne.n	800a000 <__swbuf_r+0x6c>
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 f911 	bl	800a220 <_fflush_r>
 8009ffe:	b988      	cbnz	r0, 800a024 <__swbuf_r+0x90>
 800a000:	4638      	mov	r0, r7
 800a002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a004:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <__swbuf_r+0x9c>)
 800a006:	429c      	cmp	r4, r3
 800a008:	d101      	bne.n	800a00e <__swbuf_r+0x7a>
 800a00a:	68ac      	ldr	r4, [r5, #8]
 800a00c:	e7cf      	b.n	8009fae <__swbuf_r+0x1a>
 800a00e:	4b09      	ldr	r3, [pc, #36]	; (800a034 <__swbuf_r+0xa0>)
 800a010:	429c      	cmp	r4, r3
 800a012:	bf08      	it	eq
 800a014:	68ec      	ldreq	r4, [r5, #12]
 800a016:	e7ca      	b.n	8009fae <__swbuf_r+0x1a>
 800a018:	4621      	mov	r1, r4
 800a01a:	4628      	mov	r0, r5
 800a01c:	f000 f80c 	bl	800a038 <__swsetup_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	d0cb      	beq.n	8009fbc <__swbuf_r+0x28>
 800a024:	f04f 37ff 	mov.w	r7, #4294967295
 800a028:	e7ea      	b.n	800a000 <__swbuf_r+0x6c>
 800a02a:	bf00      	nop
 800a02c:	0800aa48 	.word	0x0800aa48
 800a030:	0800aa68 	.word	0x0800aa68
 800a034:	0800aa28 	.word	0x0800aa28

0800a038 <__swsetup_r>:
 800a038:	4b32      	ldr	r3, [pc, #200]	; (800a104 <__swsetup_r+0xcc>)
 800a03a:	b570      	push	{r4, r5, r6, lr}
 800a03c:	681d      	ldr	r5, [r3, #0]
 800a03e:	4606      	mov	r6, r0
 800a040:	460c      	mov	r4, r1
 800a042:	b125      	cbz	r5, 800a04e <__swsetup_r+0x16>
 800a044:	69ab      	ldr	r3, [r5, #24]
 800a046:	b913      	cbnz	r3, 800a04e <__swsetup_r+0x16>
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 f97d 	bl	800a348 <__sinit>
 800a04e:	4b2e      	ldr	r3, [pc, #184]	; (800a108 <__swsetup_r+0xd0>)
 800a050:	429c      	cmp	r4, r3
 800a052:	d10f      	bne.n	800a074 <__swsetup_r+0x3c>
 800a054:	686c      	ldr	r4, [r5, #4]
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a05c:	0719      	lsls	r1, r3, #28
 800a05e:	d42c      	bmi.n	800a0ba <__swsetup_r+0x82>
 800a060:	06dd      	lsls	r5, r3, #27
 800a062:	d411      	bmi.n	800a088 <__swsetup_r+0x50>
 800a064:	2309      	movs	r3, #9
 800a066:	6033      	str	r3, [r6, #0]
 800a068:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	f04f 30ff 	mov.w	r0, #4294967295
 800a072:	e03e      	b.n	800a0f2 <__swsetup_r+0xba>
 800a074:	4b25      	ldr	r3, [pc, #148]	; (800a10c <__swsetup_r+0xd4>)
 800a076:	429c      	cmp	r4, r3
 800a078:	d101      	bne.n	800a07e <__swsetup_r+0x46>
 800a07a:	68ac      	ldr	r4, [r5, #8]
 800a07c:	e7eb      	b.n	800a056 <__swsetup_r+0x1e>
 800a07e:	4b24      	ldr	r3, [pc, #144]	; (800a110 <__swsetup_r+0xd8>)
 800a080:	429c      	cmp	r4, r3
 800a082:	bf08      	it	eq
 800a084:	68ec      	ldreq	r4, [r5, #12]
 800a086:	e7e6      	b.n	800a056 <__swsetup_r+0x1e>
 800a088:	0758      	lsls	r0, r3, #29
 800a08a:	d512      	bpl.n	800a0b2 <__swsetup_r+0x7a>
 800a08c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a08e:	b141      	cbz	r1, 800a0a2 <__swsetup_r+0x6a>
 800a090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a094:	4299      	cmp	r1, r3
 800a096:	d002      	beq.n	800a09e <__swsetup_r+0x66>
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 fa5b 	bl	800a554 <_free_r>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f043 0308 	orr.w	r3, r3, #8
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	b94b      	cbnz	r3, 800a0d2 <__swsetup_r+0x9a>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c8:	d003      	beq.n	800a0d2 <__swsetup_r+0x9a>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f000 fa01 	bl	800a4d4 <__smakebuf_r>
 800a0d2:	89a0      	ldrh	r0, [r4, #12]
 800a0d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0d8:	f010 0301 	ands.w	r3, r0, #1
 800a0dc:	d00a      	beq.n	800a0f4 <__swsetup_r+0xbc>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60a3      	str	r3, [r4, #8]
 800a0e2:	6963      	ldr	r3, [r4, #20]
 800a0e4:	425b      	negs	r3, r3
 800a0e6:	61a3      	str	r3, [r4, #24]
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	b943      	cbnz	r3, 800a0fe <__swsetup_r+0xc6>
 800a0ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0f0:	d1ba      	bne.n	800a068 <__swsetup_r+0x30>
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}
 800a0f4:	0781      	lsls	r1, r0, #30
 800a0f6:	bf58      	it	pl
 800a0f8:	6963      	ldrpl	r3, [r4, #20]
 800a0fa:	60a3      	str	r3, [r4, #8]
 800a0fc:	e7f4      	b.n	800a0e8 <__swsetup_r+0xb0>
 800a0fe:	2000      	movs	r0, #0
 800a100:	e7f7      	b.n	800a0f2 <__swsetup_r+0xba>
 800a102:	bf00      	nop
 800a104:	24000018 	.word	0x24000018
 800a108:	0800aa48 	.word	0x0800aa48
 800a10c:	0800aa68 	.word	0x0800aa68
 800a110:	0800aa28 	.word	0x0800aa28

0800a114 <__sflush_r>:
 800a114:	898a      	ldrh	r2, [r1, #12]
 800a116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	4605      	mov	r5, r0
 800a11c:	0710      	lsls	r0, r2, #28
 800a11e:	460c      	mov	r4, r1
 800a120:	d458      	bmi.n	800a1d4 <__sflush_r+0xc0>
 800a122:	684b      	ldr	r3, [r1, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	dc05      	bgt.n	800a134 <__sflush_r+0x20>
 800a128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	dc02      	bgt.n	800a134 <__sflush_r+0x20>
 800a12e:	2000      	movs	r0, #0
 800a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a136:	2e00      	cmp	r6, #0
 800a138:	d0f9      	beq.n	800a12e <__sflush_r+0x1a>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a140:	682f      	ldr	r7, [r5, #0]
 800a142:	602b      	str	r3, [r5, #0]
 800a144:	d032      	beq.n	800a1ac <__sflush_r+0x98>
 800a146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	075a      	lsls	r2, r3, #29
 800a14c:	d505      	bpl.n	800a15a <__sflush_r+0x46>
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	1ac0      	subs	r0, r0, r3
 800a152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a154:	b10b      	cbz	r3, 800a15a <__sflush_r+0x46>
 800a156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a158:	1ac0      	subs	r0, r0, r3
 800a15a:	2300      	movs	r3, #0
 800a15c:	4602      	mov	r2, r0
 800a15e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a160:	6a21      	ldr	r1, [r4, #32]
 800a162:	4628      	mov	r0, r5
 800a164:	47b0      	blx	r6
 800a166:	1c43      	adds	r3, r0, #1
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	d106      	bne.n	800a17a <__sflush_r+0x66>
 800a16c:	6829      	ldr	r1, [r5, #0]
 800a16e:	291d      	cmp	r1, #29
 800a170:	d82c      	bhi.n	800a1cc <__sflush_r+0xb8>
 800a172:	4a2a      	ldr	r2, [pc, #168]	; (800a21c <__sflush_r+0x108>)
 800a174:	40ca      	lsrs	r2, r1
 800a176:	07d6      	lsls	r6, r2, #31
 800a178:	d528      	bpl.n	800a1cc <__sflush_r+0xb8>
 800a17a:	2200      	movs	r2, #0
 800a17c:	6062      	str	r2, [r4, #4]
 800a17e:	04d9      	lsls	r1, r3, #19
 800a180:	6922      	ldr	r2, [r4, #16]
 800a182:	6022      	str	r2, [r4, #0]
 800a184:	d504      	bpl.n	800a190 <__sflush_r+0x7c>
 800a186:	1c42      	adds	r2, r0, #1
 800a188:	d101      	bne.n	800a18e <__sflush_r+0x7a>
 800a18a:	682b      	ldr	r3, [r5, #0]
 800a18c:	b903      	cbnz	r3, 800a190 <__sflush_r+0x7c>
 800a18e:	6560      	str	r0, [r4, #84]	; 0x54
 800a190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a192:	602f      	str	r7, [r5, #0]
 800a194:	2900      	cmp	r1, #0
 800a196:	d0ca      	beq.n	800a12e <__sflush_r+0x1a>
 800a198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a19c:	4299      	cmp	r1, r3
 800a19e:	d002      	beq.n	800a1a6 <__sflush_r+0x92>
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f000 f9d7 	bl	800a554 <_free_r>
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a1aa:	e7c1      	b.n	800a130 <__sflush_r+0x1c>
 800a1ac:	6a21      	ldr	r1, [r4, #32]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b0      	blx	r6
 800a1b4:	1c41      	adds	r1, r0, #1
 800a1b6:	d1c7      	bne.n	800a148 <__sflush_r+0x34>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0c4      	beq.n	800a148 <__sflush_r+0x34>
 800a1be:	2b1d      	cmp	r3, #29
 800a1c0:	d001      	beq.n	800a1c6 <__sflush_r+0xb2>
 800a1c2:	2b16      	cmp	r3, #22
 800a1c4:	d101      	bne.n	800a1ca <__sflush_r+0xb6>
 800a1c6:	602f      	str	r7, [r5, #0]
 800a1c8:	e7b1      	b.n	800a12e <__sflush_r+0x1a>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	e7ad      	b.n	800a130 <__sflush_r+0x1c>
 800a1d4:	690f      	ldr	r7, [r1, #16]
 800a1d6:	2f00      	cmp	r7, #0
 800a1d8:	d0a9      	beq.n	800a12e <__sflush_r+0x1a>
 800a1da:	0793      	lsls	r3, r2, #30
 800a1dc:	680e      	ldr	r6, [r1, #0]
 800a1de:	bf08      	it	eq
 800a1e0:	694b      	ldreq	r3, [r1, #20]
 800a1e2:	600f      	str	r7, [r1, #0]
 800a1e4:	bf18      	it	ne
 800a1e6:	2300      	movne	r3, #0
 800a1e8:	eba6 0807 	sub.w	r8, r6, r7
 800a1ec:	608b      	str	r3, [r1, #8]
 800a1ee:	f1b8 0f00 	cmp.w	r8, #0
 800a1f2:	dd9c      	ble.n	800a12e <__sflush_r+0x1a>
 800a1f4:	6a21      	ldr	r1, [r4, #32]
 800a1f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1f8:	4643      	mov	r3, r8
 800a1fa:	463a      	mov	r2, r7
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b0      	blx	r6
 800a200:	2800      	cmp	r0, #0
 800a202:	dc06      	bgt.n	800a212 <__sflush_r+0xfe>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	e78e      	b.n	800a130 <__sflush_r+0x1c>
 800a212:	4407      	add	r7, r0
 800a214:	eba8 0800 	sub.w	r8, r8, r0
 800a218:	e7e9      	b.n	800a1ee <__sflush_r+0xda>
 800a21a:	bf00      	nop
 800a21c:	20400001 	.word	0x20400001

0800a220 <_fflush_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	690b      	ldr	r3, [r1, #16]
 800a224:	4605      	mov	r5, r0
 800a226:	460c      	mov	r4, r1
 800a228:	b913      	cbnz	r3, 800a230 <_fflush_r+0x10>
 800a22a:	2500      	movs	r5, #0
 800a22c:	4628      	mov	r0, r5
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	b118      	cbz	r0, 800a23a <_fflush_r+0x1a>
 800a232:	6983      	ldr	r3, [r0, #24]
 800a234:	b90b      	cbnz	r3, 800a23a <_fflush_r+0x1a>
 800a236:	f000 f887 	bl	800a348 <__sinit>
 800a23a:	4b14      	ldr	r3, [pc, #80]	; (800a28c <_fflush_r+0x6c>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	d11b      	bne.n	800a278 <_fflush_r+0x58>
 800a240:	686c      	ldr	r4, [r5, #4]
 800a242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0ef      	beq.n	800a22a <_fflush_r+0xa>
 800a24a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a24c:	07d0      	lsls	r0, r2, #31
 800a24e:	d404      	bmi.n	800a25a <_fflush_r+0x3a>
 800a250:	0599      	lsls	r1, r3, #22
 800a252:	d402      	bmi.n	800a25a <_fflush_r+0x3a>
 800a254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a256:	f000 f915 	bl	800a484 <__retarget_lock_acquire_recursive>
 800a25a:	4628      	mov	r0, r5
 800a25c:	4621      	mov	r1, r4
 800a25e:	f7ff ff59 	bl	800a114 <__sflush_r>
 800a262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a264:	07da      	lsls	r2, r3, #31
 800a266:	4605      	mov	r5, r0
 800a268:	d4e0      	bmi.n	800a22c <_fflush_r+0xc>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	059b      	lsls	r3, r3, #22
 800a26e:	d4dd      	bmi.n	800a22c <_fflush_r+0xc>
 800a270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a272:	f000 f908 	bl	800a486 <__retarget_lock_release_recursive>
 800a276:	e7d9      	b.n	800a22c <_fflush_r+0xc>
 800a278:	4b05      	ldr	r3, [pc, #20]	; (800a290 <_fflush_r+0x70>)
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d101      	bne.n	800a282 <_fflush_r+0x62>
 800a27e:	68ac      	ldr	r4, [r5, #8]
 800a280:	e7df      	b.n	800a242 <_fflush_r+0x22>
 800a282:	4b04      	ldr	r3, [pc, #16]	; (800a294 <_fflush_r+0x74>)
 800a284:	429c      	cmp	r4, r3
 800a286:	bf08      	it	eq
 800a288:	68ec      	ldreq	r4, [r5, #12]
 800a28a:	e7da      	b.n	800a242 <_fflush_r+0x22>
 800a28c:	0800aa48 	.word	0x0800aa48
 800a290:	0800aa68 	.word	0x0800aa68
 800a294:	0800aa28 	.word	0x0800aa28

0800a298 <std>:
 800a298:	2300      	movs	r3, #0
 800a29a:	b510      	push	{r4, lr}
 800a29c:	4604      	mov	r4, r0
 800a29e:	e9c0 3300 	strd	r3, r3, [r0]
 800a2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2a6:	6083      	str	r3, [r0, #8]
 800a2a8:	8181      	strh	r1, [r0, #12]
 800a2aa:	6643      	str	r3, [r0, #100]	; 0x64
 800a2ac:	81c2      	strh	r2, [r0, #14]
 800a2ae:	6183      	str	r3, [r0, #24]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	2208      	movs	r2, #8
 800a2b4:	305c      	adds	r0, #92	; 0x5c
 800a2b6:	f7ff fdef 	bl	8009e98 <memset>
 800a2ba:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <std+0x38>)
 800a2bc:	6263      	str	r3, [r4, #36]	; 0x24
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <std+0x3c>)
 800a2c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <std+0x40>)
 800a2c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <std+0x44>)
 800a2c8:	6224      	str	r4, [r4, #32]
 800a2ca:	6323      	str	r3, [r4, #48]	; 0x30
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800a735 	.word	0x0800a735
 800a2d4:	0800a757 	.word	0x0800a757
 800a2d8:	0800a78f 	.word	0x0800a78f
 800a2dc:	0800a7b3 	.word	0x0800a7b3

0800a2e0 <_cleanup_r>:
 800a2e0:	4901      	ldr	r1, [pc, #4]	; (800a2e8 <_cleanup_r+0x8>)
 800a2e2:	f000 b8af 	b.w	800a444 <_fwalk_reent>
 800a2e6:	bf00      	nop
 800a2e8:	0800a221 	.word	0x0800a221

0800a2ec <__sfmoreglue>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	2268      	movs	r2, #104	; 0x68
 800a2f0:	1e4d      	subs	r5, r1, #1
 800a2f2:	4355      	muls	r5, r2
 800a2f4:	460e      	mov	r6, r1
 800a2f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2fa:	f000 f997 	bl	800a62c <_malloc_r>
 800a2fe:	4604      	mov	r4, r0
 800a300:	b140      	cbz	r0, 800a314 <__sfmoreglue+0x28>
 800a302:	2100      	movs	r1, #0
 800a304:	e9c0 1600 	strd	r1, r6, [r0]
 800a308:	300c      	adds	r0, #12
 800a30a:	60a0      	str	r0, [r4, #8]
 800a30c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a310:	f7ff fdc2 	bl	8009e98 <memset>
 800a314:	4620      	mov	r0, r4
 800a316:	bd70      	pop	{r4, r5, r6, pc}

0800a318 <__sfp_lock_acquire>:
 800a318:	4801      	ldr	r0, [pc, #4]	; (800a320 <__sfp_lock_acquire+0x8>)
 800a31a:	f000 b8b3 	b.w	800a484 <__retarget_lock_acquire_recursive>
 800a31e:	bf00      	nop
 800a320:	24014994 	.word	0x24014994

0800a324 <__sfp_lock_release>:
 800a324:	4801      	ldr	r0, [pc, #4]	; (800a32c <__sfp_lock_release+0x8>)
 800a326:	f000 b8ae 	b.w	800a486 <__retarget_lock_release_recursive>
 800a32a:	bf00      	nop
 800a32c:	24014994 	.word	0x24014994

0800a330 <__sinit_lock_acquire>:
 800a330:	4801      	ldr	r0, [pc, #4]	; (800a338 <__sinit_lock_acquire+0x8>)
 800a332:	f000 b8a7 	b.w	800a484 <__retarget_lock_acquire_recursive>
 800a336:	bf00      	nop
 800a338:	24014995 	.word	0x24014995

0800a33c <__sinit_lock_release>:
 800a33c:	4801      	ldr	r0, [pc, #4]	; (800a344 <__sinit_lock_release+0x8>)
 800a33e:	f000 b8a2 	b.w	800a486 <__retarget_lock_release_recursive>
 800a342:	bf00      	nop
 800a344:	24014995 	.word	0x24014995

0800a348 <__sinit>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	4604      	mov	r4, r0
 800a34c:	f7ff fff0 	bl	800a330 <__sinit_lock_acquire>
 800a350:	69a3      	ldr	r3, [r4, #24]
 800a352:	b11b      	cbz	r3, 800a35c <__sinit+0x14>
 800a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a358:	f7ff bff0 	b.w	800a33c <__sinit_lock_release>
 800a35c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a360:	6523      	str	r3, [r4, #80]	; 0x50
 800a362:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <__sinit+0x68>)
 800a364:	4a13      	ldr	r2, [pc, #76]	; (800a3b4 <__sinit+0x6c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	62a2      	str	r2, [r4, #40]	; 0x28
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	bf04      	itt	eq
 800a36e:	2301      	moveq	r3, #1
 800a370:	61a3      	streq	r3, [r4, #24]
 800a372:	4620      	mov	r0, r4
 800a374:	f000 f820 	bl	800a3b8 <__sfp>
 800a378:	6060      	str	r0, [r4, #4]
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 f81c 	bl	800a3b8 <__sfp>
 800a380:	60a0      	str	r0, [r4, #8]
 800a382:	4620      	mov	r0, r4
 800a384:	f000 f818 	bl	800a3b8 <__sfp>
 800a388:	2200      	movs	r2, #0
 800a38a:	60e0      	str	r0, [r4, #12]
 800a38c:	2104      	movs	r1, #4
 800a38e:	6860      	ldr	r0, [r4, #4]
 800a390:	f7ff ff82 	bl	800a298 <std>
 800a394:	68a0      	ldr	r0, [r4, #8]
 800a396:	2201      	movs	r2, #1
 800a398:	2109      	movs	r1, #9
 800a39a:	f7ff ff7d 	bl	800a298 <std>
 800a39e:	68e0      	ldr	r0, [r4, #12]
 800a3a0:	2202      	movs	r2, #2
 800a3a2:	2112      	movs	r1, #18
 800a3a4:	f7ff ff78 	bl	800a298 <std>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	61a3      	str	r3, [r4, #24]
 800a3ac:	e7d2      	b.n	800a354 <__sinit+0xc>
 800a3ae:	bf00      	nop
 800a3b0:	0800aa24 	.word	0x0800aa24
 800a3b4:	0800a2e1 	.word	0x0800a2e1

0800a3b8 <__sfp>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	4607      	mov	r7, r0
 800a3bc:	f7ff ffac 	bl	800a318 <__sfp_lock_acquire>
 800a3c0:	4b1e      	ldr	r3, [pc, #120]	; (800a43c <__sfp+0x84>)
 800a3c2:	681e      	ldr	r6, [r3, #0]
 800a3c4:	69b3      	ldr	r3, [r6, #24]
 800a3c6:	b913      	cbnz	r3, 800a3ce <__sfp+0x16>
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7ff ffbd 	bl	800a348 <__sinit>
 800a3ce:	3648      	adds	r6, #72	; 0x48
 800a3d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	d503      	bpl.n	800a3e0 <__sfp+0x28>
 800a3d8:	6833      	ldr	r3, [r6, #0]
 800a3da:	b30b      	cbz	r3, 800a420 <__sfp+0x68>
 800a3dc:	6836      	ldr	r6, [r6, #0]
 800a3de:	e7f7      	b.n	800a3d0 <__sfp+0x18>
 800a3e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3e4:	b9d5      	cbnz	r5, 800a41c <__sfp+0x64>
 800a3e6:	4b16      	ldr	r3, [pc, #88]	; (800a440 <__sfp+0x88>)
 800a3e8:	60e3      	str	r3, [r4, #12]
 800a3ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3ee:	6665      	str	r5, [r4, #100]	; 0x64
 800a3f0:	f000 f847 	bl	800a482 <__retarget_lock_init_recursive>
 800a3f4:	f7ff ff96 	bl	800a324 <__sfp_lock_release>
 800a3f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a400:	6025      	str	r5, [r4, #0]
 800a402:	61a5      	str	r5, [r4, #24]
 800a404:	2208      	movs	r2, #8
 800a406:	4629      	mov	r1, r5
 800a408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a40c:	f7ff fd44 	bl	8009e98 <memset>
 800a410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a418:	4620      	mov	r0, r4
 800a41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41c:	3468      	adds	r4, #104	; 0x68
 800a41e:	e7d9      	b.n	800a3d4 <__sfp+0x1c>
 800a420:	2104      	movs	r1, #4
 800a422:	4638      	mov	r0, r7
 800a424:	f7ff ff62 	bl	800a2ec <__sfmoreglue>
 800a428:	4604      	mov	r4, r0
 800a42a:	6030      	str	r0, [r6, #0]
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d1d5      	bne.n	800a3dc <__sfp+0x24>
 800a430:	f7ff ff78 	bl	800a324 <__sfp_lock_release>
 800a434:	230c      	movs	r3, #12
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	e7ee      	b.n	800a418 <__sfp+0x60>
 800a43a:	bf00      	nop
 800a43c:	0800aa24 	.word	0x0800aa24
 800a440:	ffff0001 	.word	0xffff0001

0800a444 <_fwalk_reent>:
 800a444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a448:	4606      	mov	r6, r0
 800a44a:	4688      	mov	r8, r1
 800a44c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a450:	2700      	movs	r7, #0
 800a452:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a456:	f1b9 0901 	subs.w	r9, r9, #1
 800a45a:	d505      	bpl.n	800a468 <_fwalk_reent+0x24>
 800a45c:	6824      	ldr	r4, [r4, #0]
 800a45e:	2c00      	cmp	r4, #0
 800a460:	d1f7      	bne.n	800a452 <_fwalk_reent+0xe>
 800a462:	4638      	mov	r0, r7
 800a464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a468:	89ab      	ldrh	r3, [r5, #12]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d907      	bls.n	800a47e <_fwalk_reent+0x3a>
 800a46e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a472:	3301      	adds	r3, #1
 800a474:	d003      	beq.n	800a47e <_fwalk_reent+0x3a>
 800a476:	4629      	mov	r1, r5
 800a478:	4630      	mov	r0, r6
 800a47a:	47c0      	blx	r8
 800a47c:	4307      	orrs	r7, r0
 800a47e:	3568      	adds	r5, #104	; 0x68
 800a480:	e7e9      	b.n	800a456 <_fwalk_reent+0x12>

0800a482 <__retarget_lock_init_recursive>:
 800a482:	4770      	bx	lr

0800a484 <__retarget_lock_acquire_recursive>:
 800a484:	4770      	bx	lr

0800a486 <__retarget_lock_release_recursive>:
 800a486:	4770      	bx	lr

0800a488 <__swhatbuf_r>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	460e      	mov	r6, r1
 800a48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a490:	2900      	cmp	r1, #0
 800a492:	b096      	sub	sp, #88	; 0x58
 800a494:	4614      	mov	r4, r2
 800a496:	461d      	mov	r5, r3
 800a498:	da08      	bge.n	800a4ac <__swhatbuf_r+0x24>
 800a49a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	602a      	str	r2, [r5, #0]
 800a4a2:	061a      	lsls	r2, r3, #24
 800a4a4:	d410      	bmi.n	800a4c8 <__swhatbuf_r+0x40>
 800a4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4aa:	e00e      	b.n	800a4ca <__swhatbuf_r+0x42>
 800a4ac:	466a      	mov	r2, sp
 800a4ae:	f000 f995 	bl	800a7dc <_fstat_r>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	dbf1      	blt.n	800a49a <__swhatbuf_r+0x12>
 800a4b6:	9a01      	ldr	r2, [sp, #4]
 800a4b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4c0:	425a      	negs	r2, r3
 800a4c2:	415a      	adcs	r2, r3
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	e7ee      	b.n	800a4a6 <__swhatbuf_r+0x1e>
 800a4c8:	2340      	movs	r3, #64	; 0x40
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	b016      	add	sp, #88	; 0x58
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4d4 <__smakebuf_r>:
 800a4d4:	898b      	ldrh	r3, [r1, #12]
 800a4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4d8:	079d      	lsls	r5, r3, #30
 800a4da:	4606      	mov	r6, r0
 800a4dc:	460c      	mov	r4, r1
 800a4de:	d507      	bpl.n	800a4f0 <__smakebuf_r+0x1c>
 800a4e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	6123      	str	r3, [r4, #16]
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	6163      	str	r3, [r4, #20]
 800a4ec:	b002      	add	sp, #8
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	ab01      	add	r3, sp, #4
 800a4f2:	466a      	mov	r2, sp
 800a4f4:	f7ff ffc8 	bl	800a488 <__swhatbuf_r>
 800a4f8:	9900      	ldr	r1, [sp, #0]
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f000 f895 	bl	800a62c <_malloc_r>
 800a502:	b948      	cbnz	r0, 800a518 <__smakebuf_r+0x44>
 800a504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a508:	059a      	lsls	r2, r3, #22
 800a50a:	d4ef      	bmi.n	800a4ec <__smakebuf_r+0x18>
 800a50c:	f023 0303 	bic.w	r3, r3, #3
 800a510:	f043 0302 	orr.w	r3, r3, #2
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	e7e3      	b.n	800a4e0 <__smakebuf_r+0xc>
 800a518:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <__smakebuf_r+0x7c>)
 800a51a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	6020      	str	r0, [r4, #0]
 800a520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a524:	81a3      	strh	r3, [r4, #12]
 800a526:	9b00      	ldr	r3, [sp, #0]
 800a528:	6163      	str	r3, [r4, #20]
 800a52a:	9b01      	ldr	r3, [sp, #4]
 800a52c:	6120      	str	r0, [r4, #16]
 800a52e:	b15b      	cbz	r3, 800a548 <__smakebuf_r+0x74>
 800a530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a534:	4630      	mov	r0, r6
 800a536:	f000 f963 	bl	800a800 <_isatty_r>
 800a53a:	b128      	cbz	r0, 800a548 <__smakebuf_r+0x74>
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	f023 0303 	bic.w	r3, r3, #3
 800a542:	f043 0301 	orr.w	r3, r3, #1
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	89a0      	ldrh	r0, [r4, #12]
 800a54a:	4305      	orrs	r5, r0
 800a54c:	81a5      	strh	r5, [r4, #12]
 800a54e:	e7cd      	b.n	800a4ec <__smakebuf_r+0x18>
 800a550:	0800a2e1 	.word	0x0800a2e1

0800a554 <_free_r>:
 800a554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a556:	2900      	cmp	r1, #0
 800a558:	d044      	beq.n	800a5e4 <_free_r+0x90>
 800a55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a55e:	9001      	str	r0, [sp, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	f1a1 0404 	sub.w	r4, r1, #4
 800a566:	bfb8      	it	lt
 800a568:	18e4      	addlt	r4, r4, r3
 800a56a:	f000 f96b 	bl	800a844 <__malloc_lock>
 800a56e:	4a1e      	ldr	r2, [pc, #120]	; (800a5e8 <_free_r+0x94>)
 800a570:	9801      	ldr	r0, [sp, #4]
 800a572:	6813      	ldr	r3, [r2, #0]
 800a574:	b933      	cbnz	r3, 800a584 <_free_r+0x30>
 800a576:	6063      	str	r3, [r4, #4]
 800a578:	6014      	str	r4, [r2, #0]
 800a57a:	b003      	add	sp, #12
 800a57c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a580:	f000 b966 	b.w	800a850 <__malloc_unlock>
 800a584:	42a3      	cmp	r3, r4
 800a586:	d908      	bls.n	800a59a <_free_r+0x46>
 800a588:	6825      	ldr	r5, [r4, #0]
 800a58a:	1961      	adds	r1, r4, r5
 800a58c:	428b      	cmp	r3, r1
 800a58e:	bf01      	itttt	eq
 800a590:	6819      	ldreq	r1, [r3, #0]
 800a592:	685b      	ldreq	r3, [r3, #4]
 800a594:	1949      	addeq	r1, r1, r5
 800a596:	6021      	streq	r1, [r4, #0]
 800a598:	e7ed      	b.n	800a576 <_free_r+0x22>
 800a59a:	461a      	mov	r2, r3
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	b10b      	cbz	r3, 800a5a4 <_free_r+0x50>
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	d9fa      	bls.n	800a59a <_free_r+0x46>
 800a5a4:	6811      	ldr	r1, [r2, #0]
 800a5a6:	1855      	adds	r5, r2, r1
 800a5a8:	42a5      	cmp	r5, r4
 800a5aa:	d10b      	bne.n	800a5c4 <_free_r+0x70>
 800a5ac:	6824      	ldr	r4, [r4, #0]
 800a5ae:	4421      	add	r1, r4
 800a5b0:	1854      	adds	r4, r2, r1
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	6011      	str	r1, [r2, #0]
 800a5b6:	d1e0      	bne.n	800a57a <_free_r+0x26>
 800a5b8:	681c      	ldr	r4, [r3, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	6053      	str	r3, [r2, #4]
 800a5be:	4421      	add	r1, r4
 800a5c0:	6011      	str	r1, [r2, #0]
 800a5c2:	e7da      	b.n	800a57a <_free_r+0x26>
 800a5c4:	d902      	bls.n	800a5cc <_free_r+0x78>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	6003      	str	r3, [r0, #0]
 800a5ca:	e7d6      	b.n	800a57a <_free_r+0x26>
 800a5cc:	6825      	ldr	r5, [r4, #0]
 800a5ce:	1961      	adds	r1, r4, r5
 800a5d0:	428b      	cmp	r3, r1
 800a5d2:	bf04      	itt	eq
 800a5d4:	6819      	ldreq	r1, [r3, #0]
 800a5d6:	685b      	ldreq	r3, [r3, #4]
 800a5d8:	6063      	str	r3, [r4, #4]
 800a5da:	bf04      	itt	eq
 800a5dc:	1949      	addeq	r1, r1, r5
 800a5de:	6021      	streq	r1, [r4, #0]
 800a5e0:	6054      	str	r4, [r2, #4]
 800a5e2:	e7ca      	b.n	800a57a <_free_r+0x26>
 800a5e4:	b003      	add	sp, #12
 800a5e6:	bd30      	pop	{r4, r5, pc}
 800a5e8:	24014998 	.word	0x24014998

0800a5ec <sbrk_aligned>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	4e0e      	ldr	r6, [pc, #56]	; (800a628 <sbrk_aligned+0x3c>)
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	6831      	ldr	r1, [r6, #0]
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	b911      	cbnz	r1, 800a5fe <sbrk_aligned+0x12>
 800a5f8:	f000 f88c 	bl	800a714 <_sbrk_r>
 800a5fc:	6030      	str	r0, [r6, #0]
 800a5fe:	4621      	mov	r1, r4
 800a600:	4628      	mov	r0, r5
 800a602:	f000 f887 	bl	800a714 <_sbrk_r>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d00a      	beq.n	800a620 <sbrk_aligned+0x34>
 800a60a:	1cc4      	adds	r4, r0, #3
 800a60c:	f024 0403 	bic.w	r4, r4, #3
 800a610:	42a0      	cmp	r0, r4
 800a612:	d007      	beq.n	800a624 <sbrk_aligned+0x38>
 800a614:	1a21      	subs	r1, r4, r0
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f87c 	bl	800a714 <_sbrk_r>
 800a61c:	3001      	adds	r0, #1
 800a61e:	d101      	bne.n	800a624 <sbrk_aligned+0x38>
 800a620:	f04f 34ff 	mov.w	r4, #4294967295
 800a624:	4620      	mov	r0, r4
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	2401499c 	.word	0x2401499c

0800a62c <_malloc_r>:
 800a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a630:	1ccd      	adds	r5, r1, #3
 800a632:	f025 0503 	bic.w	r5, r5, #3
 800a636:	3508      	adds	r5, #8
 800a638:	2d0c      	cmp	r5, #12
 800a63a:	bf38      	it	cc
 800a63c:	250c      	movcc	r5, #12
 800a63e:	2d00      	cmp	r5, #0
 800a640:	4607      	mov	r7, r0
 800a642:	db01      	blt.n	800a648 <_malloc_r+0x1c>
 800a644:	42a9      	cmp	r1, r5
 800a646:	d905      	bls.n	800a654 <_malloc_r+0x28>
 800a648:	230c      	movs	r3, #12
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	2600      	movs	r6, #0
 800a64e:	4630      	mov	r0, r6
 800a650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a654:	4e2e      	ldr	r6, [pc, #184]	; (800a710 <_malloc_r+0xe4>)
 800a656:	f000 f8f5 	bl	800a844 <__malloc_lock>
 800a65a:	6833      	ldr	r3, [r6, #0]
 800a65c:	461c      	mov	r4, r3
 800a65e:	bb34      	cbnz	r4, 800a6ae <_malloc_r+0x82>
 800a660:	4629      	mov	r1, r5
 800a662:	4638      	mov	r0, r7
 800a664:	f7ff ffc2 	bl	800a5ec <sbrk_aligned>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	4604      	mov	r4, r0
 800a66c:	d14d      	bne.n	800a70a <_malloc_r+0xde>
 800a66e:	6834      	ldr	r4, [r6, #0]
 800a670:	4626      	mov	r6, r4
 800a672:	2e00      	cmp	r6, #0
 800a674:	d140      	bne.n	800a6f8 <_malloc_r+0xcc>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	4631      	mov	r1, r6
 800a67a:	4638      	mov	r0, r7
 800a67c:	eb04 0803 	add.w	r8, r4, r3
 800a680:	f000 f848 	bl	800a714 <_sbrk_r>
 800a684:	4580      	cmp	r8, r0
 800a686:	d13a      	bne.n	800a6fe <_malloc_r+0xd2>
 800a688:	6821      	ldr	r1, [r4, #0]
 800a68a:	3503      	adds	r5, #3
 800a68c:	1a6d      	subs	r5, r5, r1
 800a68e:	f025 0503 	bic.w	r5, r5, #3
 800a692:	3508      	adds	r5, #8
 800a694:	2d0c      	cmp	r5, #12
 800a696:	bf38      	it	cc
 800a698:	250c      	movcc	r5, #12
 800a69a:	4629      	mov	r1, r5
 800a69c:	4638      	mov	r0, r7
 800a69e:	f7ff ffa5 	bl	800a5ec <sbrk_aligned>
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	d02b      	beq.n	800a6fe <_malloc_r+0xd2>
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	442b      	add	r3, r5
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	e00e      	b.n	800a6cc <_malloc_r+0xa0>
 800a6ae:	6822      	ldr	r2, [r4, #0]
 800a6b0:	1b52      	subs	r2, r2, r5
 800a6b2:	d41e      	bmi.n	800a6f2 <_malloc_r+0xc6>
 800a6b4:	2a0b      	cmp	r2, #11
 800a6b6:	d916      	bls.n	800a6e6 <_malloc_r+0xba>
 800a6b8:	1961      	adds	r1, r4, r5
 800a6ba:	42a3      	cmp	r3, r4
 800a6bc:	6025      	str	r5, [r4, #0]
 800a6be:	bf18      	it	ne
 800a6c0:	6059      	strne	r1, [r3, #4]
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	bf08      	it	eq
 800a6c6:	6031      	streq	r1, [r6, #0]
 800a6c8:	5162      	str	r2, [r4, r5]
 800a6ca:	604b      	str	r3, [r1, #4]
 800a6cc:	4638      	mov	r0, r7
 800a6ce:	f104 060b 	add.w	r6, r4, #11
 800a6d2:	f000 f8bd 	bl	800a850 <__malloc_unlock>
 800a6d6:	f026 0607 	bic.w	r6, r6, #7
 800a6da:	1d23      	adds	r3, r4, #4
 800a6dc:	1af2      	subs	r2, r6, r3
 800a6de:	d0b6      	beq.n	800a64e <_malloc_r+0x22>
 800a6e0:	1b9b      	subs	r3, r3, r6
 800a6e2:	50a3      	str	r3, [r4, r2]
 800a6e4:	e7b3      	b.n	800a64e <_malloc_r+0x22>
 800a6e6:	6862      	ldr	r2, [r4, #4]
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	bf0c      	ite	eq
 800a6ec:	6032      	streq	r2, [r6, #0]
 800a6ee:	605a      	strne	r2, [r3, #4]
 800a6f0:	e7ec      	b.n	800a6cc <_malloc_r+0xa0>
 800a6f2:	4623      	mov	r3, r4
 800a6f4:	6864      	ldr	r4, [r4, #4]
 800a6f6:	e7b2      	b.n	800a65e <_malloc_r+0x32>
 800a6f8:	4634      	mov	r4, r6
 800a6fa:	6876      	ldr	r6, [r6, #4]
 800a6fc:	e7b9      	b.n	800a672 <_malloc_r+0x46>
 800a6fe:	230c      	movs	r3, #12
 800a700:	603b      	str	r3, [r7, #0]
 800a702:	4638      	mov	r0, r7
 800a704:	f000 f8a4 	bl	800a850 <__malloc_unlock>
 800a708:	e7a1      	b.n	800a64e <_malloc_r+0x22>
 800a70a:	6025      	str	r5, [r4, #0]
 800a70c:	e7de      	b.n	800a6cc <_malloc_r+0xa0>
 800a70e:	bf00      	nop
 800a710:	24014998 	.word	0x24014998

0800a714 <_sbrk_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d06      	ldr	r5, [pc, #24]	; (800a730 <_sbrk_r+0x1c>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	f000 f8ae 	bl	800a880 <_sbrk>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_sbrk_r+0x1a>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_sbrk_r+0x1a>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	240149a0 	.word	0x240149a0

0800a734 <__sread>:
 800a734:	b510      	push	{r4, lr}
 800a736:	460c      	mov	r4, r1
 800a738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73c:	f000 f88e 	bl	800a85c <_read_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	bfab      	itete	ge
 800a744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a746:	89a3      	ldrhlt	r3, [r4, #12]
 800a748:	181b      	addge	r3, r3, r0
 800a74a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a74e:	bfac      	ite	ge
 800a750:	6563      	strge	r3, [r4, #84]	; 0x54
 800a752:	81a3      	strhlt	r3, [r4, #12]
 800a754:	bd10      	pop	{r4, pc}

0800a756 <__swrite>:
 800a756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75a:	461f      	mov	r7, r3
 800a75c:	898b      	ldrh	r3, [r1, #12]
 800a75e:	05db      	lsls	r3, r3, #23
 800a760:	4605      	mov	r5, r0
 800a762:	460c      	mov	r4, r1
 800a764:	4616      	mov	r6, r2
 800a766:	d505      	bpl.n	800a774 <__swrite+0x1e>
 800a768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76c:	2302      	movs	r3, #2
 800a76e:	2200      	movs	r2, #0
 800a770:	f000 f856 	bl	800a820 <_lseek_r>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a77a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	4632      	mov	r2, r6
 800a782:	463b      	mov	r3, r7
 800a784:	4628      	mov	r0, r5
 800a786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a78a:	f7ff bb31 	b.w	8009df0 <_write_r>

0800a78e <__sseek>:
 800a78e:	b510      	push	{r4, lr}
 800a790:	460c      	mov	r4, r1
 800a792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a796:	f000 f843 	bl	800a820 <_lseek_r>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	bf15      	itete	ne
 800a7a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7aa:	81a3      	strheq	r3, [r4, #12]
 800a7ac:	bf18      	it	ne
 800a7ae:	81a3      	strhne	r3, [r4, #12]
 800a7b0:	bd10      	pop	{r4, pc}

0800a7b2 <__sclose>:
 800a7b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b6:	f000 b801 	b.w	800a7bc <_close_r>
	...

0800a7bc <_close_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	; (800a7d8 <_close_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f6 faf3 	bl	8000db2 <_close>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_close_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_close_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	240149a0 	.word	0x240149a0

0800a7dc <_fstat_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	; (800a7fc <_fstat_r+0x20>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	f7f6 faee 	bl	8000dca <_fstat>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d102      	bne.n	800a7f8 <_fstat_r+0x1c>
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	b103      	cbz	r3, 800a7f8 <_fstat_r+0x1c>
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	240149a0 	.word	0x240149a0

0800a800 <_isatty_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d06      	ldr	r5, [pc, #24]	; (800a81c <_isatty_r+0x1c>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	f7f6 faed 	bl	8000dea <_isatty>
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	d102      	bne.n	800a81a <_isatty_r+0x1a>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	b103      	cbz	r3, 800a81a <_isatty_r+0x1a>
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	240149a0 	.word	0x240149a0

0800a820 <_lseek_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4d07      	ldr	r5, [pc, #28]	; (800a840 <_lseek_r+0x20>)
 800a824:	4604      	mov	r4, r0
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	602a      	str	r2, [r5, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	f7f6 fae6 	bl	8000e00 <_lseek>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_lseek_r+0x1e>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_lseek_r+0x1e>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	240149a0 	.word	0x240149a0

0800a844 <__malloc_lock>:
 800a844:	4801      	ldr	r0, [pc, #4]	; (800a84c <__malloc_lock+0x8>)
 800a846:	f7ff be1d 	b.w	800a484 <__retarget_lock_acquire_recursive>
 800a84a:	bf00      	nop
 800a84c:	24014993 	.word	0x24014993

0800a850 <__malloc_unlock>:
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <__malloc_unlock+0x8>)
 800a852:	f7ff be18 	b.w	800a486 <__retarget_lock_release_recursive>
 800a856:	bf00      	nop
 800a858:	24014993 	.word	0x24014993

0800a85c <_read_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d07      	ldr	r5, [pc, #28]	; (800a87c <_read_r+0x20>)
 800a860:	4604      	mov	r4, r0
 800a862:	4608      	mov	r0, r1
 800a864:	4611      	mov	r1, r2
 800a866:	2200      	movs	r2, #0
 800a868:	602a      	str	r2, [r5, #0]
 800a86a:	461a      	mov	r2, r3
 800a86c:	f7f6 fa84 	bl	8000d78 <_read>
 800a870:	1c43      	adds	r3, r0, #1
 800a872:	d102      	bne.n	800a87a <_read_r+0x1e>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	b103      	cbz	r3, 800a87a <_read_r+0x1e>
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	240149a0 	.word	0x240149a0

0800a880 <_sbrk>:
 800a880:	4a04      	ldr	r2, [pc, #16]	; (800a894 <_sbrk+0x14>)
 800a882:	6811      	ldr	r1, [r2, #0]
 800a884:	4603      	mov	r3, r0
 800a886:	b909      	cbnz	r1, 800a88c <_sbrk+0xc>
 800a888:	4903      	ldr	r1, [pc, #12]	; (800a898 <_sbrk+0x18>)
 800a88a:	6011      	str	r1, [r2, #0]
 800a88c:	6810      	ldr	r0, [r2, #0]
 800a88e:	4403      	add	r3, r0
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	4770      	bx	lr
 800a894:	240149a4 	.word	0x240149a4
 800a898:	240149a8 	.word	0x240149a8

0800a89c <_init>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	bf00      	nop
 800a8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a2:	bc08      	pop	{r3}
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	4770      	bx	lr

0800a8a8 <_fini>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	bf00      	nop
 800a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ae:	bc08      	pop	{r3}
 800a8b0:	469e      	mov	lr, r3
 800a8b2:	4770      	bx	lr
