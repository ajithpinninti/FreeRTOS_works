
task_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008528  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080088d8  080088d8  000188d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  080088dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000042b4  2400007c  08008958  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004330  08008958  00024330  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bce4  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003507  00000000  00000000  0003bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015e8  00000000  00000000  0003f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014b0  00000000  00000000  00040880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000327df  00000000  00000000  00041d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001abeb  00000000  00000000  0007450f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149ba2  00000000  00000000  0008f0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d8c9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006338  00000000  00000000  001d8cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080087c0 	.word	0x080087c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	080087c0 	.word	0x080087c0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fcb3 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f849 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f911 	bl	8000828 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f8bb 	bl	8000780 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 f905 	bl	8000818 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2302      	movs	r3, #2
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <main+0x88>)
 800061a:	22c8      	movs	r2, #200	; 0xc8
 800061c:	4918      	ldr	r1, [pc, #96]	; (8000680 <main+0x8c>)
 800061e:	4819      	ldr	r0, [pc, #100]	; (8000684 <main+0x90>)
 8000620:	f005 fdfc 	bl	800621c <xTaskCreate>
 8000624:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d00a      	beq.n	8000642 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800062c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000630:	f383 8811 	msr	BASEPRI, r3
 8000634:	f3bf 8f6f 	isb	sy
 8000638:	f3bf 8f4f 	dsb	sy
 800063c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800063e:	bf00      	nop
 8000640:	e7fe      	b.n	8000640 <main+0x4c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2302      	movs	r3, #2
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <main+0x94>)
 800064c:	22c8      	movs	r2, #200	; 0xc8
 800064e:	490f      	ldr	r1, [pc, #60]	; (800068c <main+0x98>)
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <main+0x9c>)
 8000652:	f005 fde3 	bl	800621c <xTaskCreate>
 8000656:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d00a      	beq.n	8000674 <main+0x80>
        __asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	60fb      	str	r3, [r7, #12]
    }
 8000670:	bf00      	nop
 8000672:	e7fe      	b.n	8000672 <main+0x7e>

  //start the freertos scheduler
  vTaskStartScheduler();
 8000674:	f005 ff2e 	bl	80064d4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x84>
 800067a:	bf00      	nop
 800067c:	080087d8 	.word	0x080087d8
 8000680:	080087f0 	.word	0x080087f0
 8000684:	08000a5d 	.word	0x08000a5d
 8000688:	080087f8 	.word	0x080087f8
 800068c:	08008810 	.word	0x08008810
 8000690:	08000a81 	.word	0x08000a81

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09c      	sub	sp, #112	; 0x70
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	224c      	movs	r2, #76	; 0x4c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fb78 	bl	8007d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2220      	movs	r2, #32
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fb72 	bl	8007d98 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006b4:	4b30      	ldr	r3, [pc, #192]	; (8000778 <SystemClock_Config+0xe4>)
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006be:	2004      	movs	r0, #4
 80006c0:	f000 ff56 	bl	8001570 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <SystemClock_Config+0xe8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a2b      	ldr	r2, [pc, #172]	; (800077c <SystemClock_Config+0xe8>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemClock_Config+0xe8>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e0:	bf00      	nop
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemClock_Config+0xe8>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ee:	d1f8      	bne.n	80006e2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006f0:	2321      	movs	r3, #33	; 0x21
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	2302      	movs	r3, #2
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800070a:	2318      	movs	r3, #24
 800070c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800071a:	230c      	movs	r3, #12
 800071c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071e:	2300      	movs	r3, #0
 8000720:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff7a 	bl	8001624 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000736:	f000 f9c7 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	233f      	movs	r3, #63	; 0x3f
 800073c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fb92 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800076a:	f000 f9ad 	bl	8000ac8 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3770      	adds	r7, #112	; 0x70
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58024400 	.word	0x58024400
 800077c:	58024800 	.word	0x58024800

08000780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_USART3_UART_Init+0x90>)
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <MX_USART3_UART_Init+0x94>)
 8000788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_USART3_UART_Init+0x90>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_USART3_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_USART3_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007ca:	f003 ffe5 	bl	8004798 <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f978 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007dc:	f005 f8eb 	bl	80059b6 <HAL_UARTEx_SetTxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f96f 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007ee:	f005 f920 	bl	8005a32 <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f966 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_USART3_UART_Init+0x90>)
 80007fe:	f005 f8a1 	bl	8005944 <HAL_UARTEx_DisableFifoMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f95e 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000098 	.word	0x24000098
 8000814:	40004800 	.word	0x40004800

08000818 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	; 0x38
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b80      	ldr	r3, [pc, #512]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	4a7e      	ldr	r2, [pc, #504]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000850:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085c:	4b78      	ldr	r3, [pc, #480]	; (8000a40 <MX_GPIO_Init+0x218>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	4a77      	ldr	r2, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800086c:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x218>)
 800086e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000872:	f003 0320 	and.w	r3, r3, #32
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4b71      	ldr	r3, [pc, #452]	; (8000a40 <MX_GPIO_Init+0x218>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	4a6f      	ldr	r2, [pc, #444]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000886:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800088a:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <MX_GPIO_Init+0x218>)
 800088c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <MX_GPIO_Init+0x218>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	4a68      	ldr	r2, [pc, #416]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a8:	4b65      	ldr	r3, [pc, #404]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	4a60      	ldr	r2, [pc, #384]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d4:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008da:	4a59      	ldr	r2, [pc, #356]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e4:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f8:	4a51      	ldr	r2, [pc, #324]	; (8000a40 <MX_GPIO_Init+0x218>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000902:	4b4f      	ldr	r3, [pc, #316]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000910:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000912:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000916:	4a4a      	ldr	r2, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000918:	f043 0310 	orr.w	r3, r3, #16
 800091c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000920:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <MX_GPIO_Init+0x218>)
 8000922:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000934:	4843      	ldr	r0, [pc, #268]	; (8000a44 <MX_GPIO_Init+0x21c>)
 8000936:	f000 fe01 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000940:	4841      	ldr	r0, [pc, #260]	; (8000a48 <MX_GPIO_Init+0x220>)
 8000942:	f000 fdfb 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2102      	movs	r1, #2
 800094a:	4840      	ldr	r0, [pc, #256]	; (8000a4c <MX_GPIO_Init+0x224>)
 800094c:	f000 fdf6 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	483a      	ldr	r0, [pc, #232]	; (8000a50 <MX_GPIO_Init+0x228>)
 8000966:	f000 fc39 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4830      	ldr	r0, [pc, #192]	; (8000a44 <MX_GPIO_Init+0x21c>)
 8000984:	f000 fc2a 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000988:	f244 0301 	movw	r3, #16385	; 0x4001
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	4829      	ldr	r0, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x220>)
 80009a2:	f000 fc1b 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4826      	ldr	r0, [pc, #152]	; (8000a54 <MX_GPIO_Init+0x22c>)
 80009bc:	f000 fc0e 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4820      	ldr	r0, [pc, #128]	; (8000a58 <MX_GPIO_Init+0x230>)
 80009d6:	f000 fc01 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009ec:	230a      	movs	r3, #10
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_GPIO_Init+0x230>)
 80009f8:	f000 fbf0 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <MX_GPIO_Init+0x230>)
 8000a16:	f000 fbe1 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_GPIO_Init+0x224>)
 8000a32:	f000 fbd3 	bl	80011dc <HAL_GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3738      	adds	r7, #56	; 0x38
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58021400 	.word	0x58021400
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58021000 	.word	0x58021000
 8000a50:	58020800 	.word	0x58020800
 8000a54:	58021800 	.word	0x58021800
 8000a58:	58020000 	.word	0x58020000

08000a5c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void * parameters){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char*)parameters);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f007 fa0d 	bl	8007e84 <puts>
		taskYIELD();
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <task1_handler+0x20>)
 8000a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	f3bf 8f4f 	dsb	sy
 8000a76:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)parameters);
 8000a7a:	e7f3      	b.n	8000a64 <task1_handler+0x8>
 8000a7c:	e000ed04 	.word	0xe000ed04

08000a80 <task2_handler>:
	}
}
static void task2_handler(void* parameters){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n",(char *)parameters);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f007 f9fb 	bl	8007e84 <puts>
		taskYIELD();
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <task2_handler+0x20>)
 8000a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	f3bf 8f4f 	dsb	sy
 8000a9a:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char *)parameters);
 8000a9e:	e7f3      	b.n	8000a88 <task2_handler+0x8>
 8000aa0:	e000ed04 	.word	0xe000ed04

08000aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d101      	bne.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab6:	f000 fa91 	bl	8000fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40001000 	.word	0x40001000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_MspInit+0x30>)
 8000adc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x30>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x30>)
 8000aec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	58024400 	.word	0x58024400

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ba      	sub	sp, #232	; 0xe8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	22c0      	movs	r2, #192	; 0xc0
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f007 f935 	bl	8007d98 <memset>
  if(huart->Instance==USART3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a27      	ldr	r2, [pc, #156]	; (8000bd0 <HAL_UART_MspInit+0xc8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d146      	bne.n	8000bc6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b38:	f04f 0202 	mov.w	r2, #2
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fd68 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b5a:	f7ff ffb5 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0xcc>)
 8000b60:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <HAL_UART_MspInit+0xcc>)
 8000b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0xcc>)
 8000b70:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_UART_MspInit+0xcc>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <HAL_UART_MspInit+0xcc>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0xcc>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_UART_MspInit+0xd0>)
 8000bc2:	f000 fb0b 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	37e8      	adds	r7, #232	; 0xe8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004800 	.word	0x40004800
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58020c00 	.word	0x58020c00

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d827      	bhi.n	8000c3a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000bea:	2200      	movs	r2, #0
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	2036      	movs	r0, #54	; 0x36
 8000bf0:	f000 facc 	bl	800118c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f000 fae3 	bl	80011c0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000bfa:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <HAL_InitTick+0xc4>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <HAL_InitTick+0xc8>)
 8000c02:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c06:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <HAL_InitTick+0xc8>)
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_InitTick+0xc8>)
 8000c12:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1e:	f107 0210 	add.w	r2, r7, #16
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fcb9 	bl	80025a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <HAL_InitTick+0x6a>
 8000c38:	e001      	b.n	8000c3e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e02b      	b.n	8000c96 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c3e:	f001 fc83 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8000c42:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c44:	e004      	b.n	8000c50 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c46:	f001 fc7f 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	0c9b      	lsrs	r3, r3, #18
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_InitTick+0xd0>)
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <HAL_InitTick+0xd4>)
 8000c62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_InitTick+0xd0>)
 8000c66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_InitTick+0xd0>)
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_InitTick+0xd0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_InitTick+0xd0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <HAL_InitTick+0xd0>)
 8000c80:	f003 fab0 	bl	80041e4 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d104      	bne.n	8000c94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <HAL_InitTick+0xd0>)
 8000c8c:	f003 fb0c 	bl	80042a8 <HAL_TIM_Base_Start_IT>
 8000c90:	4603      	mov	r3, r0
 8000c92:	e000      	b.n	8000c96 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3740      	adds	r7, #64	; 0x40
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000008 	.word	0x24000008
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	2400012c 	.word	0x2400012c
 8000cb0:	40001000 	.word	0x40001000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM6_DAC_IRQHandler+0x10>)
 8000ce6:	f003 fb57 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2400012c 	.word	0x2400012c

08000cf4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <ITM_SendChar+0x48>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <ITM_SendChar+0x48>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <ITM_SendChar+0x4c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <ITM_SendChar+0x4c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d16:	bf00      	nop
 8000d18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f8      	beq.n	8000d18 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000edfc 	.word	0xe000edfc
 8000d40:	e0000e00 	.word	0xe0000e00

08000d44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00a      	b.n	8000d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d56:	f3af 8000 	nop.w
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	b2ca      	uxtb	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf0      	blt.n	8000d56 <_read+0x12>
  }

  return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffab 	bl	8000cf4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf1      	blt.n	8000d90 <_write+0x12>
  }
  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <SystemInit+0xd0>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <SystemInit+0xd0>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <SystemInit+0xd4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d807      	bhi.n	8000e50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <SystemInit+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 030f 	bic.w	r3, r3, #15
 8000e48:	4a2a      	ldr	r2, [pc, #168]	; (8000ef4 <SystemInit+0xd4>)
 8000e4a:	f043 0303 	orr.w	r3, r3, #3
 8000e4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <SystemInit+0xd8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <SystemInit+0xd8>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <SystemInit+0xd8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <SystemInit+0xd8>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4924      	ldr	r1, [pc, #144]	; (8000ef8 <SystemInit+0xd8>)
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <SystemInit+0xdc>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <SystemInit+0xd4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <SystemInit+0xd4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 030f 	bic.w	r3, r3, #15
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <SystemInit+0xd4>)
 8000e84:	f043 0303 	orr.w	r3, r3, #3
 8000e88:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <SystemInit+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <SystemInit+0xd8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <SystemInit+0xd8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <SystemInit+0xd8>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <SystemInit+0xe0>)
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <SystemInit+0xd8>)
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <SystemInit+0xe4>)
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <SystemInit+0xd8>)
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <SystemInit+0xe8>)
 8000eac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <SystemInit+0xd8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <SystemInit+0xd8>)
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <SystemInit+0xe8>)
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <SystemInit+0xd8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <SystemInit+0xd8>)
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <SystemInit+0xe8>)
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <SystemInit+0xd8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <SystemInit+0xd8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <SystemInit+0xd8>)
 8000ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <SystemInit+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <SystemInit+0xec>)
 8000ee0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ee4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	52002000 	.word	0x52002000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f00:	02020200 	.word	0x02020200
 8000f04:	01ff0000 	.word	0x01ff0000
 8000f08:	01010280 	.word	0x01010280
 8000f0c:	52004000 	.word	0x52004000

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f14:	f7ff ff84 	bl	8000e20 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f006 fef9 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fb57 	bl	80005f4 <main>
  bx  lr
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f50:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8000f54:	080088dc 	.word	0x080088dc
  ldr r2, =_sbss
 8000f58:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8000f5c:	24004330 	.word	0x24004330

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f903 	bl	8001176 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000f70:	f001 f940 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_Init+0x68>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <HAL_Init+0x6c>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_Init+0x68>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_Init+0x6c>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_Init+0x70>)
 8000fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x74>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f7ff fe14 	bl	8000bdc <HAL_InitTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e002      	b.n	8000fc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbe:	f7ff fd89 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	08008830 	.word	0x08008830
 8000fd4:	24000004 	.word	0x24000004
 8000fd8:	24000000 	.word	0x24000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2400000c 	.word	0x2400000c
 8001000:	24000178 	.word	0x24000178

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	24000178 	.word	0x24000178

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <__NVIC_SetPriorityGrouping+0x40>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	4313      	orrs	r3, r2
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x40>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	05fa0000 	.word	0x05fa0000

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff4c 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119a:	f7ff ff63 	bl	8001064 <__NVIC_GetPriorityGrouping>
 800119e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff ffb3 	bl	8001110 <NVIC_EncodePriority>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff82 	bl	80010bc <__NVIC_SetPriority>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff56 	bl	8001080 <__NVIC_EnableIRQ>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011ea:	4b89      	ldr	r3, [pc, #548]	; (8001410 <HAL_GPIO_Init+0x234>)
 80011ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ee:	e194      	b.n	800151a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8186 	beq.w	8001514 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d005      	beq.n	8001220 <HAL_GPIO_Init+0x44>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d130      	bne.n	8001282 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001256:	2201      	movs	r2, #1
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	f003 0201 	and.w	r2, r3, #1
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b03      	cmp	r3, #3
 800128c:	d017      	beq.n	80012be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d123      	bne.n	8001312 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	69b9      	ldr	r1, [r7, #24]
 800130e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0203 	and.w	r2, r3, #3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80e0 	beq.w	8001514 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_GPIO_Init+0x238>)
 8001356:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800135a:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <HAL_GPIO_Init+0x238>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_GPIO_Init+0x238>)
 8001366:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <HAL_GPIO_Init+0x23c>)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <HAL_GPIO_Init+0x240>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d052      	beq.n	8001444 <HAL_GPIO_Init+0x268>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_GPIO_Init+0x244>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d031      	beq.n	800140a <HAL_GPIO_Init+0x22e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_GPIO_Init+0x248>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d02b      	beq.n	8001406 <HAL_GPIO_Init+0x22a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x24c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x226>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a1c      	ldr	r2, [pc, #112]	; (800142c <HAL_GPIO_Init+0x250>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x222>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_GPIO_Init+0x254>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x21e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_GPIO_Init+0x258>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_GPIO_Init+0x25c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x216>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <HAL_GPIO_Init+0x260>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x212>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_GPIO_Init+0x264>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x20e>
 80013e6:	2309      	movs	r3, #9
 80013e8:	e02d      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 80013ea:	230a      	movs	r3, #10
 80013ec:	e02b      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 80013ee:	2308      	movs	r3, #8
 80013f0:	e029      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 80013f2:	2307      	movs	r3, #7
 80013f4:	e027      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 80013f6:	2306      	movs	r3, #6
 80013f8:	e025      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e023      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 80013fe:	2304      	movs	r3, #4
 8001400:	e021      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 8001402:	2303      	movs	r3, #3
 8001404:	e01f      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 8001406:	2302      	movs	r3, #2
 8001408:	e01d      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 800140a:	2301      	movs	r3, #1
 800140c:	e01b      	b.n	8001446 <HAL_GPIO_Init+0x26a>
 800140e:	bf00      	nop
 8001410:	58000080 	.word	0x58000080
 8001414:	58024400 	.word	0x58024400
 8001418:	58000400 	.word	0x58000400
 800141c:	58020000 	.word	0x58020000
 8001420:	58020400 	.word	0x58020400
 8001424:	58020800 	.word	0x58020800
 8001428:	58020c00 	.word	0x58020c00
 800142c:	58021000 	.word	0x58021000
 8001430:	58021400 	.word	0x58021400
 8001434:	58021800 	.word	0x58021800
 8001438:	58021c00 	.word	0x58021c00
 800143c:	58022000 	.word	0x58022000
 8001440:	58022400 	.word	0x58022400
 8001444:	2300      	movs	r3, #0
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001456:	4938      	ldr	r1, [pc, #224]	; (8001538 <HAL_GPIO_Init+0x35c>)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800148a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	3301      	adds	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	f47f ae63 	bne.w	80011f0 <HAL_GPIO_Init+0x14>
  }
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	3724      	adds	r7, #36	; 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	58000400 	.word	0x58000400

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_PWREx_ConfigSupply+0xb0>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	2b06      	cmp	r3, #6
 8001582:	d00a      	beq.n	800159a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_PWREx_ConfigSupply+0xb0>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e040      	b.n	8001618 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e03e      	b.n	8001618 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_PWREx_ConfigSupply+0xb0>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80015a2:	491f      	ldr	r1, [pc, #124]	; (8001620 <HAL_PWREx_ConfigSupply+0xb0>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015aa:	f7ff fd2b 	bl	8001004 <HAL_GetTick>
 80015ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015b0:	e009      	b.n	80015c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015b2:	f7ff fd27 	bl	8001004 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c0:	d901      	bls.n	80015c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e028      	b.n	8001618 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_PWREx_ConfigSupply+0xb0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d2:	d1ee      	bne.n	80015b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b1e      	cmp	r3, #30
 80015d8:	d008      	beq.n	80015ec <HAL_PWREx_ConfigSupply+0x7c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b2e      	cmp	r3, #46	; 0x2e
 80015de:	d005      	beq.n	80015ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b1d      	cmp	r3, #29
 80015e4:	d002      	beq.n	80015ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b2d      	cmp	r3, #45	; 0x2d
 80015ea:	d114      	bne.n	8001616 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015ec:	f7ff fd0a 	bl	8001004 <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015f2:	e009      	b.n	8001608 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015f4:	f7ff fd06 	bl	8001004 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001602:	d901      	bls.n	8001608 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e007      	b.n	8001618 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_PWREx_ConfigSupply+0xb0>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d1ee      	bne.n	80015f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58024800 	.word	0x58024800

08001624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	f000 bc1f 	b.w	8001e76 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80b3 	beq.w	80017ac <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001650:	4b92      	ldr	r3, [pc, #584]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	2b10      	cmp	r3, #16
 800165a:	d007      	beq.n	800166c <HAL_RCC_OscConfig+0x48>
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	2b18      	cmp	r3, #24
 8001660:	d112      	bne.n	8001688 <HAL_RCC_OscConfig+0x64>
 8001662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b8b      	ldr	r3, [pc, #556]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8098 	beq.w	80017aa <HAL_RCC_OscConfig+0x186>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 8093 	bne.w	80017aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e3f6      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x7c>
 8001692:	4b82      	ldr	r3, [pc, #520]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a81      	ldr	r2, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e058      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d112      	bne.n	80016ce <HAL_RCC_OscConfig+0xaa>
 80016a8:	4b7c      	ldr	r3, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a7b      	ldr	r2, [pc, #492]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b79      	ldr	r3, [pc, #484]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a78      	ldr	r2, [pc, #480]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b76      	ldr	r3, [pc, #472]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a75      	ldr	r2, [pc, #468]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e041      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d6:	d112      	bne.n	80016fe <HAL_RCC_OscConfig+0xda>
 80016d8:	4b70      	ldr	r3, [pc, #448]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6f      	ldr	r2, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b6d      	ldr	r3, [pc, #436]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a6c      	ldr	r2, [pc, #432]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a69      	ldr	r2, [pc, #420]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e029      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0x10a>
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a63      	ldr	r2, [pc, #396]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800170e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b61      	ldr	r3, [pc, #388]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a60      	ldr	r2, [pc, #384]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800171a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b5e      	ldr	r3, [pc, #376]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a5d      	ldr	r2, [pc, #372]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e011      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
 800172e:	4b5b      	ldr	r3, [pc, #364]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a5a      	ldr	r2, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b58      	ldr	r3, [pc, #352]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a57      	ldr	r2, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800174c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d013      	beq.n	8001782 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fc53 	bl	8001004 <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001762:	f7ff fc4f 	bl	8001004 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b64      	cmp	r3, #100	; 0x64
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e380      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001774:	4b49      	ldr	r3, [pc, #292]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x13e>
 8001780:	e014      	b.n	80017ac <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fc3f 	bl	8001004 <HAL_GetTick>
 8001786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178a:	f7ff fc3b 	bl	8001004 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e36c      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800179c:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x166>
 80017a8:	e000      	b.n	80017ac <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 808c 	beq.w	80018d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_RCC_OscConfig+0x1bc>
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d137      	bne.n	8001846 <HAL_RCC_OscConfig+0x222>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d132      	bne.n	8001846 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x1d4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e33e      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <HAL_RCC_OscConfig+0x278>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 0219 	bic.w	r2, r3, #25
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4925      	ldr	r1, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff fbfb 	bl	8001004 <HAL_GetTick>
 800180e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff fbf7 	bl	8001004 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e328      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4917      	ldr	r1, [pc, #92]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	e045      	b.n	80018d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d028      	beq.n	80018a0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 0219 	bic.w	r2, r3, #25
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4910      	ldr	r1, [pc, #64]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fbd0 	bl	8001004 <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fbcc 	bl	8001004 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e2fd      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_RCC_OscConfig+0x278>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	4901      	ldr	r1, [pc, #4]	; (800189c <HAL_RCC_OscConfig+0x278>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
 800189a:	e01a      	b.n	80018d2 <HAL_RCC_OscConfig+0x2ae>
 800189c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a0:	4b97      	ldr	r3, [pc, #604]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a96      	ldr	r2, [pc, #600]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fbaa 	bl	8001004 <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fba6 	bl	8001004 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e2d7      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c6:	4b8e      	ldr	r3, [pc, #568]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06a      	beq.n	80019b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e8:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d007      	beq.n	8001904 <HAL_RCC_OscConfig+0x2e0>
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b18      	cmp	r3, #24
 80018f8:	d11b      	bne.n	8001932 <HAL_RCC_OscConfig+0x30e>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d116      	bne.n	8001932 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001904:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_OscConfig+0x2f8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b80      	cmp	r3, #128	; 0x80
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e2ac      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800191c:	4b78      	ldr	r3, [pc, #480]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	4975      	ldr	r1, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 800192c:	4313      	orrs	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001930:	e040      	b.n	80019b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d023      	beq.n	8001982 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800193a:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a70      	ldr	r2, [pc, #448]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff fb5d 	bl	8001004 <HAL_GetTick>
 800194a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800194e:	f7ff fb59 	bl	8001004 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e28a      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001960:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800196c:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	4961      	ldr	r1, [pc, #388]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
 8001980:	e018      	b.n	80019b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800198c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff fb39 	bl	8001004 <HAL_GetTick>
 8001992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001996:	f7ff fb35 	bl	8001004 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e266      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019a8:	4b55      	ldr	r3, [pc, #340]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d036      	beq.n	8001a2e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d019      	beq.n	80019fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c8:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80019ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019cc:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff fb16 	bl	8001004 <HAL_GetTick>
 80019d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fb12 	bl	8001004 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e243      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80019f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x3b8>
 80019fa:	e018      	b.n	8001a2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80019fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a00:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff fafc 	bl	8001004 <HAL_GetTick>
 8001a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff faf8 	bl	8001004 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e229      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d036      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d019      	beq.n	8001a76 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fad9 	bl	8001004 <HAL_GetTick>
 8001a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a56:	f7ff fad5 	bl	8001004 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e206      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x432>
 8001a74:	e018      	b.n	8001aa8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a82:	f7ff fabf 	bl	8001004 <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a8a:	f7ff fabb 	bl	8001004 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e1ec      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80af 	beq.w	8001c14 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_RCC_OscConfig+0x4e0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_RCC_OscConfig+0x4e0>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ac2:	f7ff fa9f 	bl	8001004 <HAL_GetTick>
 8001ac6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff fa9b 	bl	8001004 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1cc      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x4e0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d10b      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4e4>
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a02      	ldr	r2, [pc, #8]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	e05b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x592>
 8001afe:	bf00      	nop
 8001b00:	58024400 	.word	0x58024400
 8001b04:	58024800 	.word	0x58024800
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d112      	bne.n	8001b36 <HAL_RCC_OscConfig+0x512>
 8001b10:	4b9d      	ldr	r3, [pc, #628]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a9c      	ldr	r2, [pc, #624]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	4b9a      	ldr	r3, [pc, #616]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a99      	ldr	r2, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	4b97      	ldr	r3, [pc, #604]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a96      	ldr	r2, [pc, #600]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	e03f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x592>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d112      	bne.n	8001b64 <HAL_RCC_OscConfig+0x540>
 8001b3e:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	4a91      	ldr	r2, [pc, #580]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4a:	4b8f      	ldr	r3, [pc, #572]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a8e      	ldr	r2, [pc, #568]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a8b      	ldr	r2, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	e028      	b.n	8001bb6 <HAL_RCC_OscConfig+0x592>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b85      	cmp	r3, #133	; 0x85
 8001b6a:	d112      	bne.n	8001b92 <HAL_RCC_OscConfig+0x56e>
 8001b6c:	4b86      	ldr	r3, [pc, #536]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a85      	ldr	r2, [pc, #532]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	4b83      	ldr	r3, [pc, #524]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a82      	ldr	r2, [pc, #520]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
 8001b84:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a7f      	ldr	r2, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	e011      	b.n	8001bb6 <HAL_RCC_OscConfig+0x592>
 8001b92:	4b7d      	ldr	r3, [pc, #500]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a7c      	ldr	r2, [pc, #496]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a79      	ldr	r2, [pc, #484]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8001baa:	4b77      	ldr	r3, [pc, #476]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a76      	ldr	r2, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d015      	beq.n	8001bea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fa21 	bl	8001004 <HAL_GetTick>
 8001bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff fa1d 	bl	8001004 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e14c      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ee      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x5a2>
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff fa0b 	bl	8001004 <HAL_GetTick>
 8001bee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fa07 	bl	8001004 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e136      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c08:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ee      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 812b 	beq.w	8001e74 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c1e:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c26:	2b18      	cmp	r3, #24
 8001c28:	f000 80bb 	beq.w	8001da2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	f040 8095 	bne.w	8001d60 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b54      	ldr	r3, [pc, #336]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a53      	ldr	r2, [pc, #332]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f9df 	bl	8001004 <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff f9db 	bl	8001004 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e10c      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_OscConfig+0x768>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	4942      	ldr	r1, [pc, #264]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	628b      	str	r3, [r1, #40]	; 0x28
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	3b01      	subs	r3, #1
 8001c92:	025b      	lsls	r3, r3, #9
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	3b01      	subs	r3, #1
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001cb2:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_OscConfig+0x76c>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cd0:	00d2      	lsls	r2, r2, #3
 8001cd2:	492d      	ldr	r1, [pc, #180]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f023 020c 	bic.w	r2, r3, #12
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	4928      	ldr	r1, [pc, #160]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f023 0202 	bic.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4924      	ldr	r1, [pc, #144]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f964 	bl	8001004 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f960 	bl	8001004 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e091      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x71c>
 8001d5e:	e089      	b.n	8001e74 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <HAL_RCC_OscConfig+0x764>)
 8001d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f94a 	bl	8001004 <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d72:	e00f      	b.n	8001d94 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f946 	bl	8001004 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d908      	bls.n	8001d94 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e077      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
 8001d86:	bf00      	nop
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	fffffc0c 	.word	0xfffffc0c
 8001d90:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e9      	bne.n	8001d74 <HAL_RCC_OscConfig+0x750>
 8001da0:	e068      	b.n	8001e74 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d031      	beq.n	8001e1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d12a      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d122      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d11a      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	0a5b      	lsrs	r3, r3, #9
 8001de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d111      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d108      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	0e1b      	lsrs	r3, r3, #24
 8001e0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e02b      	b.n	8001e76 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e28:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d01f      	beq.n	8001e74 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e40:	f7ff f8e0 	bl	8001004 <HAL_GetTick>
 8001e44:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e46:	bf00      	nop
 8001e48:	f7ff f8dc 	bl	8001004 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d0f9      	beq.n	8001e48 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x860>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	4907      	ldr	r1, [pc, #28]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_RCC_OscConfig+0x85c>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3730      	adds	r7, #48	; 0x30
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	58024400 	.word	0x58024400
 8001e84:	ffff0007 	.word	0xffff0007

08001e88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e19c      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b8a      	ldr	r3, [pc, #552]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b87      	ldr	r3, [pc, #540]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 020f 	bic.w	r2, r3, #15
 8001eb2:	4985      	ldr	r1, [pc, #532]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b83      	ldr	r3, [pc, #524]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e184      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b7b      	ldr	r3, [pc, #492]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d908      	bls.n	8001efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ee8:	4b78      	ldr	r3, [pc, #480]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	4975      	ldr	r1, [pc, #468]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	4b70      	ldr	r3, [pc, #448]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f16:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	496a      	ldr	r1, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	4b64      	ldr	r3, [pc, #400]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d908      	bls.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	495e      	ldr	r1, [pc, #376]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	4b59      	ldr	r3, [pc, #356]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d908      	bls.n	8001f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f72:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4953      	ldr	r1, [pc, #332]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d010      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d908      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f023 020f 	bic.w	r2, r3, #15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4947      	ldr	r1, [pc, #284]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d055      	beq.n	800206a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4940      	ldr	r1, [pc, #256]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd8:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d121      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f6      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d115      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0ea      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0de      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d6      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f023 0207 	bic.w	r2, r3, #7
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4925      	ldr	r1, [pc, #148]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8002036:	4313      	orrs	r3, r2
 8002038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800203a:	f7fe ffe3 	bl	8001004 <HAL_GetTick>
 800203e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002040:	e00a      	b.n	8002058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe ffdf 	bl	8001004 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0be      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002058:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	429a      	cmp	r2, r3
 8002068:	d1eb      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	429a      	cmp	r2, r3
 8002084:	d208      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f023 020f 	bic.w	r2, r3, #15
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	490e      	ldr	r1, [pc, #56]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 8002094:	4313      	orrs	r3, r2
 8002096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d214      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 020f 	bic.w	r2, r3, #15
 80020ae:	4906      	ldr	r1, [pc, #24]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e086      	b.n	80021d6 <HAL_RCC_ClockConfig+0x34e>
 80020c8:	52002000 	.word	0x52002000
 80020cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d208      	bcs.n	80020fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020ec:	4b3c      	ldr	r3, [pc, #240]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	4939      	ldr	r1, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d010      	beq.n	800212c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002116:	429a      	cmp	r2, r3
 8002118:	d208      	bcs.n	800212c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	492e      	ldr	r1, [pc, #184]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002128:	4313      	orrs	r3, r2
 800212a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	d010      	beq.n	800215a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002144:	429a      	cmp	r2, r3
 8002146:	d208      	bcs.n	800215a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002156:	4313      	orrs	r3, r2
 8002158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002172:	429a      	cmp	r2, r3
 8002174:	d208      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002184:	4313      	orrs	r3, r2
 8002186:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002188:	f000 f834 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	4912      	ldr	r1, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x35c>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_RCC_ClockConfig+0x358>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_RCC_ClockConfig+0x35c>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x360>)
 80021be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x364>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x368>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fd06 	bl	8000bdc <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	58024400 	.word	0x58024400
 80021e4:	08008830 	.word	0x08008830
 80021e8:	24000004 	.word	0x24000004
 80021ec:	24000000 	.word	0x24000000
 80021f0:	24000008 	.word	0x24000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021fa:	4bb3      	ldr	r3, [pc, #716]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002202:	2b18      	cmp	r3, #24
 8002204:	f200 8155 	bhi.w	80024b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002208:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002275 	.word	0x08002275
 8002214:	080024b3 	.word	0x080024b3
 8002218:	080024b3 	.word	0x080024b3
 800221c:	080024b3 	.word	0x080024b3
 8002220:	080024b3 	.word	0x080024b3
 8002224:	080024b3 	.word	0x080024b3
 8002228:	080024b3 	.word	0x080024b3
 800222c:	080024b3 	.word	0x080024b3
 8002230:	0800229b 	.word	0x0800229b
 8002234:	080024b3 	.word	0x080024b3
 8002238:	080024b3 	.word	0x080024b3
 800223c:	080024b3 	.word	0x080024b3
 8002240:	080024b3 	.word	0x080024b3
 8002244:	080024b3 	.word	0x080024b3
 8002248:	080024b3 	.word	0x080024b3
 800224c:	080024b3 	.word	0x080024b3
 8002250:	080022a1 	.word	0x080022a1
 8002254:	080024b3 	.word	0x080024b3
 8002258:	080024b3 	.word	0x080024b3
 800225c:	080024b3 	.word	0x080024b3
 8002260:	080024b3 	.word	0x080024b3
 8002264:	080024b3 	.word	0x080024b3
 8002268:	080024b3 	.word	0x080024b3
 800226c:	080024b3 	.word	0x080024b3
 8002270:	080022a7 	.word	0x080022a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002274:	4b94      	ldr	r3, [pc, #592]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002280:	4b91      	ldr	r3, [pc, #580]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	4a90      	ldr	r2, [pc, #576]	; (80024cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
 8002290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002292:	e111      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002294:	4b8d      	ldr	r3, [pc, #564]	; (80024cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002296:	61bb      	str	r3, [r7, #24]
      break;
 8002298:	e10e      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800229a:	4b8d      	ldr	r3, [pc, #564]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800229c:	61bb      	str	r3, [r7, #24]
      break;
 800229e:	e10b      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80022a0:	4b8c      	ldr	r3, [pc, #560]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022a2:	61bb      	str	r3, [r7, #24]
      break;
 80022a4:	e108      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022a6:	4b88      	ldr	r3, [pc, #544]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022b0:	4b85      	ldr	r3, [pc, #532]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022bc:	4b82      	ldr	r3, [pc, #520]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022c6:	4b80      	ldr	r3, [pc, #512]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	08db      	lsrs	r3, r3, #3
 80022cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80e1 	beq.w	80024ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	f000 8083 	beq.w	80023f8 <HAL_RCC_GetSysClockFreq+0x204>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	f200 80a1 	bhi.w	800243c <HAL_RCC_GetSysClockFreq+0x248>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x114>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d056      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002306:	e099      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002308:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02d      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002314:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	4a6b      	ldr	r2, [pc, #428]	; (80024cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
 8002324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233e:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002352:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800235a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800236e:	e087      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800237e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002392:	ed97 6a02 	vldr	s12, [r7, #8]
 8002396:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800239a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800239e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023b2:	e065      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023f6:	e043      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002402:	eddf 6a38 	vldr	s13, [pc, #224]	; 80024e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800240a:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800241a:	ed97 6a02 	vldr	s12, [r7, #8]
 800241e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800242a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800242e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800243a:	e021      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002446:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800244a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002462:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800246a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800246e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800247e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	0a5b      	lsrs	r3, r3, #9
 8002486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800248a:	3301      	adds	r3, #1
 800248c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002498:	edd7 6a07 	vldr	s13, [r7, #28]
 800249c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a4:	ee17 3a90 	vmov	r3, s15
 80024a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
      break;
 80024b0:	e002      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024b4:	61bb      	str	r3, [r7, #24]
      break;
 80024b6:	bf00      	nop
  }

  return sysclockfreq;
 80024b8:	69bb      	ldr	r3, [r7, #24]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	58024400 	.word	0x58024400
 80024cc:	03d09000 	.word	0x03d09000
 80024d0:	003d0900 	.word	0x003d0900
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	46000000 	.word	0x46000000
 80024dc:	4c742400 	.word	0x4c742400
 80024e0:	4a742400 	.word	0x4a742400
 80024e4:	4af42400 	.word	0x4af42400

080024e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80024ee:	f7ff fe81 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_RCC_GetHCLKFreq+0x50>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490f      	ldr	r1, [pc, #60]	; (800253c <HAL_RCC_GetHCLKFreq+0x54>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	fa22 f303 	lsr.w	r3, r2, r3
 800250a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_RCC_GetHCLKFreq+0x50>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	4a09      	ldr	r2, [pc, #36]	; (800253c <HAL_RCC_GetHCLKFreq+0x54>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_RCC_GetHCLKFreq+0x58>)
 8002524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_RCC_GetHCLKFreq+0x58>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	58024400 	.word	0x58024400
 800253c:	08008830 	.word	0x08008830
 8002540:	24000004 	.word	0x24000004
 8002544:	24000000 	.word	0x24000000

08002548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800254c:	f7ff ffcc 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	58024400 	.word	0x58024400
 8002570:	08008830 	.word	0x08008830

08002574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002578:	f7ff ffb6 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58024400 	.word	0x58024400
 800259c:	08008830 	.word	0x08008830

080025a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	223f      	movs	r2, #63	; 0x3f
 80025ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <HAL_RCC_GetClockConfig+0x7c>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f003 0207 	and.w	r2, r3, #7
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_RCC_GetClockConfig+0x7c>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_RCC_GetClockConfig+0x7c>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 020f 	and.w	r2, r3, #15
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_GetClockConfig+0x7c>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_RCC_GetClockConfig+0x7c>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_GetClockConfig+0x7c>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCC_GetClockConfig+0x7c>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_GetClockConfig+0x80>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 020f 	and.w	r2, r3, #15
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	601a      	str	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	58024400 	.word	0x58024400
 8002620:	52002000 	.word	0x52002000

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002628:	b0c8      	sub	sp, #288	; 0x120
 800262a:	af00      	add	r7, sp, #0
 800262c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002630:	2300      	movs	r3, #0
 8002632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002636:	2300      	movs	r3, #0
 8002638:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800263c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002648:	2500      	movs	r5, #0
 800264a:	ea54 0305 	orrs.w	r3, r4, r5
 800264e:	d049      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002656:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800265a:	d02f      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800265c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002660:	d828      	bhi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002666:	d01a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002668:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800266c:	d822      	bhi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002676:	d007      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002678:	e01c      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800267a:	4ba7      	ldr	r3, [pc, #668]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	4aa6      	ldr	r2, [pc, #664]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002686:	e01a      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800268c:	3308      	adds	r3, #8
 800268e:	2102      	movs	r1, #2
 8002690:	4618      	mov	r0, r3
 8002692:	f001 fc43 	bl	8003f1c <RCCEx_PLL2_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800269c:	e00f      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800269e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a2:	3328      	adds	r3, #40	; 0x28
 80026a4:	2102      	movs	r1, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 fcea 	bl	8004080 <RCCEx_PLL3_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026b2:	e004      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026ba:	e000      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80026bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026c6:	4b94      	ldr	r3, [pc, #592]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80026ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d4:	4a90      	ldr	r2, [pc, #576]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6513      	str	r3, [r2, #80]	; 0x50
 80026da:	e003      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80026f0:	f04f 0900 	mov.w	r9, #0
 80026f4:	ea58 0309 	orrs.w	r3, r8, r9
 80026f8:	d047      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	2b04      	cmp	r3, #4
 8002702:	d82a      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002704:	a201      	add	r2, pc, #4	; (adr r2, 800270c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270a:	bf00      	nop
 800270c:	08002721 	.word	0x08002721
 8002710:	0800272f 	.word	0x0800272f
 8002714:	08002745 	.word	0x08002745
 8002718:	08002763 	.word	0x08002763
 800271c:	08002763 	.word	0x08002763
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002720:	4b7d      	ldr	r3, [pc, #500]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	4a7c      	ldr	r2, [pc, #496]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800272c:	e01a      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800272e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002732:	3308      	adds	r3, #8
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fbf0 	bl	8003f1c <RCCEx_PLL2_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002742:	e00f      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002748:	3328      	adds	r3, #40	; 0x28
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fc97 	bl	8004080 <RCCEx_PLL3_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002758:	e004      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002770:	f023 0107 	bic.w	r1, r3, #7
 8002774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a67      	ldr	r2, [pc, #412]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800277c:	430b      	orrs	r3, r1
 800277e:	6513      	str	r3, [r2, #80]	; 0x50
 8002780:	e003      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002782:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002786:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800278a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002796:	f04f 0b00 	mov.w	fp, #0
 800279a:	ea5a 030b 	orrs.w	r3, sl, fp
 800279e:	d054      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80027a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027aa:	d036      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80027ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027b0:	d82f      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b6:	d032      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80027b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027bc:	d829      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027be:	2bc0      	cmp	r3, #192	; 0xc0
 80027c0:	d02f      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80027c2:	2bc0      	cmp	r3, #192	; 0xc0
 80027c4:	d825      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d018      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80027ca:	2b80      	cmp	r3, #128	; 0x80
 80027cc:	d821      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d007      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80027d6:	e01c      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d8:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	4a4e      	ldr	r2, [pc, #312]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80027e4:	e01e      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ea:	3308      	adds	r3, #8
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fb94 	bl	8003f1c <RCCEx_PLL2_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80027fa:	e013      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002800:	3328      	adds	r3, #40	; 0x28
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fc3b 	bl	8004080 <RCCEx_PLL3_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002810:	e008      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002818:	e004      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002824:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800282c:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	4a37      	ldr	r2, [pc, #220]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283c:	430b      	orrs	r3, r1
 800283e:	6513      	str	r3, [r2, #80]	; 0x50
 8002840:	e003      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002842:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002846:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800284a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002856:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800285a:	2300      	movs	r3, #0
 800285c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002860:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002864:	460b      	mov	r3, r1
 8002866:	4313      	orrs	r3, r2
 8002868:	d05c      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800286a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002874:	d03b      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002876:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800287a:	d834      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800287c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002880:	d037      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002886:	d82e      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002888:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800288c:	d033      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800288e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002892:	d828      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002898:	d01a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d822      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x288>
 80028a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a8:	d007      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x296>
 80028aa:	e01c      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028b8:	e01e      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028be:	3308      	adds	r3, #8
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fb2a 	bl	8003f1c <RCCEx_PLL2_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028ce:	e013      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d4:	3328      	adds	r3, #40	; 0x28
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 fbd1 	bl	8004080 <RCCEx_PLL3_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80028e4:	e008      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028ec:	e004      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80028ee:	bf00      	nop
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80028f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	4a02      	ldr	r2, [pc, #8]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002910:	430b      	orrs	r3, r1
 8002912:	6513      	str	r3, [r2, #80]	; 0x50
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002916:	bf00      	nop
 8002918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002920:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800293a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800293e:	460b      	mov	r3, r1
 8002940:	4313      	orrs	r3, r2
 8002942:	d03a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	2b30      	cmp	r3, #48	; 0x30
 800294c:	d01f      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800294e:	2b30      	cmp	r3, #48	; 0x30
 8002950:	d819      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002952:	2b20      	cmp	r3, #32
 8002954:	d00c      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002956:	2b20      	cmp	r3, #32
 8002958:	d815      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d019      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800295e:	2b10      	cmp	r3, #16
 8002960:	d111      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002962:	4bae      	ldr	r3, [pc, #696]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	4aad      	ldr	r2, [pc, #692]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800296e:	e011      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002974:	3308      	adds	r3, #8
 8002976:	2102      	movs	r1, #2
 8002978:	4618      	mov	r0, r3
 800297a:	f001 facf 	bl	8003f1c <RCCEx_PLL2_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800298c:	e002      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002994:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800299c:	4b9f      	ldr	r3, [pc, #636]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80029a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	4a9c      	ldr	r2, [pc, #624]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029ac:	430b      	orrs	r3, r1
 80029ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b0:	e003      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80029c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4313      	orrs	r3, r2
 80029d8:	d051      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e4:	d035      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80029e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ea:	d82e      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80029ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029f0:	d031      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80029f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029f6:	d828      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80029f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fc:	d01a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80029fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a02:	d822      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0c:	d007      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a10:	4b82      	ldr	r3, [pc, #520]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4a81      	ldr	r2, [pc, #516]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a22:	3308      	adds	r3, #8
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fa78 	bl	8003f1c <RCCEx_PLL2_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a32:	e011      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a38:	3328      	adds	r3, #40	; 0x28
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 fb1f 	bl	8004080 <RCCEx_PLL3_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a48:	e006      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a50:	e002      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002a52:	bf00      	nop
 8002a54:	e000      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a60:	4b6e      	ldr	r3, [pc, #440]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a6e:	4a6b      	ldr	r2, [pc, #428]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6513      	str	r3, [r2, #80]	; 0x50
 8002a74:	e003      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	d053      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d033      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aae:	d82c      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab4:	d02f      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aba:	d826      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002abc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ac0:	d02b      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002ac2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ac6:	d820      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002acc:	d012      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ad2:	d81a      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d022      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002adc:	d115      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 fa18 	bl	8003f1c <RCCEx_PLL2_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002af2:	e015      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af8:	3328      	adds	r3, #40	; 0x28
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fabf 	bl	8004080 <RCCEx_PLL3_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b08:	e00a      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b10:	e006      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b12:	bf00      	nop
 8002b14:	e004      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b28:	4b3c      	ldr	r3, [pc, #240]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b36:	4a39      	ldr	r2, [pc, #228]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b3c:	e003      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4313      	orrs	r3, r2
 8002b64:	d060      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b6e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002b72:	d039      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002b74:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002b78:	d832      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7e:	d035      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b84:	d82c      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8a:	d031      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d826      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b96:	d02d      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002b98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b9c:	d820      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba2:	d012      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba8:	d81a      	bhi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d024      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb2:	d115      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb8:	3308      	adds	r3, #8
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f9ad 	bl	8003f1c <RCCEx_PLL2_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bc8:	e017      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bce:	3328      	adds	r3, #40	; 0x28
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fa54 	bl	8004080 <RCCEx_PLL3_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bde:	e00c      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002be6:	e008      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002be8:	bf00      	nop
 8002bea:	e006      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bec:	bf00      	nop
 8002bee:	e004      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bf0:	bf00      	nop
 8002bf2:	e002      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bf4:	bf00      	nop
 8002bf6:	e000      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10e      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c12:	4a02      	ldr	r2, [pc, #8]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002c1a:	bf00      	nop
 8002c1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002c3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c42:	460b      	mov	r3, r1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	d037      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c52:	d00e      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c58:	d816      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d018      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c62:	d111      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c64:	4bc4      	ldr	r3, [pc, #784]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	4ac3      	ldr	r2, [pc, #780]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c70:	e00f      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c76:	3308      	adds	r3, #8
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 f94e 	bl	8003f1c <RCCEx_PLL2_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c86:	e004      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c9a:	4bb7      	ldr	r3, [pc, #732]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca8:	4ab3      	ldr	r2, [pc, #716]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002caa:	430b      	orrs	r3, r1
 8002cac:	6513      	str	r3, [r2, #80]	; 0x50
 8002cae:	e003      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002cce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	d039      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d81c      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d25 	.word	0x08002d25
 8002cec:	08002cf9 	.word	0x08002cf9
 8002cf0:	08002d07 	.word	0x08002d07
 8002cf4:	08002d25 	.word	0x08002d25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf8:	4b9f      	ldr	r3, [pc, #636]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	4a9e      	ldr	r2, [pc, #632]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d04:	e00f      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 f904 	bl	8003f1c <RCCEx_PLL2_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d2e:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	f023 0103 	bic.w	r1, r3, #3
 8002d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3c:	4a8e      	ldr	r2, [pc, #568]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002d66:	460b      	mov	r3, r1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f000 8099 	beq.w	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d6e:	4b83      	ldr	r3, [pc, #524]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a82      	ldr	r2, [pc, #520]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe f943 	bl	8001004 <HAL_GetTick>
 8002d7e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d82:	e00b      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d84:	f7fe f93e 	bl	8001004 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d903      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d9a:	e005      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d9c:	4b77      	ldr	r3, [pc, #476]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ed      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002da8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d173      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002db0:	4b71      	ldr	r3, [pc, #452]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dbc:	4053      	eors	r3, r2
 8002dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d015      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc6:	4b6c      	ldr	r3, [pc, #432]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd2:	4b69      	ldr	r3, [pc, #420]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4a68      	ldr	r2, [pc, #416]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dde:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002dea:	4a63      	ldr	r2, [pc, #396]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d118      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe f900 	bl	8001004 <HAL_GetTick>
 8002e04:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e08:	e00d      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe f8fb 	bl	8001004 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e14:	1ad2      	subs	r2, r2, r3
 8002e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d903      	bls.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002e24:	e005      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e26:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0eb      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002e32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d129      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e4a:	d10e      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002e4c:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e5c:	091a      	lsrs	r2, r3, #4
 8002e5e:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6113      	str	r3, [r2, #16]
 8002e68:	e005      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e74:	6113      	str	r3, [r2, #16]
 8002e76:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e86:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002e96:	e003      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f002 0301 	and.w	r3, r2, #1
 8002eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f000 8090 	beq.w	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eca:	2b28      	cmp	r3, #40	; 0x28
 8002ecc:	d870      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002fb9 	.word	0x08002fb9
 8002ed8:	08002fb1 	.word	0x08002fb1
 8002edc:	08002fb1 	.word	0x08002fb1
 8002ee0:	08002fb1 	.word	0x08002fb1
 8002ee4:	08002fb1 	.word	0x08002fb1
 8002ee8:	08002fb1 	.word	0x08002fb1
 8002eec:	08002fb1 	.word	0x08002fb1
 8002ef0:	08002fb1 	.word	0x08002fb1
 8002ef4:	08002f85 	.word	0x08002f85
 8002ef8:	08002fb1 	.word	0x08002fb1
 8002efc:	08002fb1 	.word	0x08002fb1
 8002f00:	08002fb1 	.word	0x08002fb1
 8002f04:	08002fb1 	.word	0x08002fb1
 8002f08:	08002fb1 	.word	0x08002fb1
 8002f0c:	08002fb1 	.word	0x08002fb1
 8002f10:	08002fb1 	.word	0x08002fb1
 8002f14:	08002f9b 	.word	0x08002f9b
 8002f18:	08002fb1 	.word	0x08002fb1
 8002f1c:	08002fb1 	.word	0x08002fb1
 8002f20:	08002fb1 	.word	0x08002fb1
 8002f24:	08002fb1 	.word	0x08002fb1
 8002f28:	08002fb1 	.word	0x08002fb1
 8002f2c:	08002fb1 	.word	0x08002fb1
 8002f30:	08002fb1 	.word	0x08002fb1
 8002f34:	08002fb9 	.word	0x08002fb9
 8002f38:	08002fb1 	.word	0x08002fb1
 8002f3c:	08002fb1 	.word	0x08002fb1
 8002f40:	08002fb1 	.word	0x08002fb1
 8002f44:	08002fb1 	.word	0x08002fb1
 8002f48:	08002fb1 	.word	0x08002fb1
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	08002fb1 	.word	0x08002fb1
 8002f54:	08002fb9 	.word	0x08002fb9
 8002f58:	08002fb1 	.word	0x08002fb1
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08002fb1 	.word	0x08002fb1
 8002f64:	08002fb1 	.word	0x08002fb1
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002fb1 	.word	0x08002fb1
 8002f70:	08002fb1 	.word	0x08002fb1
 8002f74:	08002fb9 	.word	0x08002fb9
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	58024800 	.word	0x58024800
 8002f80:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f88:	3308      	adds	r3, #8
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 ffc5 	bl	8003f1c <RCCEx_PLL2_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f98:	e00f      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9e:	3328      	adds	r3, #40	; 0x28
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 f86c 	bl	8004080 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fae:	e004      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fb6:	e000      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fc2:	4bc0      	ldr	r3, [pc, #768]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd2:	4abc      	ldr	r2, [pc, #752]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6553      	str	r3, [r2, #84]	; 0x54
 8002fd8:	e003      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f002 0302 	and.w	r3, r2, #2
 8002fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ff8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4313      	orrs	r3, r2
 8003000:	d043      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300a:	2b05      	cmp	r3, #5
 800300c:	d824      	bhi.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003061 	.word	0x08003061
 8003018:	0800302d 	.word	0x0800302d
 800301c:	08003043 	.word	0x08003043
 8003020:	08003061 	.word	0x08003061
 8003024:	08003061 	.word	0x08003061
 8003028:	08003061 	.word	0x08003061
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800302c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003030:	3308      	adds	r3, #8
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f000 ff71 	bl	8003f1c <RCCEx_PLL2_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003040:	e00f      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003046:	3328      	adds	r3, #40	; 0x28
 8003048:	2101      	movs	r1, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f001 f818 	bl	8004080 <RCCEx_PLL3_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003056:	e004      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800305e:	e000      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003062:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800306a:	4b96      	ldr	r3, [pc, #600]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f023 0107 	bic.w	r1, r3, #7
 8003072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	4a92      	ldr	r2, [pc, #584]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800307c:	430b      	orrs	r3, r1
 800307e:	6553      	str	r3, [r2, #84]	; 0x54
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003082:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003086:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800308a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f002 0304 	and.w	r3, r2, #4
 8003096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4313      	orrs	r3, r2
 80030a8:	d043      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d824      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	08003109 	.word	0x08003109
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030eb 	.word	0x080030eb
 80030c8:	08003109 	.word	0x08003109
 80030cc:	08003109 	.word	0x08003109
 80030d0:	08003109 	.word	0x08003109
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d8:	3308      	adds	r3, #8
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 ff1d 	bl	8003f1c <RCCEx_PLL2_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030e8:	e00f      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ee:	3328      	adds	r3, #40	; 0x28
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 ffc4 	bl	8004080 <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030fe:	e004      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003112:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	f023 0107 	bic.w	r1, r3, #7
 800311a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003122:	4a68      	ldr	r2, [pc, #416]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003124:	430b      	orrs	r3, r1
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800312e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f002 0320 	and.w	r3, r2, #32
 800313e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800314c:	460b      	mov	r3, r1
 800314e:	4313      	orrs	r3, r2
 8003150:	d055      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315e:	d033      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003164:	d82c      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316a:	d02f      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d826      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003172:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003176:	d02b      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003178:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800317c:	d820      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800317e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003182:	d012      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003188:	d81a      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d022      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800318e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003192:	d115      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003198:	3308      	adds	r3, #8
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f000 febd 	bl	8003f1c <RCCEx_PLL2_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031a8:	e015      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ae:	3328      	adds	r3, #40	; 0x28
 80031b0:	2102      	movs	r1, #2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 ff64 	bl	8004080 <RCCEx_PLL3_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031be:	e00a      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031c6:	e006      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031c8:	bf00      	nop
 80031ca:	e004      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031cc:	bf00      	nop
 80031ce:	e002      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031d0:	bf00      	nop
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80031d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031de:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80031e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ee:	4a35      	ldr	r2, [pc, #212]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6553      	str	r3, [r2, #84]	; 0x54
 80031f4:	e003      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800320a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003214:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003218:	460b      	mov	r3, r1
 800321a:	4313      	orrs	r3, r2
 800321c:	d058      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800321e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003226:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800322a:	d033      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800322c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003230:	d82c      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	d02f      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d826      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800323e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003242:	d02b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003248:	d820      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800324a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324e:	d012      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003254:	d81a      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d022      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325e:	d115      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003264:	3308      	adds	r3, #8
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fe57 	bl	8003f1c <RCCEx_PLL2_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003274:	e015      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327a:	3328      	adds	r3, #40	; 0x28
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fefe 	bl	8004080 <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800328a:	e00a      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003292:	e006      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003294:	bf00      	nop
 8003296:	e004      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003298:	bf00      	nop
 800329a:	e002      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800329c:	bf00      	nop
 800329e:	e000      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80032a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10e      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80032b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032ba:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6593      	str	r3, [r2, #88]	; 0x58
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80032dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80032ea:	460b      	mov	r3, r1
 80032ec:	4313      	orrs	r3, r2
 80032ee:	d055      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032fc:	d033      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80032fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003302:	d82c      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003308:	d02f      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330e:	d826      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003310:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003314:	d02b      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003316:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800331a:	d820      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800331c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003320:	d012      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003326:	d81a      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d022      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800332c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003330:	d115      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003336:	3308      	adds	r3, #8
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fdee 	bl	8003f1c <RCCEx_PLL2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003346:	e015      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334c:	3328      	adds	r3, #40	; 0x28
 800334e:	2102      	movs	r1, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fe95 	bl	8004080 <RCCEx_PLL3_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800335c:	e00a      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003364:	e006      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003366:	bf00      	nop
 8003368:	e004      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003374:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800337c:	4ba1      	ldr	r3, [pc, #644]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003388:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800338c:	4a9d      	ldr	r2, [pc, #628]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800338e:	430b      	orrs	r3, r1
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003398:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800339c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f002 0308 	and.w	r3, r2, #8
 80033a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80033b6:	460b      	mov	r3, r1
 80033b8:	4313      	orrs	r3, r2
 80033ba:	d01e      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ce:	3328      	adds	r3, #40	; 0x28
 80033d0:	2102      	movs	r1, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fe54 	bl	8004080 <RCCEx_PLL3_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033e4:	4b87      	ldr	r3, [pc, #540]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	4a83      	ldr	r2, [pc, #524]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033f6:	430b      	orrs	r3, r1
 80033f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f002 0310 	and.w	r3, r2, #16
 8003406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003410:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003414:	460b      	mov	r3, r1
 8003416:	4313      	orrs	r3, r2
 8003418:	d01e      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800341a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003426:	d10c      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342c:	3328      	adds	r3, #40	; 0x28
 800342e:	2102      	movs	r1, #2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fe25 	bl	8004080 <RCCEx_PLL3_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003442:	4b70      	ldr	r3, [pc, #448]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800344a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800344e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003452:	4a6c      	ldr	r2, [pc, #432]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003454:	430b      	orrs	r3, r1
 8003456:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800346e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003472:	460b      	mov	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	d03e      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003484:	d022      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800348a:	d81b      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d00b      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003496:	e015      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349c:	3308      	adds	r3, #8
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fd3b 	bl	8003f1c <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034ac:	e00f      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b2:	3328      	adds	r3, #40	; 0x28
 80034b4:	2102      	movs	r1, #2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fde2 	bl	8004080 <RCCEx_PLL3_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80034cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034e6:	4a47      	ldr	r2, [pc, #284]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6593      	str	r3, [r2, #88]	; 0x58
 80034ec:	e003      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003502:	67bb      	str	r3, [r7, #120]	; 0x78
 8003504:	2300      	movs	r3, #0
 8003506:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003508:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800351e:	d01f      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003520:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003524:	d818      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352a:	d003      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800352c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003530:	d007      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4a32      	ldr	r2, [pc, #200]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800353a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003540:	e00f      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003546:	3328      	adds	r3, #40	; 0x28
 8003548:	2101      	movs	r1, #1
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fd98 	bl	8004080 <RCCEx_PLL3_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003556:	e004      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800355e:	e000      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003562:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	4a22      	ldr	r2, [pc, #136]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800357c:	430b      	orrs	r3, r1
 800357e:	6553      	str	r3, [r2, #84]	; 0x54
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003582:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003586:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800358a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003596:	673b      	str	r3, [r7, #112]	; 0x70
 8003598:	2300      	movs	r3, #0
 800359a:	677b      	str	r3, [r7, #116]	; 0x74
 800359c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80035a0:	460b      	mov	r3, r1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	d034      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d007      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80035b6:	e011      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4a11      	ldr	r2, [pc, #68]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035c4:	e00e      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ca:	3308      	adds	r3, #8
 80035cc:	2102      	movs	r1, #2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fca4 	bl	8003f1c <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	4a02      	ldr	r2, [pc, #8]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800360c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800361c:	66bb      	str	r3, [r7, #104]	; 0x68
 800361e:	2300      	movs	r3, #0
 8003620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003622:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d00c      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003630:	3328      	adds	r3, #40	; 0x28
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fd23 	bl	8004080 <RCCEx_PLL3_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003652:	663b      	str	r3, [r7, #96]	; 0x60
 8003654:	2300      	movs	r3, #0
 8003656:	667b      	str	r3, [r7, #100]	; 0x64
 8003658:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800365c:	460b      	mov	r3, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	d038      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800366e:	d018      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003674:	d811      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367a:	d014      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d80b      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d011      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368a:	d106      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368c:	4bc3      	ldr	r3, [pc, #780]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	4ac2      	ldr	r2, [pc, #776]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003698:	e008      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036a0:	e004      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80036aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b4:	4bb9      	ldr	r3, [pc, #740]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	4ab5      	ldr	r2, [pc, #724]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036c6:	430b      	orrs	r3, r1
 80036c8:	6553      	str	r3, [r2, #84]	; 0x54
 80036ca:	e003      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80036e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80036e2:	2300      	movs	r3, #0
 80036e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036f0:	4baa      	ldr	r3, [pc, #680]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fe:	4aa7      	ldr	r2, [pc, #668]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003700:	430b      	orrs	r3, r1
 8003702:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
 8003712:	2300      	movs	r3, #0
 8003714:	657b      	str	r3, [r7, #84]	; 0x54
 8003716:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800371a:	460b      	mov	r3, r1
 800371c:	4313      	orrs	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003720:	4b9e      	ldr	r3, [pc, #632]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a9b      	ldr	r2, [pc, #620]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003730:	430b      	orrs	r3, r1
 8003732:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003740:	64bb      	str	r3, [r7, #72]	; 0x48
 8003742:	2300      	movs	r3, #0
 8003744:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003746:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800374a:	460b      	mov	r3, r1
 800374c:	4313      	orrs	r3, r2
 800374e:	d009      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003750:	4b92      	ldr	r3, [pc, #584]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375e:	4a8f      	ldr	r2, [pc, #572]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003770:	643b      	str	r3, [r7, #64]	; 0x40
 8003772:	2300      	movs	r3, #0
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
 8003776:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003780:	4b86      	ldr	r3, [pc, #536]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	4a85      	ldr	r2, [pc, #532]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003786:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800378a:	6113      	str	r3, [r2, #16]
 800378c:	4b83      	ldr	r3, [pc, #524]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800378e:	6919      	ldr	r1, [r3, #16]
 8003790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003798:	4a80      	ldr	r2, [pc, #512]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800379a:	430b      	orrs	r3, r1
 800379c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800379e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ac:	2300      	movs	r3, #0
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80037b4:	460b      	mov	r3, r1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037ba:	4b78      	ldr	r3, [pc, #480]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	4a74      	ldr	r2, [pc, #464]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
 80037dc:	2300      	movs	r3, #0
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
 80037e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80037e4:	460b      	mov	r3, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80037f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	4a68      	ldr	r2, [pc, #416]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	2100      	movs	r1, #0
 800380a:	62b9      	str	r1, [r7, #40]	; 0x28
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003812:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003816:	460b      	mov	r3, r1
 8003818:	4313      	orrs	r3, r2
 800381a:	d011      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800381c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003820:	3308      	adds	r3, #8
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fb79 	bl	8003f1c <RCCEx_PLL2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800383c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	2100      	movs	r1, #0
 800384a:	6239      	str	r1, [r7, #32]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d011      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003860:	3308      	adds	r3, #8
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fb59 	bl	8003f1c <RCCEx_PLL2_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003870:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800387c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	2100      	movs	r1, #0
 800388a:	61b9      	str	r1, [r7, #24]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d011      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800389c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a0:	3308      	adds	r3, #8
 80038a2:	2102      	movs	r1, #2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fb39 	bl	8003f1c <RCCEx_PLL2_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	2100      	movs	r1, #0
 80038ca:	6139      	str	r1, [r7, #16]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d011      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e0:	3328      	adds	r3, #40	; 0x28
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fbcb 	bl	8004080 <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80038f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	2100      	movs	r1, #0
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	d011      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800391c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003920:	3328      	adds	r3, #40	; 0x28
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fbab 	bl	8004080 <RCCEx_PLL3_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003930:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800393c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	2100      	movs	r1, #0
 800394a:	6039      	str	r1, [r7, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d011      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800395c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003960:	3328      	adds	r3, #40	; 0x28
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fb8b 	bl	8004080 <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800397c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003980:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
}
 800398e:	4618      	mov	r0, r3
 8003990:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003994:	46bd      	mov	sp, r7
 8003996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399a:	bf00      	nop
 800399c:	58024400 	.word	0x58024400

080039a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80039a4:	f7fe fda0 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	58024400 	.word	0x58024400
 80039c8:	08008830 	.word	0x08008830

080039cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	; 0x24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039d4:	4ba1      	ldr	r3, [pc, #644]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039de:	4b9f      	ldr	r3, [pc, #636]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	0b1b      	lsrs	r3, r3, #12
 80039e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039ea:	4b9c      	ldr	r3, [pc, #624]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039f6:	4b99      	ldr	r3, [pc, #612]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	08db      	lsrs	r3, r3, #3
 80039fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 8111 	beq.w	8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	f000 8083 	beq.w	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	f200 80a1 	bhi.w	8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d056      	beq.n	8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a36:	e099      	b.n	8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a38:	4b88      	ldr	r3, [pc, #544]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02d      	beq.n	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a44:	4b85      	ldr	r3, [pc, #532]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	08db      	lsrs	r3, r3, #3
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	4a84      	ldr	r2, [pc, #528]	; (8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	ee07 3a90 	vmov	s15, r3
 8003a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6e:	4b7b      	ldr	r3, [pc, #492]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a9e:	e087      	b.n	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ae2:	e065      	b.n	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b59      	ldr	r3, [pc, #356]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	e043      	b.n	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b48      	ldr	r3, [pc, #288]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6a:	e021      	b.n	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	0a5b      	lsrs	r3, r3, #9
 8003bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd6:	ee17 2a90 	vmov	r2, s15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c04:	ee17 2a90 	vmov	r2, s15
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	0e1b      	lsrs	r3, r3, #24
 8003c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c32:	ee17 2a90 	vmov	r2, s15
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c3a:	e008      	b.n	8003c4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
}
 8003c4e:	bf00      	nop
 8003c50:	3724      	adds	r7, #36	; 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	03d09000 	.word	0x03d09000
 8003c64:	46000000 	.word	0x46000000
 8003c68:	4c742400 	.word	0x4c742400
 8003c6c:	4a742400 	.word	0x4a742400
 8003c70:	4af42400 	.word	0x4af42400

08003c74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c7c:	4ba1      	ldr	r3, [pc, #644]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c86:	4b9f      	ldr	r3, [pc, #636]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	0d1b      	lsrs	r3, r3, #20
 8003c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c92:	4b9c      	ldr	r3, [pc, #624]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c9e:	4b99      	ldr	r3, [pc, #612]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	08db      	lsrs	r3, r3, #3
 8003ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8111 	beq.w	8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f000 8083 	beq.w	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	f200 80a1 	bhi.w	8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d056      	beq.n	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cde:	e099      	b.n	8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ce0:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d02d      	beq.n	8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cec:	4b85      	ldr	r3, [pc, #532]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	08db      	lsrs	r3, r3, #3
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	4a84      	ldr	r2, [pc, #528]	; (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	ee07 3a90 	vmov	s15, r3
 8003d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b7b      	ldr	r3, [pc, #492]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d46:	e087      	b.n	8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d8a:	e065      	b.n	8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9e:	4b59      	ldr	r3, [pc, #356]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003db2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dce:	e043      	b.n	8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de2:	4b48      	ldr	r3, [pc, #288]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e12:	e021      	b.n	8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e26:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e58:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	0a5b      	lsrs	r3, r3, #9
 8003e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7e:	ee17 2a90 	vmov	r2, s15
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e86:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	0c1b      	lsrs	r3, r3, #16
 8003e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eac:	ee17 2a90 	vmov	r2, s15
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	0e1b      	lsrs	r3, r3, #24
 8003eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eda:	ee17 2a90 	vmov	r2, s15
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
}
 8003ef6:	bf00      	nop
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	58024400 	.word	0x58024400
 8003f08:	03d09000 	.word	0x03d09000
 8003f0c:	46000000 	.word	0x46000000
 8003f10:	4c742400 	.word	0x4c742400
 8003f14:	4a742400 	.word	0x4a742400
 8003f18:	4af42400 	.word	0x4af42400

08003f1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f2a:	4b53      	ldr	r3, [pc, #332]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d101      	bne.n	8003f3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e099      	b.n	800406e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f3a:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a4e      	ldr	r2, [pc, #312]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003f40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f46:	f7fd f85d 	bl	8001004 <HAL_GetTick>
 8003f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f4e:	f7fd f859 	bl	8001004 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e086      	b.n	800406e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f60:	4b45      	ldr	r3, [pc, #276]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	493f      	ldr	r1, [pc, #252]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	628b      	str	r3, [r1, #40]	; 0x28
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	025b      	lsls	r3, r3, #9
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fb0:	4931      	ldr	r1, [pc, #196]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	492d      	ldr	r1, [pc, #180]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	f023 0220 	bic.w	r2, r3, #32
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	4928      	ldr	r1, [pc, #160]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fe0:	f023 0310 	bic.w	r3, r3, #16
 8003fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <RCCEx_PLL2_Config+0x160>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	69d2      	ldr	r2, [r2, #28]
 8003ff2:	00d2      	lsls	r2, r2, #3
 8003ff4:	4920      	ldr	r1, [pc, #128]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004000:	f043 0310 	orr.w	r3, r3, #16
 8004004:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004012:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004018:	e00f      	b.n	800403a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004020:	4b15      	ldr	r3, [pc, #84]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800402a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800402c:	e005      	b.n	800403a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	4a11      	ldr	r2, [pc, #68]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004038:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800403a:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a0e      	ldr	r2, [pc, #56]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004040:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004046:	f7fc ffdd 	bl	8001004 <HAL_GetTick>
 800404a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800404c:	e008      	b.n	8004060 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800404e:	f7fc ffd9 	bl	8001004 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <RCCEx_PLL2_Config+0x15c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
 800407c:	ffff0007 	.word	0xffff0007

08004080 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800408e:	4b53      	ldr	r3, [pc, #332]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b03      	cmp	r3, #3
 8004098:	d101      	bne.n	800409e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e099      	b.n	80041d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800409e:	4b4f      	ldr	r3, [pc, #316]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a4e      	ldr	r2, [pc, #312]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040aa:	f7fc ffab 	bl	8001004 <HAL_GetTick>
 80040ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040b2:	f7fc ffa7 	bl	8001004 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e086      	b.n	80041d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040c4:	4b45      	ldr	r3, [pc, #276]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040d0:	4b42      	ldr	r3, [pc, #264]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	051b      	lsls	r3, r3, #20
 80040de:	493f      	ldr	r1, [pc, #252]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	628b      	str	r3, [r1, #40]	; 0x28
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	025b      	lsls	r3, r3, #9
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	3b01      	subs	r3, #1
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004114:	4931      	ldr	r1, [pc, #196]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800411a:	4b30      	ldr	r3, [pc, #192]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	492d      	ldr	r1, [pc, #180]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4928      	ldr	r1, [pc, #160]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800413e:	4b27      	ldr	r3, [pc, #156]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	4a26      	ldr	r2, [pc, #152]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 800414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <RCCEx_PLL3_Config+0x160>)
 8004150:	4013      	ands	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	69d2      	ldr	r2, [r2, #28]
 8004156:	00d2      	lsls	r2, r2, #3
 8004158:	4920      	ldr	r1, [pc, #128]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	4a19      	ldr	r2, [pc, #100]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800417a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800417c:	e00f      	b.n	800419e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d106      	bne.n	8004192 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 800418a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800418e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004190:	e005      	b.n	800419e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	4a11      	ldr	r2, [pc, #68]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 8004198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041aa:	f7fc ff2b 	bl	8001004 <HAL_GetTick>
 80041ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041b0:	e008      	b.n	80041c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041b2:	f7fc ff27 	bl	8001004 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e006      	b.n	80041d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <RCCEx_PLL3_Config+0x15c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
 80041e0:	ffff0007 	.word	0xffff0007

080041e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e049      	b.n	800428a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f841 	bl	8004292 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 fa00 	bl	8004628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d001      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e054      	b.n	800436a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a26      	ldr	r2, [pc, #152]	; (8004378 <HAL_TIM_Base_Start_IT+0xd0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d022      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x80>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d01d      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x80>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a22      	ldr	r2, [pc, #136]	; (800437c <HAL_TIM_Base_Start_IT+0xd4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x80>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <HAL_TIM_Base_Start_IT+0xd8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x80>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_TIM_Base_Start_IT+0xdc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x80>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <HAL_TIM_Base_Start_IT+0xe0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x80>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_TIM_Base_Start_IT+0xe4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x80>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_TIM_Base_Start_IT+0xe8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d115      	bne.n	8004354 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_TIM_Base_Start_IT+0xec>)
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b06      	cmp	r3, #6
 8004338:	d015      	beq.n	8004366 <HAL_TIM_Base_Start_IT+0xbe>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d011      	beq.n	8004366 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	e008      	b.n	8004366 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e000      	b.n	8004368 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40010400 	.word	0x40010400
 800438c:	40001800 	.word	0x40001800
 8004390:	40014000 	.word	0x40014000
 8004394:	00010007 	.word	0x00010007

08004398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0202 	mvn.w	r2, #2
 80043c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f905 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8f7 	bl	80045d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f908 	bl	80045fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0204 	mvn.w	r2, #4
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8db 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8cd 	bl	80045d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8de 	bl	80045fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0208 	mvn.w	r2, #8
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2204      	movs	r2, #4
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8b1 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8a3 	bl	80045d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f8b4 	bl	80045fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0210 	mvn.w	r2, #16
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2208      	movs	r2, #8
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f887 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f879 	bl	80045d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f88a 	bl	80045fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10e      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fac4 	bl	8000aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d10e      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d107      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f914 	bl	8004770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004556:	d10e      	bne.n	8004576 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d107      	bne.n	8004576 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800456e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f907 	bl	8004784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d10e      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d107      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800459a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f838 	bl	8004612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d10e      	bne.n	80045ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d107      	bne.n	80045ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0220 	mvn.w	r2, #32
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8c7 	bl	800475c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a40      	ldr	r2, [pc, #256]	; (800473c <TIM_Base_SetConfig+0x114>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d013      	beq.n	8004668 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d00f      	beq.n	8004668 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a3d      	ldr	r2, [pc, #244]	; (8004740 <TIM_Base_SetConfig+0x118>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00b      	beq.n	8004668 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a3c      	ldr	r2, [pc, #240]	; (8004744 <TIM_Base_SetConfig+0x11c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0x40>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a3b      	ldr	r2, [pc, #236]	; (8004748 <TIM_Base_SetConfig+0x120>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0x40>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a3a      	ldr	r2, [pc, #232]	; (800474c <TIM_Base_SetConfig+0x124>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d108      	bne.n	800467a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2f      	ldr	r2, [pc, #188]	; (800473c <TIM_Base_SetConfig+0x114>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01f      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d01b      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <TIM_Base_SetConfig+0x118>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d017      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <TIM_Base_SetConfig+0x11c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2a      	ldr	r2, [pc, #168]	; (8004748 <TIM_Base_SetConfig+0x120>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00f      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a29      	ldr	r2, [pc, #164]	; (800474c <TIM_Base_SetConfig+0x124>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a28      	ldr	r2, [pc, #160]	; (8004750 <TIM_Base_SetConfig+0x128>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a27      	ldr	r2, [pc, #156]	; (8004754 <TIM_Base_SetConfig+0x12c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_Base_SetConfig+0x9a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a26      	ldr	r2, [pc, #152]	; (8004758 <TIM_Base_SetConfig+0x130>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a10      	ldr	r2, [pc, #64]	; (800473c <TIM_Base_SetConfig+0x114>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00f      	beq.n	8004720 <TIM_Base_SetConfig+0xf8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a12      	ldr	r2, [pc, #72]	; (800474c <TIM_Base_SetConfig+0x124>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00b      	beq.n	8004720 <TIM_Base_SetConfig+0xf8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a11      	ldr	r2, [pc, #68]	; (8004750 <TIM_Base_SetConfig+0x128>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_Base_SetConfig+0xf8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <TIM_Base_SetConfig+0x12c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_Base_SetConfig+0xf8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <TIM_Base_SetConfig+0x130>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d103      	bne.n	8004728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	615a      	str	r2, [r3, #20]
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e042      	b.n	8004830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fc f9a3 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2224      	movs	r2, #36	; 0x24
 80047c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f82c 	bl	8004838 <UART_SetConfig>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e022      	b.n	8004830 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fe8c 	bl	8005510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 ff13 	bl	8005654 <UART_CheckIdleState>
 800482e:	4603      	mov	r3, r0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b092      	sub	sp, #72	; 0x48
 800483e:	af00      	add	r7, sp, #0
 8004840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	431a      	orrs	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	431a      	orrs	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4313      	orrs	r3, r2
 800485e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4bbe      	ldr	r3, [pc, #760]	; (8004b60 <UART_SetConfig+0x328>)
 8004868:	4013      	ands	r3, r2
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004870:	430b      	orrs	r3, r1
 8004872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4ab3      	ldr	r2, [pc, #716]	; (8004b64 <UART_SetConfig+0x32c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048a0:	4313      	orrs	r3, r2
 80048a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	4baf      	ldr	r3, [pc, #700]	; (8004b68 <UART_SetConfig+0x330>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048b4:	430b      	orrs	r3, r1
 80048b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	f023 010f 	bic.w	r1, r3, #15
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4aa6      	ldr	r2, [pc, #664]	; (8004b6c <UART_SetConfig+0x334>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d177      	bne.n	80049c8 <UART_SetConfig+0x190>
 80048d8:	4ba5      	ldr	r3, [pc, #660]	; (8004b70 <UART_SetConfig+0x338>)
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048e0:	2b28      	cmp	r3, #40	; 0x28
 80048e2:	d86d      	bhi.n	80049c0 <UART_SetConfig+0x188>
 80048e4:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0xb4>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004991 	.word	0x08004991
 80048f0:	080049c1 	.word	0x080049c1
 80048f4:	080049c1 	.word	0x080049c1
 80048f8:	080049c1 	.word	0x080049c1
 80048fc:	080049c1 	.word	0x080049c1
 8004900:	080049c1 	.word	0x080049c1
 8004904:	080049c1 	.word	0x080049c1
 8004908:	080049c1 	.word	0x080049c1
 800490c:	08004999 	.word	0x08004999
 8004910:	080049c1 	.word	0x080049c1
 8004914:	080049c1 	.word	0x080049c1
 8004918:	080049c1 	.word	0x080049c1
 800491c:	080049c1 	.word	0x080049c1
 8004920:	080049c1 	.word	0x080049c1
 8004924:	080049c1 	.word	0x080049c1
 8004928:	080049c1 	.word	0x080049c1
 800492c:	080049a1 	.word	0x080049a1
 8004930:	080049c1 	.word	0x080049c1
 8004934:	080049c1 	.word	0x080049c1
 8004938:	080049c1 	.word	0x080049c1
 800493c:	080049c1 	.word	0x080049c1
 8004940:	080049c1 	.word	0x080049c1
 8004944:	080049c1 	.word	0x080049c1
 8004948:	080049c1 	.word	0x080049c1
 800494c:	080049a9 	.word	0x080049a9
 8004950:	080049c1 	.word	0x080049c1
 8004954:	080049c1 	.word	0x080049c1
 8004958:	080049c1 	.word	0x080049c1
 800495c:	080049c1 	.word	0x080049c1
 8004960:	080049c1 	.word	0x080049c1
 8004964:	080049c1 	.word	0x080049c1
 8004968:	080049c1 	.word	0x080049c1
 800496c:	080049b1 	.word	0x080049b1
 8004970:	080049c1 	.word	0x080049c1
 8004974:	080049c1 	.word	0x080049c1
 8004978:	080049c1 	.word	0x080049c1
 800497c:	080049c1 	.word	0x080049c1
 8004980:	080049c1 	.word	0x080049c1
 8004984:	080049c1 	.word	0x080049c1
 8004988:	080049c1 	.word	0x080049c1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004996:	e326      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004998:	2304      	movs	r3, #4
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499e:	e322      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 80049a0:	2308      	movs	r3, #8
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a6:	e31e      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 80049a8:	2310      	movs	r3, #16
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ae:	e31a      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 80049b0:	2320      	movs	r3, #32
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b6:	e316      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 80049b8:	2340      	movs	r3, #64	; 0x40
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049be:	e312      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 80049c0:	2380      	movs	r3, #128	; 0x80
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c6:	e30e      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <UART_SetConfig+0x33c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d130      	bne.n	8004a34 <UART_SetConfig+0x1fc>
 80049d2:	4b67      	ldr	r3, [pc, #412]	; (8004b70 <UART_SetConfig+0x338>)
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d826      	bhi.n	8004a2c <UART_SetConfig+0x1f4>
 80049de:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <UART_SetConfig+0x1ac>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	080049fd 	.word	0x080049fd
 80049e8:	08004a05 	.word	0x08004a05
 80049ec:	08004a0d 	.word	0x08004a0d
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a02:	e2f0      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0a:	e2ec      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a12:	e2e8      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1a:	e2e4      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a22:	e2e0      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a24:	2340      	movs	r3, #64	; 0x40
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2a:	e2dc      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e2d8      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a4f      	ldr	r2, [pc, #316]	; (8004b78 <UART_SetConfig+0x340>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d130      	bne.n	8004aa0 <UART_SetConfig+0x268>
 8004a3e:	4b4c      	ldr	r3, [pc, #304]	; (8004b70 <UART_SetConfig+0x338>)
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d826      	bhi.n	8004a98 <UART_SetConfig+0x260>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x218>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a69 	.word	0x08004a69
 8004a54:	08004a71 	.word	0x08004a71
 8004a58:	08004a79 	.word	0x08004a79
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6e:	e2ba      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a76:	e2b6      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7e:	e2b2      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a86:	e2ae      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a88:	2320      	movs	r3, #32
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8e:	e2aa      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a90:	2340      	movs	r3, #64	; 0x40
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a96:	e2a6      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e2a2      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a35      	ldr	r2, [pc, #212]	; (8004b7c <UART_SetConfig+0x344>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d130      	bne.n	8004b0c <UART_SetConfig+0x2d4>
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <UART_SetConfig+0x338>)
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d826      	bhi.n	8004b04 <UART_SetConfig+0x2cc>
 8004ab6:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <UART_SetConfig+0x284>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004ad5 	.word	0x08004ad5
 8004ac0:	08004add 	.word	0x08004add
 8004ac4:	08004ae5 	.word	0x08004ae5
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004af5 	.word	0x08004af5
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ada:	e284      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae2:	e280      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aea:	e27c      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af2:	e278      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004af4:	2320      	movs	r3, #32
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afa:	e274      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004afc:	2340      	movs	r3, #64	; 0x40
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b02:	e270      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e26c      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <UART_SetConfig+0x348>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d142      	bne.n	8004b9c <UART_SetConfig+0x364>
 8004b16:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <UART_SetConfig+0x338>)
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d838      	bhi.n	8004b94 <UART_SetConfig+0x35c>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <UART_SetConfig+0x2f0>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b41 	.word	0x08004b41
 8004b2c:	08004b49 	.word	0x08004b49
 8004b30:	08004b51 	.word	0x08004b51
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b85 	.word	0x08004b85
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b46:	e24e      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4e:	e24a      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b50:	2308      	movs	r3, #8
 8004b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b56:	e246      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5e:	e242      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b60:	cfff69f3 	.word	0xcfff69f3
 8004b64:	58000c00 	.word	0x58000c00
 8004b68:	11fff4ff 	.word	0x11fff4ff
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	58024400 	.word	0x58024400
 8004b74:	40004400 	.word	0x40004400
 8004b78:	40004800 	.word	0x40004800
 8004b7c:	40004c00 	.word	0x40004c00
 8004b80:	40005000 	.word	0x40005000
 8004b84:	2320      	movs	r3, #32
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8a:	e22c      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b8c:	2340      	movs	r3, #64	; 0x40
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b92:	e228      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9a:	e224      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4ab1      	ldr	r2, [pc, #708]	; (8004e68 <UART_SetConfig+0x630>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d176      	bne.n	8004c94 <UART_SetConfig+0x45c>
 8004ba6:	4bb1      	ldr	r3, [pc, #708]	; (8004e6c <UART_SetConfig+0x634>)
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bae:	2b28      	cmp	r3, #40	; 0x28
 8004bb0:	d86c      	bhi.n	8004c8c <UART_SetConfig+0x454>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x380>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004c5d 	.word	0x08004c5d
 8004bbc:	08004c8d 	.word	0x08004c8d
 8004bc0:	08004c8d 	.word	0x08004c8d
 8004bc4:	08004c8d 	.word	0x08004c8d
 8004bc8:	08004c8d 	.word	0x08004c8d
 8004bcc:	08004c8d 	.word	0x08004c8d
 8004bd0:	08004c8d 	.word	0x08004c8d
 8004bd4:	08004c8d 	.word	0x08004c8d
 8004bd8:	08004c65 	.word	0x08004c65
 8004bdc:	08004c8d 	.word	0x08004c8d
 8004be0:	08004c8d 	.word	0x08004c8d
 8004be4:	08004c8d 	.word	0x08004c8d
 8004be8:	08004c8d 	.word	0x08004c8d
 8004bec:	08004c8d 	.word	0x08004c8d
 8004bf0:	08004c8d 	.word	0x08004c8d
 8004bf4:	08004c8d 	.word	0x08004c8d
 8004bf8:	08004c6d 	.word	0x08004c6d
 8004bfc:	08004c8d 	.word	0x08004c8d
 8004c00:	08004c8d 	.word	0x08004c8d
 8004c04:	08004c8d 	.word	0x08004c8d
 8004c08:	08004c8d 	.word	0x08004c8d
 8004c0c:	08004c8d 	.word	0x08004c8d
 8004c10:	08004c8d 	.word	0x08004c8d
 8004c14:	08004c8d 	.word	0x08004c8d
 8004c18:	08004c75 	.word	0x08004c75
 8004c1c:	08004c8d 	.word	0x08004c8d
 8004c20:	08004c8d 	.word	0x08004c8d
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c8d 	.word	0x08004c8d
 8004c2c:	08004c8d 	.word	0x08004c8d
 8004c30:	08004c8d 	.word	0x08004c8d
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004c7d 	.word	0x08004c7d
 8004c3c:	08004c8d 	.word	0x08004c8d
 8004c40:	08004c8d 	.word	0x08004c8d
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004c8d 	.word	0x08004c8d
 8004c4c:	08004c8d 	.word	0x08004c8d
 8004c50:	08004c8d 	.word	0x08004c8d
 8004c54:	08004c8d 	.word	0x08004c8d
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c62:	e1c0      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004c64:	2304      	movs	r3, #4
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6a:	e1bc      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c72:	e1b8      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004c74:	2310      	movs	r3, #16
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7a:	e1b4      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e1b0      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004c84:	2340      	movs	r3, #64	; 0x40
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e1ac      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e1a8      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a75      	ldr	r2, [pc, #468]	; (8004e70 <UART_SetConfig+0x638>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d130      	bne.n	8004d00 <UART_SetConfig+0x4c8>
 8004c9e:	4b73      	ldr	r3, [pc, #460]	; (8004e6c <UART_SetConfig+0x634>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d826      	bhi.n	8004cf8 <UART_SetConfig+0x4c0>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x478>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cd1 	.word	0x08004cd1
 8004cb8:	08004cd9 	.word	0x08004cd9
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cce:	e18a      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e186      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e182      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e17e      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004ce8:	2320      	movs	r3, #32
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e17a      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004cf0:	2340      	movs	r3, #64	; 0x40
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e176      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e172      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a5b      	ldr	r2, [pc, #364]	; (8004e74 <UART_SetConfig+0x63c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d130      	bne.n	8004d6c <UART_SetConfig+0x534>
 8004d0a:	4b58      	ldr	r3, [pc, #352]	; (8004e6c <UART_SetConfig+0x634>)
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d826      	bhi.n	8004d64 <UART_SetConfig+0x52c>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x4e4>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d35 	.word	0x08004d35
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5d 	.word	0x08004d5d
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3a:	e154      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e150      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e14c      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e148      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d54:	2320      	movs	r3, #32
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e144      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d5c:	2340      	movs	r3, #64	; 0x40
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e140      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e13c      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a41      	ldr	r2, [pc, #260]	; (8004e78 <UART_SetConfig+0x640>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f040 8082 	bne.w	8004e7c <UART_SetConfig+0x644>
 8004d78:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <UART_SetConfig+0x634>)
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d80:	2b28      	cmp	r3, #40	; 0x28
 8004d82:	d86d      	bhi.n	8004e60 <UART_SetConfig+0x628>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x554>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e61 	.word	0x08004e61
 8004d94:	08004e61 	.word	0x08004e61
 8004d98:	08004e61 	.word	0x08004e61
 8004d9c:	08004e61 	.word	0x08004e61
 8004da0:	08004e61 	.word	0x08004e61
 8004da4:	08004e61 	.word	0x08004e61
 8004da8:	08004e61 	.word	0x08004e61
 8004dac:	08004e39 	.word	0x08004e39
 8004db0:	08004e61 	.word	0x08004e61
 8004db4:	08004e61 	.word	0x08004e61
 8004db8:	08004e61 	.word	0x08004e61
 8004dbc:	08004e61 	.word	0x08004e61
 8004dc0:	08004e61 	.word	0x08004e61
 8004dc4:	08004e61 	.word	0x08004e61
 8004dc8:	08004e61 	.word	0x08004e61
 8004dcc:	08004e41 	.word	0x08004e41
 8004dd0:	08004e61 	.word	0x08004e61
 8004dd4:	08004e61 	.word	0x08004e61
 8004dd8:	08004e61 	.word	0x08004e61
 8004ddc:	08004e61 	.word	0x08004e61
 8004de0:	08004e61 	.word	0x08004e61
 8004de4:	08004e61 	.word	0x08004e61
 8004de8:	08004e61 	.word	0x08004e61
 8004dec:	08004e49 	.word	0x08004e49
 8004df0:	08004e61 	.word	0x08004e61
 8004df4:	08004e61 	.word	0x08004e61
 8004df8:	08004e61 	.word	0x08004e61
 8004dfc:	08004e61 	.word	0x08004e61
 8004e00:	08004e61 	.word	0x08004e61
 8004e04:	08004e61 	.word	0x08004e61
 8004e08:	08004e61 	.word	0x08004e61
 8004e0c:	08004e51 	.word	0x08004e51
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08004e61 	.word	0x08004e61
 8004e18:	08004e61 	.word	0x08004e61
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e61 	.word	0x08004e61
 8004e28:	08004e61 	.word	0x08004e61
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e36:	e0d6      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3e:	e0d2      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e46:	e0ce      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4e:	e0ca      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004e50:	2320      	movs	r3, #32
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e56:	e0c6      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5e:	e0c2      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e66:	e0be      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004e68:	40011400 	.word	0x40011400
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	40007800 	.word	0x40007800
 8004e74:	40007c00 	.word	0x40007c00
 8004e78:	40011800 	.word	0x40011800
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4aad      	ldr	r2, [pc, #692]	; (8005138 <UART_SetConfig+0x900>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d176      	bne.n	8004f74 <UART_SetConfig+0x73c>
 8004e86:	4bad      	ldr	r3, [pc, #692]	; (800513c <UART_SetConfig+0x904>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e8e:	2b28      	cmp	r3, #40	; 0x28
 8004e90:	d86c      	bhi.n	8004f6c <UART_SetConfig+0x734>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <UART_SetConfig+0x660>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004f3d 	.word	0x08004f3d
 8004e9c:	08004f6d 	.word	0x08004f6d
 8004ea0:	08004f6d 	.word	0x08004f6d
 8004ea4:	08004f6d 	.word	0x08004f6d
 8004ea8:	08004f6d 	.word	0x08004f6d
 8004eac:	08004f6d 	.word	0x08004f6d
 8004eb0:	08004f6d 	.word	0x08004f6d
 8004eb4:	08004f6d 	.word	0x08004f6d
 8004eb8:	08004f45 	.word	0x08004f45
 8004ebc:	08004f6d 	.word	0x08004f6d
 8004ec0:	08004f6d 	.word	0x08004f6d
 8004ec4:	08004f6d 	.word	0x08004f6d
 8004ec8:	08004f6d 	.word	0x08004f6d
 8004ecc:	08004f6d 	.word	0x08004f6d
 8004ed0:	08004f6d 	.word	0x08004f6d
 8004ed4:	08004f6d 	.word	0x08004f6d
 8004ed8:	08004f4d 	.word	0x08004f4d
 8004edc:	08004f6d 	.word	0x08004f6d
 8004ee0:	08004f6d 	.word	0x08004f6d
 8004ee4:	08004f6d 	.word	0x08004f6d
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	08004f6d 	.word	0x08004f6d
 8004ef0:	08004f6d 	.word	0x08004f6d
 8004ef4:	08004f6d 	.word	0x08004f6d
 8004ef8:	08004f55 	.word	0x08004f55
 8004efc:	08004f6d 	.word	0x08004f6d
 8004f00:	08004f6d 	.word	0x08004f6d
 8004f04:	08004f6d 	.word	0x08004f6d
 8004f08:	08004f6d 	.word	0x08004f6d
 8004f0c:	08004f6d 	.word	0x08004f6d
 8004f10:	08004f6d 	.word	0x08004f6d
 8004f14:	08004f6d 	.word	0x08004f6d
 8004f18:	08004f5d 	.word	0x08004f5d
 8004f1c:	08004f6d 	.word	0x08004f6d
 8004f20:	08004f6d 	.word	0x08004f6d
 8004f24:	08004f6d 	.word	0x08004f6d
 8004f28:	08004f6d 	.word	0x08004f6d
 8004f2c:	08004f6d 	.word	0x08004f6d
 8004f30:	08004f6d 	.word	0x08004f6d
 8004f34:	08004f6d 	.word	0x08004f6d
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f42:	e050      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e04c      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e048      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e044      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004f5c:	2320      	movs	r3, #32
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e040      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e03c      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e038      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a71      	ldr	r2, [pc, #452]	; (8005140 <UART_SetConfig+0x908>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d130      	bne.n	8004fe0 <UART_SetConfig+0x7a8>
 8004f7e:	4b6f      	ldr	r3, [pc, #444]	; (800513c <UART_SetConfig+0x904>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d826      	bhi.n	8004fd8 <UART_SetConfig+0x7a0>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x758>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	08004fb9 	.word	0x08004fb9
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e01a      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e016      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e012      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e00e      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004fc8:	2320      	movs	r3, #32
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e00a      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004fd0:	2340      	movs	r3, #64	; 0x40
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e006      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e002      	b.n	8004fe6 <UART_SetConfig+0x7ae>
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a55      	ldr	r2, [pc, #340]	; (8005140 <UART_SetConfig+0x908>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	f040 80f8 	bne.w	80051e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	dc46      	bgt.n	8005088 <UART_SetConfig+0x850>
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	db75      	blt.n	80050ea <UART_SetConfig+0x8b2>
 8004ffe:	3b02      	subs	r3, #2
 8005000:	2b1e      	cmp	r3, #30
 8005002:	d872      	bhi.n	80050ea <UART_SetConfig+0x8b2>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x7d4>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	0800508f 	.word	0x0800508f
 8005010:	080050eb 	.word	0x080050eb
 8005014:	08005097 	.word	0x08005097
 8005018:	080050eb 	.word	0x080050eb
 800501c:	080050eb 	.word	0x080050eb
 8005020:	080050eb 	.word	0x080050eb
 8005024:	080050a7 	.word	0x080050a7
 8005028:	080050eb 	.word	0x080050eb
 800502c:	080050eb 	.word	0x080050eb
 8005030:	080050eb 	.word	0x080050eb
 8005034:	080050eb 	.word	0x080050eb
 8005038:	080050eb 	.word	0x080050eb
 800503c:	080050eb 	.word	0x080050eb
 8005040:	080050eb 	.word	0x080050eb
 8005044:	080050b7 	.word	0x080050b7
 8005048:	080050eb 	.word	0x080050eb
 800504c:	080050eb 	.word	0x080050eb
 8005050:	080050eb 	.word	0x080050eb
 8005054:	080050eb 	.word	0x080050eb
 8005058:	080050eb 	.word	0x080050eb
 800505c:	080050eb 	.word	0x080050eb
 8005060:	080050eb 	.word	0x080050eb
 8005064:	080050eb 	.word	0x080050eb
 8005068:	080050eb 	.word	0x080050eb
 800506c:	080050eb 	.word	0x080050eb
 8005070:	080050eb 	.word	0x080050eb
 8005074:	080050eb 	.word	0x080050eb
 8005078:	080050eb 	.word	0x080050eb
 800507c:	080050eb 	.word	0x080050eb
 8005080:	080050eb 	.word	0x080050eb
 8005084:	080050dd 	.word	0x080050dd
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d02a      	beq.n	80050e2 <UART_SetConfig+0x8aa>
 800508c:	e02d      	b.n	80050ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800508e:	f7fe fc87 	bl	80039a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005092:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005094:	e02f      	b.n	80050f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fc96 	bl	80039cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a4:	e027      	b.n	80050f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050a6:	f107 0318 	add.w	r3, r7, #24
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe fde2 	bl	8003c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050b4:	e01f      	b.n	80050f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <UART_SetConfig+0x904>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <UART_SetConfig+0x904>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	08db      	lsrs	r3, r3, #3
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <UART_SetConfig+0x90c>)
 80050ce:	fa22 f303 	lsr.w	r3, r2, r3
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050d4:	e00f      	b.n	80050f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80050d6:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <UART_SetConfig+0x90c>)
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050da:	e00c      	b.n	80050f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050dc:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <UART_SetConfig+0x910>)
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e0:	e009      	b.n	80050f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e8:	e005      	b.n	80050f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80050f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 81ee 	beq.w	80054da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <UART_SetConfig+0x914>)
 8005104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005108:	461a      	mov	r2, r3
 800510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005110:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511e:	429a      	cmp	r2, r3
 8005120:	d305      	bcc.n	800512e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512a:	429a      	cmp	r2, r3
 800512c:	d910      	bls.n	8005150 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005134:	e1d1      	b.n	80054da <UART_SetConfig+0xca2>
 8005136:	bf00      	nop
 8005138:	40011c00 	.word	0x40011c00
 800513c:	58024400 	.word	0x58024400
 8005140:	58000c00 	.word	0x58000c00
 8005144:	03d09000 	.word	0x03d09000
 8005148:	003d0900 	.word	0x003d0900
 800514c:	08008840 	.word	0x08008840
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	2200      	movs	r2, #0
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	60fa      	str	r2, [r7, #12]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	4ac0      	ldr	r2, [pc, #768]	; (8005460 <UART_SetConfig+0xc28>)
 800515e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005162:	b29b      	uxth	r3, r3
 8005164:	2200      	movs	r2, #0
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800516e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005172:	f7fb f8bd 	bl	80002f0 <__aeabi_uldivmod>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	020b      	lsls	r3, r1, #8
 8005188:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800518c:	0202      	lsls	r2, r0, #8
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	6849      	ldr	r1, [r1, #4]
 8005192:	0849      	lsrs	r1, r1, #1
 8005194:	2000      	movs	r0, #0
 8005196:	460c      	mov	r4, r1
 8005198:	4605      	mov	r5, r0
 800519a:	eb12 0804 	adds.w	r8, r2, r4
 800519e:	eb43 0905 	adc.w	r9, r3, r5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	469a      	mov	sl, r3
 80051aa:	4693      	mov	fp, r2
 80051ac:	4652      	mov	r2, sl
 80051ae:	465b      	mov	r3, fp
 80051b0:	4640      	mov	r0, r8
 80051b2:	4649      	mov	r1, r9
 80051b4:	f7fb f89c 	bl	80002f0 <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4613      	mov	r3, r2
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c6:	d308      	bcc.n	80051da <UART_SetConfig+0x9a2>
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ce:	d204      	bcs.n	80051da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	e17f      	b.n	80054da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80051e0:	e17b      	b.n	80054da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ea:	f040 80bd 	bne.w	8005368 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80051ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	dc48      	bgt.n	8005288 <UART_SetConfig+0xa50>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	db7b      	blt.n	80052f2 <UART_SetConfig+0xaba>
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d879      	bhi.n	80052f2 <UART_SetConfig+0xaba>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <UART_SetConfig+0x9cc>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	0800528f 	.word	0x0800528f
 8005208:	08005297 	.word	0x08005297
 800520c:	080052f3 	.word	0x080052f3
 8005210:	080052f3 	.word	0x080052f3
 8005214:	0800529f 	.word	0x0800529f
 8005218:	080052f3 	.word	0x080052f3
 800521c:	080052f3 	.word	0x080052f3
 8005220:	080052f3 	.word	0x080052f3
 8005224:	080052af 	.word	0x080052af
 8005228:	080052f3 	.word	0x080052f3
 800522c:	080052f3 	.word	0x080052f3
 8005230:	080052f3 	.word	0x080052f3
 8005234:	080052f3 	.word	0x080052f3
 8005238:	080052f3 	.word	0x080052f3
 800523c:	080052f3 	.word	0x080052f3
 8005240:	080052f3 	.word	0x080052f3
 8005244:	080052bf 	.word	0x080052bf
 8005248:	080052f3 	.word	0x080052f3
 800524c:	080052f3 	.word	0x080052f3
 8005250:	080052f3 	.word	0x080052f3
 8005254:	080052f3 	.word	0x080052f3
 8005258:	080052f3 	.word	0x080052f3
 800525c:	080052f3 	.word	0x080052f3
 8005260:	080052f3 	.word	0x080052f3
 8005264:	080052f3 	.word	0x080052f3
 8005268:	080052f3 	.word	0x080052f3
 800526c:	080052f3 	.word	0x080052f3
 8005270:	080052f3 	.word	0x080052f3
 8005274:	080052f3 	.word	0x080052f3
 8005278:	080052f3 	.word	0x080052f3
 800527c:	080052f3 	.word	0x080052f3
 8005280:	080052f3 	.word	0x080052f3
 8005284:	080052e5 	.word	0x080052e5
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d02e      	beq.n	80052ea <UART_SetConfig+0xab2>
 800528c:	e031      	b.n	80052f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800528e:	f7fd f95b 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8005292:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005294:	e033      	b.n	80052fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005296:	f7fd f96d 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 800529a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800529c:	e02f      	b.n	80052fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800529e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fb92 	bl	80039cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ac:	e027      	b.n	80052fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ae:	f107 0318 	add.w	r3, r7, #24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fcde 	bl	8003c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052bc:	e01f      	b.n	80052fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052be:	4b69      	ldr	r3, [pc, #420]	; (8005464 <UART_SetConfig+0xc2c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052ca:	4b66      	ldr	r3, [pc, #408]	; (8005464 <UART_SetConfig+0xc2c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	4a64      	ldr	r2, [pc, #400]	; (8005468 <UART_SetConfig+0xc30>)
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052dc:	e00f      	b.n	80052fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80052de:	4b62      	ldr	r3, [pc, #392]	; (8005468 <UART_SetConfig+0xc30>)
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052e2:	e00c      	b.n	80052fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <UART_SetConfig+0xc34>)
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052e8:	e009      	b.n	80052fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052f0:	e005      	b.n	80052fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80052fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 80ea 	beq.w	80054da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	4a55      	ldr	r2, [pc, #340]	; (8005460 <UART_SetConfig+0xc28>)
 800530c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005310:	461a      	mov	r2, r3
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	fbb3 f3f2 	udiv	r3, r3, r2
 8005318:	005a      	lsls	r2, r3, #1
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	441a      	add	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	2b0f      	cmp	r3, #15
 8005330:	d916      	bls.n	8005360 <UART_SetConfig+0xb28>
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005338:	d212      	bcs.n	8005360 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	b29b      	uxth	r3, r3
 800533e:	f023 030f 	bic.w	r3, r3, #15
 8005342:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	b29b      	uxth	r3, r3
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	b29a      	uxth	r2, r3
 8005350:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005352:	4313      	orrs	r3, r2
 8005354:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	e0bc      	b.n	80054da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005366:	e0b8      	b.n	80054da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005368:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800536c:	2b20      	cmp	r3, #32
 800536e:	dc4b      	bgt.n	8005408 <UART_SetConfig+0xbd0>
 8005370:	2b00      	cmp	r3, #0
 8005372:	f2c0 8087 	blt.w	8005484 <UART_SetConfig+0xc4c>
 8005376:	2b20      	cmp	r3, #32
 8005378:	f200 8084 	bhi.w	8005484 <UART_SetConfig+0xc4c>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0xb4c>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	0800540f 	.word	0x0800540f
 8005388:	08005417 	.word	0x08005417
 800538c:	08005485 	.word	0x08005485
 8005390:	08005485 	.word	0x08005485
 8005394:	0800541f 	.word	0x0800541f
 8005398:	08005485 	.word	0x08005485
 800539c:	08005485 	.word	0x08005485
 80053a0:	08005485 	.word	0x08005485
 80053a4:	0800542f 	.word	0x0800542f
 80053a8:	08005485 	.word	0x08005485
 80053ac:	08005485 	.word	0x08005485
 80053b0:	08005485 	.word	0x08005485
 80053b4:	08005485 	.word	0x08005485
 80053b8:	08005485 	.word	0x08005485
 80053bc:	08005485 	.word	0x08005485
 80053c0:	08005485 	.word	0x08005485
 80053c4:	0800543f 	.word	0x0800543f
 80053c8:	08005485 	.word	0x08005485
 80053cc:	08005485 	.word	0x08005485
 80053d0:	08005485 	.word	0x08005485
 80053d4:	08005485 	.word	0x08005485
 80053d8:	08005485 	.word	0x08005485
 80053dc:	08005485 	.word	0x08005485
 80053e0:	08005485 	.word	0x08005485
 80053e4:	08005485 	.word	0x08005485
 80053e8:	08005485 	.word	0x08005485
 80053ec:	08005485 	.word	0x08005485
 80053f0:	08005485 	.word	0x08005485
 80053f4:	08005485 	.word	0x08005485
 80053f8:	08005485 	.word	0x08005485
 80053fc:	08005485 	.word	0x08005485
 8005400:	08005485 	.word	0x08005485
 8005404:	08005477 	.word	0x08005477
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d037      	beq.n	800547c <UART_SetConfig+0xc44>
 800540c:	e03a      	b.n	8005484 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800540e:	f7fd f89b 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8005412:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005414:	e03c      	b.n	8005490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005416:	f7fd f8ad 	bl	8002574 <HAL_RCC_GetPCLK2Freq>
 800541a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800541c:	e038      	b.n	8005490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800541e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fad2 	bl	80039cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800542c:	e030      	b.n	8005490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800542e:	f107 0318 	add.w	r3, r7, #24
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fc1e 	bl	8003c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800543c:	e028      	b.n	8005490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <UART_SetConfig+0xc2c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d012      	beq.n	8005470 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <UART_SetConfig+0xc2c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	08db      	lsrs	r3, r3, #3
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <UART_SetConfig+0xc30>)
 8005456:	fa22 f303 	lsr.w	r3, r2, r3
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800545c:	e018      	b.n	8005490 <UART_SetConfig+0xc58>
 800545e:	bf00      	nop
 8005460:	08008840 	.word	0x08008840
 8005464:	58024400 	.word	0x58024400
 8005468:	03d09000 	.word	0x03d09000
 800546c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005470:	4b24      	ldr	r3, [pc, #144]	; (8005504 <UART_SetConfig+0xccc>)
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005474:	e00c      	b.n	8005490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <UART_SetConfig+0xcd0>)
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547a:	e009      	b.n	8005490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005482:	e005      	b.n	8005490 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800548e:	bf00      	nop
    }

    if (pclk != 0U)
 8005490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d021      	beq.n	80054da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	4a1c      	ldr	r2, [pc, #112]	; (800550c <UART_SetConfig+0xcd4>)
 800549c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	441a      	add	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	2b0f      	cmp	r3, #15
 80054be:	d909      	bls.n	80054d4 <UART_SetConfig+0xc9c>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c6:	d205      	bcs.n	80054d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
 80054d2:	e002      	b.n	80054da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2201      	movs	r2, #1
 80054de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3748      	adds	r7, #72	; 0x48
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005504:	03d09000 	.word	0x03d09000
 8005508:	003d0900 	.word	0x003d0900
 800550c:	08008840 	.word	0x08008840

08005510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01a      	beq.n	8005626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560e:	d10a      	bne.n	8005626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b098      	sub	sp, #96	; 0x60
 8005658:	af02      	add	r7, sp, #8
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005664:	f7fb fcce 	bl	8001004 <HAL_GetTick>
 8005668:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d12f      	bne.n	80056d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005680:	2200      	movs	r2, #0
 8005682:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f88e 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d022      	beq.n	80056d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a6:	653b      	str	r3, [r7, #80]	; 0x50
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
 80056b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e063      	b.n	80057a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d149      	bne.n	800577a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ee:	2200      	movs	r2, #0
 80056f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f857 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d03c      	beq.n	800577a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	623b      	str	r3, [r7, #32]
   return(result);
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
 8005720:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e6      	bne.n	8005700 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	60fb      	str	r3, [r7, #12]
   return(result);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	64bb      	str	r3, [r7, #72]	; 0x48
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005752:	61fa      	str	r2, [r7, #28]
 8005754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	69b9      	ldr	r1, [r7, #24]
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	617b      	str	r3, [r7, #20]
   return(result);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e5      	bne.n	8005732 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e012      	b.n	80057a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3758      	adds	r7, #88	; 0x58
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b8:	e049      	b.n	800584e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d045      	beq.n	800584e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fb fc1f 	bl	8001004 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e048      	b.n	800586e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d031      	beq.n	800584e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d110      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2208      	movs	r2, #8
 80057fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f839 	bl	8005878 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2208      	movs	r2, #8
 800580a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e029      	b.n	800586e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005828:	d111      	bne.n	800584e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f81f 	bl	8005878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e00f      	b.n	800586e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	429a      	cmp	r2, r3
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	429a      	cmp	r2, r3
 800586a:	d0a6      	beq.n	80057ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b095      	sub	sp, #84	; 0x54
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589e:	643b      	str	r3, [r7, #64]	; 0x40
 80058a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <UART_EndRxTransfer+0xc8>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d118      	bne.n	8005920 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f023 0310 	bic.w	r3, r3, #16
 8005902:	647b      	str	r3, [r7, #68]	; 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6979      	ldr	r1, [r7, #20]
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	613b      	str	r3, [r7, #16]
   return(result);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005934:	bf00      	nop
 8005936:	3754      	adds	r7, #84	; 0x54
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	effffffe 	.word	0xeffffffe

08005944 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_UARTEx_DisableFifoMode+0x16>
 8005956:	2302      	movs	r3, #2
 8005958:	e027      	b.n	80059aa <HAL_UARTEx_DisableFifoMode+0x66>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2224      	movs	r2, #36	; 0x24
 8005966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005988:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e02d      	b.n	8005a2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2224      	movs	r2, #36	; 0x24
 80059da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f850 	bl	8005ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e02d      	b.n	8005aa6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2224      	movs	r2, #36	; 0x24
 8005a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f812 	bl	8005ab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d108      	bne.n	8005ad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ad0:	e031      	b.n	8005b36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	0e5b      	lsrs	r3, r3, #25
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	0f5b      	lsrs	r3, r3, #29
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
 8005afc:	7b3a      	ldrb	r2, [r7, #12]
 8005afe:	4911      	ldr	r1, [pc, #68]	; (8005b44 <UARTEx_SetNbDataToProcess+0x94>)
 8005b00:	5c8a      	ldrb	r2, [r1, r2]
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b06:	7b3a      	ldrb	r2, [r7, #12]
 8005b08:	490f      	ldr	r1, [pc, #60]	; (8005b48 <UARTEx_SetNbDataToProcess+0x98>)
 8005b0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	7b7a      	ldrb	r2, [r7, #13]
 8005b1c:	4909      	ldr	r1, [pc, #36]	; (8005b44 <UARTEx_SetNbDataToProcess+0x94>)
 8005b1e:	5c8a      	ldrb	r2, [r1, r2]
 8005b20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b24:	7b7a      	ldrb	r2, [r7, #13]
 8005b26:	4908      	ldr	r1, [pc, #32]	; (8005b48 <UARTEx_SetNbDataToProcess+0x98>)
 8005b28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	08008858 	.word	0x08008858
 8005b48:	08008860 	.word	0x08008860

08005b4c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f103 0208 	add.w	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f103 0208 	add.w	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f103 0208 	add.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d103      	bne.n	8005bc6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e00c      	b.n	8005be0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e002      	b.n	8005bd4 <vListInsert+0x2e>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d2f6      	bcs.n	8005bce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	601a      	str	r2, [r3, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6852      	ldr	r2, [r2, #4]
 8005c38:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d103      	bne.n	8005c4c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1e5a      	subs	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005c76:	2301      	movs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xQueueGenericReset+0x2e>
        __asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
    }
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d052      	beq.n	8005d46 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d04e      	beq.n	8005d46 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d000      	beq.n	8005cbc <xQueueGenericReset+0x50>
 8005cba:	2101      	movs	r1, #1
 8005cbc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d141      	bne.n	8005d46 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8005cc2:	f001 fd89 	bl	80077d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	441a      	add	r2, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	6939      	ldr	r1, [r7, #16]
 8005cf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	441a      	add	r2, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	22ff      	movs	r2, #255	; 0xff
 8005d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	22ff      	movs	r2, #255	; 0xff
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00f      	beq.n	8005d40 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	3310      	adds	r3, #16
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 feef 	bl	8006b08 <xTaskRemoveFromEventList>
 8005d2a:	e009      	b.n	8005d40 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3310      	adds	r3, #16
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff ff0b 	bl	8005b4c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3324      	adds	r3, #36	; 0x24
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff ff06 	bl	8005b4c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005d40:	f001 fd7a 	bl	8007838 <vPortExitCritical>
 8005d44:	e001      	b.n	8005d4a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <xQueueGenericReset+0xfa>
        __asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60bb      	str	r3, [r7, #8]
    }
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005d66:	697b      	ldr	r3, [r7, #20]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d02e      	beq.n	8005de6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005d88:	2100      	movs	r1, #0
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d000      	beq.n	8005d98 <xQueueGenericCreate+0x28>
 8005d96:	2101      	movs	r1, #1
 8005d98:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d123      	bne.n	8005de6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005da6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005daa:	d81c      	bhi.n	8005de6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	3350      	adds	r3, #80	; 0x50
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fdee 	bl	800799c <pvPortMalloc>
 8005dc0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01c      	beq.n	8005e02 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3350      	adds	r3, #80	; 0x50
 8005dd0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dd2:	79fa      	ldrb	r2, [r7, #7]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f814 	bl	8005e0c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005de4:	e00d      	b.n	8005e02 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueGenericCreate+0x92>
        __asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	613b      	str	r3, [r7, #16]
    }
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005e02:	69fb      	ldr	r3, [r7, #28]
    }
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e002      	b.n	8005e2e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	69b8      	ldr	r0, [r7, #24]
 8005e3e:	f7ff ff15 	bl	8005c6c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08c      	sub	sp, #48	; 0x30
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <xQueueReceive+0x30>
        __asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	623b      	str	r3, [r7, #32]
    }
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <xQueueReceive+0x3e>
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <xQueueReceive+0x42>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <xQueueReceive+0x44>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueReceive+0x5e>
        __asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61fb      	str	r3, [r7, #28]
    }
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eb2:	f001 f835 	bl	8006f20 <xTaskGetSchedulerState>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <xQueueReceive+0x6e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <xQueueReceive+0x72>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <xQueueReceive+0x74>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueReceive+0x8e>
        __asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61bb      	str	r3, [r7, #24]
    }
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005ee2:	f001 fc79 	bl	80077d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef6:	f000 f881 	bl	8005ffc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	1e5a      	subs	r2, r3, #1
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	3310      	adds	r3, #16
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fdfa 	bl	8006b08 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005f14:	f001 fc90 	bl	8007838 <vPortExitCritical>
                return pdPASS;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e069      	b.n	8005ff0 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005f22:	f001 fc89 	bl	8007838 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e062      	b.n	8005ff0 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 febf 	bl	8006cb8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005f3e:	f001 fc7b 	bl	8007838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005f42:	f000 fb19 	bl	8006578 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005f46:	f001 fc47 	bl	80077d8 <vPortEnterCritical>
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d103      	bne.n	8005f60 <xQueueReceive+0x10c>
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d103      	bne.n	8005f76 <xQueueReceive+0x122>
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f76:	f001 fc5f 	bl	8007838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f7a:	1d3a      	adds	r2, r7, #4
 8005f7c:	f107 0310 	add.w	r3, r7, #16
 8005f80:	4611      	mov	r1, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 feae 	bl	8006ce4 <xTaskCheckForTimeOut>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d123      	bne.n	8005fd6 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f90:	f000 f8ac 	bl	80060ec <prvIsQueueEmpty>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d017      	beq.n	8005fca <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	3324      	adds	r3, #36	; 0x24
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fd46 	bl	8006a34 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005faa:	f000 f84d 	bl	8006048 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005fae:	f000 faf1 	bl	8006594 <xTaskResumeAll>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d194      	bne.n	8005ee2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <xQueueReceive+0x1a4>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	e78b      	b.n	8005ee2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fcc:	f000 f83c 	bl	8006048 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005fd0:	f000 fae0 	bl	8006594 <xTaskResumeAll>
 8005fd4:	e785      	b.n	8005ee2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd8:	f000 f836 	bl	8006048 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005fdc:	f000 fada 	bl	8006594 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe2:	f000 f883 	bl	80060ec <prvIsQueueEmpty>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f43f af7a 	beq.w	8005ee2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005fee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3730      	adds	r7, #48	; 0x30
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d018      	beq.n	8006040 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	441a      	add	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d303      	bcc.n	8006030 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68d9      	ldr	r1, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	461a      	mov	r2, r3
 800603a:	6838      	ldr	r0, [r7, #0]
 800603c:	f001 fe9e 	bl	8007d7c <memcpy>
    }
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006050:	f001 fbc2 	bl	80077d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800605a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800605c:	e011      	b.n	8006082 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	d012      	beq.n	800608c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3324      	adds	r3, #36	; 0x24
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fd4c 	bl	8006b08 <xTaskRemoveFromEventList>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006076:	f000 fe9b 	bl	8006db0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	3b01      	subs	r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	dce9      	bgt.n	800605e <prvUnlockQueue+0x16>
 800608a:	e000      	b.n	800608e <prvUnlockQueue+0x46>
                    break;
 800608c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	22ff      	movs	r2, #255	; 0xff
 8006092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006096:	f001 fbcf 	bl	8007838 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800609a:	f001 fb9d 	bl	80077d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80060a6:	e011      	b.n	80060cc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3310      	adds	r3, #16
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fd27 	bl	8006b08 <xTaskRemoveFromEventList>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80060c0:	f000 fe76 	bl	8006db0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80060cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	dce9      	bgt.n	80060a8 <prvUnlockQueue+0x60>
 80060d4:	e000      	b.n	80060d8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80060d6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	22ff      	movs	r2, #255	; 0xff
 80060dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80060e0:	f001 fbaa 	bl	8007838 <vPortExitCritical>
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80060f4:	f001 fb70 	bl	80077d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	e001      	b.n	800610a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800610a:	f001 fb95 	bl	8007838 <vPortExitCritical>

    return xReturn;
 800610e:	68fb      	ldr	r3, [r7, #12]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	60fb      	str	r3, [r7, #12]
    }
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d024      	beq.n	8006192 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e01e      	b.n	800618c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <vQueueAddToRegistry+0x98>)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	429a      	cmp	r2, r3
 800615c:	d105      	bne.n	800616a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <vQueueAddToRegistry+0x98>)
 8006164:	4413      	add	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
                    break;
 8006168:	e013      	b.n	8006192 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <vQueueAddToRegistry+0x6e>
 8006170:	4a0f      	ldr	r2, [pc, #60]	; (80061b0 <vQueueAddToRegistry+0x98>)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <vQueueAddToRegistry+0x98>)
 8006182:	4413      	add	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	3301      	adds	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b07      	cmp	r3, #7
 8006190:	d9dd      	bls.n	800614e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2400017c 	.word	0x2400017c

080061b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80061c4:	f001 fb08 	bl	80077d8 <vPortEnterCritical>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d103      	bne.n	80061de <vQueueWaitForMessageRestricted+0x2a>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e4:	b25b      	sxtb	r3, r3
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ea:	d103      	bne.n	80061f4 <vQueueWaitForMessageRestricted+0x40>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f4:	f001 fb20 	bl	8007838 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	3324      	adds	r3, #36	; 0x24
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fc37 	bl	8006a7c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f7ff ff1a 	bl	8006048 <prvUnlockQueue>
    }
 8006214:	bf00      	nop
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af04      	add	r7, sp, #16
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f001 fbb3 	bl	800799c <pvPortMalloc>
 8006236:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d013      	beq.n	8006266 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800623e:	205c      	movs	r0, #92	; 0x5c
 8006240:	f001 fbac 	bl	800799c <pvPortMalloc>
 8006244:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800624c:	225c      	movs	r2, #92	; 0x5c
 800624e:	2100      	movs	r1, #0
 8006250:	69f8      	ldr	r0, [r7, #28]
 8006252:	f001 fda1 	bl	8007d98 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
 800625c:	e005      	b.n	800626a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800625e:	6978      	ldr	r0, [r7, #20]
 8006260:	f001 fc56 	bl	8007b10 <vPortFree>
 8006264:	e001      	b.n	800626a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d013      	beq.n	8006298 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006270:	88fa      	ldrh	r2, [r7, #6]
 8006272:	2300      	movs	r3, #0
 8006274:	9303      	str	r3, [sp, #12]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	9302      	str	r3, [sp, #8]
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f80e 	bl	80062a8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800628c:	69f8      	ldr	r0, [r7, #28]
 800628e:	f000 f899 	bl	80063c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006292:	2301      	movs	r3, #1
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	e002      	b.n	800629e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006298:	f04f 33ff 	mov.w	r3, #4294967295
 800629c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800629e:	69bb      	ldr	r3, [r7, #24]
    }
 80062a0:	4618      	mov	r0, r3
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	461a      	mov	r2, r3
 80062c0:	21a5      	movs	r1, #165	; 0xa5
 80062c2:	f001 fd69 	bl	8007d98 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80062d0:	440b      	add	r3, r1
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f023 0307 	bic.w	r3, r3, #7
 80062de:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <prvInitialiseNewTask+0x58>
        __asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	617b      	str	r3, [r7, #20]
    }
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01e      	beq.n	8006344 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	e012      	b.n	8006332 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	7819      	ldrb	r1, [r3, #0]
 8006314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	3334      	adds	r3, #52	; 0x34
 800631c:	460a      	mov	r2, r1
 800631e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d006      	beq.n	800633a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	3301      	adds	r3, #1
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b0f      	cmp	r3, #15
 8006336:	d9e9      	bls.n	800630c <prvInitialiseNewTask+0x64>
 8006338:	e000      	b.n	800633c <prvInitialiseNewTask+0x94>
            {
                break;
 800633a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	2b37      	cmp	r3, #55	; 0x37
 8006348:	d90a      	bls.n	8006360 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	613b      	str	r3, [r7, #16]
    }
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2b37      	cmp	r3, #55	; 0x37
 8006364:	d901      	bls.n	800636a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006366:	2337      	movs	r3, #55	; 0x37
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006374:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	3304      	adds	r3, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fc06 	bl	8005b8c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fc01 	bl	8005b8c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	69b8      	ldr	r0, [r7, #24]
 80063a6:	f001 f8e7 	bl	8007578 <pxPortInitialiseStack>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80063bc:	bf00      	nop
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80063cc:	f001 fa04 	bl	80077d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80063d0:	4b3a      	ldr	r3, [pc, #232]	; (80064bc <prvAddNewTaskToReadyList+0xf8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	4a39      	ldr	r2, [pc, #228]	; (80064bc <prvAddNewTaskToReadyList+0xf8>)
 80063d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80063da:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <prvAddNewTaskToReadyList+0xfc>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80063e2:	4a37      	ldr	r2, [pc, #220]	; (80064c0 <prvAddNewTaskToReadyList+0xfc>)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063e8:	4b34      	ldr	r3, [pc, #208]	; (80064bc <prvAddNewTaskToReadyList+0xf8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d110      	bne.n	8006412 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80063f0:	f000 fcfc 	bl	8006dec <prvInitialiseTaskLists>
 80063f4:	e00d      	b.n	8006412 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80063f6:	4b33      	ldr	r3, [pc, #204]	; (80064c4 <prvAddNewTaskToReadyList+0x100>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <prvAddNewTaskToReadyList+0xfc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	429a      	cmp	r2, r3
 800640a:	d802      	bhi.n	8006412 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800640c:	4a2c      	ldr	r2, [pc, #176]	; (80064c0 <prvAddNewTaskToReadyList+0xfc>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006412:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <prvAddNewTaskToReadyList+0x104>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	4a2b      	ldr	r2, [pc, #172]	; (80064c8 <prvAddNewTaskToReadyList+0x104>)
 800641a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800641c:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <prvAddNewTaskToReadyList+0x104>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <prvAddNewTaskToReadyList+0x108>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <prvAddNewTaskToReadyList+0x74>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a25      	ldr	r2, [pc, #148]	; (80064cc <prvAddNewTaskToReadyList+0x108>)
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4924      	ldr	r1, [pc, #144]	; (80064d0 <prvAddNewTaskToReadyList+0x10c>)
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	3304      	adds	r3, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	3204      	adds	r2, #4
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	1d1a      	adds	r2, r3, #4
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	609a      	str	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <prvAddNewTaskToReadyList+0x10c>)
 800647c:	441a      	add	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	615a      	str	r2, [r3, #20]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	4912      	ldr	r1, [pc, #72]	; (80064d0 <prvAddNewTaskToReadyList+0x10c>)
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	480e      	ldr	r0, [pc, #56]	; (80064d0 <prvAddNewTaskToReadyList+0x10c>)
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4403      	add	r3, r0
 80064a2:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80064a4:	f001 f9c8 	bl	8007838 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80064a8:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <prvAddNewTaskToReadyList+0x100>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <prvAddNewTaskToReadyList+0xf0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064b0:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <prvAddNewTaskToReadyList+0xfc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	24000690 	.word	0x24000690
 80064c0:	240001bc 	.word	0x240001bc
 80064c4:	2400069c 	.word	0x2400069c
 80064c8:	240006ac 	.word	0x240006ac
 80064cc:	24000698 	.word	0x24000698
 80064d0:	240001c0 	.word	0x240001c0

080064d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80064da:	4b20      	ldr	r3, [pc, #128]	; (800655c <vTaskStartScheduler+0x88>)
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	2300      	movs	r3, #0
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	2300      	movs	r3, #0
 80064e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e8:	491d      	ldr	r1, [pc, #116]	; (8006560 <vTaskStartScheduler+0x8c>)
 80064ea:	481e      	ldr	r0, [pc, #120]	; (8006564 <vTaskStartScheduler+0x90>)
 80064ec:	f7ff fe96 	bl	800621c <xTaskCreate>
 80064f0:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d102      	bne.n	80064fe <vTaskStartScheduler+0x2a>
        {
            xReturn = xTimerCreateTimerTask();
 80064f8:	f000 fd9e 	bl	8007038 <xTimerCreateTimerTask>
 80064fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d116      	bne.n	8006532 <vTaskStartScheduler+0x5e>
        __asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	60bb      	str	r3, [r7, #8]
    }
 8006516:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006518:	4b13      	ldr	r3, [pc, #76]	; (8006568 <vTaskStartScheduler+0x94>)
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006520:	4b12      	ldr	r3, [pc, #72]	; (800656c <vTaskStartScheduler+0x98>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <vTaskStartScheduler+0x9c>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800652c:	f001 f8b2 	bl	8007694 <xPortStartScheduler>
 8006530:	e00e      	b.n	8006550 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d10a      	bne.n	8006550 <vTaskStartScheduler+0x7c>
        __asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	607b      	str	r3, [r7, #4]
    }
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <vTaskStartScheduler+0x7a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <vTaskStartScheduler+0xa0>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	240006b4 	.word	0x240006b4
 8006560:	08008818 	.word	0x08008818
 8006564:	08006dc9 	.word	0x08006dc9
 8006568:	240006b0 	.word	0x240006b0
 800656c:	2400069c 	.word	0x2400069c
 8006570:	24000694 	.word	0x24000694
 8006574:	24000010 	.word	0x24000010

08006578 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <vTaskSuspendAll+0x18>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3301      	adds	r3, #1
 8006582:	4a03      	ldr	r2, [pc, #12]	; (8006590 <vTaskSuspendAll+0x18>)
 8006584:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006586:	bf00      	nop
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	240006b8 	.word	0x240006b8

08006594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80065a2:	4b6b      	ldr	r3, [pc, #428]	; (8006750 <xTaskResumeAll+0x1bc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	607b      	str	r3, [r7, #4]
    }
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80065c0:	f001 f90a 	bl	80077d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80065c4:	4b62      	ldr	r3, [pc, #392]	; (8006750 <xTaskResumeAll+0x1bc>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	4a61      	ldr	r2, [pc, #388]	; (8006750 <xTaskResumeAll+0x1bc>)
 80065cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ce:	4b60      	ldr	r3, [pc, #384]	; (8006750 <xTaskResumeAll+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 80b5 	bne.w	8006742 <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065d8:	4b5e      	ldr	r3, [pc, #376]	; (8006754 <xTaskResumeAll+0x1c0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 80b0 	beq.w	8006742 <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e2:	e08b      	b.n	80066fc <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e4:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <xTaskResumeAll+0x1c4>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	6a12      	ldr	r2, [r2, #32]
 80065fa:	609a      	str	r2, [r3, #8]
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	69d2      	ldr	r2, [r2, #28]
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3318      	adds	r3, #24
 800660e:	429a      	cmp	r2, r3
 8006610:	d103      	bne.n	800661a <xTaskResumeAll+0x86>
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2200      	movs	r2, #0
 800661e:	629a      	str	r2, [r3, #40]	; 0x28
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	1e5a      	subs	r2, r3, #1
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	68d2      	ldr	r2, [r2, #12]
 8006638:	609a      	str	r2, [r3, #8]
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	6892      	ldr	r2, [r2, #8]
 8006642:	605a      	str	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3304      	adds	r3, #4
 800664c:	429a      	cmp	r2, r3
 800664e:	d103      	bne.n	8006658 <xTaskResumeAll+0xc4>
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	605a      	str	r2, [r3, #4]
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2200      	movs	r2, #0
 800665c:	615a      	str	r2, [r3, #20]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	1e5a      	subs	r2, r3, #1
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	4b3b      	ldr	r3, [pc, #236]	; (800675c <xTaskResumeAll+0x1c8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d903      	bls.n	800667c <xTaskResumeAll+0xe8>
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	4a38      	ldr	r2, [pc, #224]	; (800675c <xTaskResumeAll+0x1c8>)
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4937      	ldr	r1, [pc, #220]	; (8006760 <xTaskResumeAll+0x1cc>)
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	3304      	adds	r3, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	609a      	str	r2, [r3, #8]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	60da      	str	r2, [r3, #12]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	3204      	adds	r2, #4
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	1d1a      	adds	r2, r3, #4
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	609a      	str	r2, [r3, #8]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4a28      	ldr	r2, [pc, #160]	; (8006760 <xTaskResumeAll+0x1cc>)
 80066c0:	441a      	add	r2, r3
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	615a      	str	r2, [r3, #20]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	4925      	ldr	r1, [pc, #148]	; (8006760 <xTaskResumeAll+0x1cc>)
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	4821      	ldr	r0, [pc, #132]	; (8006760 <xTaskResumeAll+0x1cc>)
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4403      	add	r3, r0
 80066e6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <xTaskResumeAll+0x1d0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d302      	bcc.n	80066fc <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <xTaskResumeAll+0x1d4>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <xTaskResumeAll+0x1c4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f47f af6f 	bne.w	80065e4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800670c:	f000 fbec 	bl	8006ee8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006710:	4b16      	ldr	r3, [pc, #88]	; (800676c <xTaskResumeAll+0x1d8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800671c:	f000 f838 	bl	8006790 <xTaskIncrementTick>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8006726:	4b10      	ldr	r3, [pc, #64]	; (8006768 <xTaskResumeAll+0x1d4>)
 8006728:	2201      	movs	r2, #1
 800672a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	3b01      	subs	r3, #1
 8006730:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f1      	bne.n	800671c <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <xTaskResumeAll+0x1d8>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800673e:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <xTaskResumeAll+0x1d4>)
 8006740:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006742:	f001 f879 	bl	8007838 <vPortExitCritical>

    return xAlreadyYielded;
 8006746:	697b      	ldr	r3, [r7, #20]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3720      	adds	r7, #32
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	240006b8 	.word	0x240006b8
 8006754:	24000690 	.word	0x24000690
 8006758:	24000650 	.word	0x24000650
 800675c:	24000698 	.word	0x24000698
 8006760:	240001c0 	.word	0x240001c0
 8006764:	240001bc 	.word	0x240001bc
 8006768:	240006a4 	.word	0x240006a4
 800676c:	240006a0 	.word	0x240006a0

08006770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <xTaskGetTickCount+0x1c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800677c:	687b      	ldr	r3, [r7, #4]
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	24000694 	.word	0x24000694

08006790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679a:	4b6e      	ldr	r3, [pc, #440]	; (8006954 <xTaskIncrementTick+0x1c4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 80ce 	bne.w	8006940 <xTaskIncrementTick+0x1b0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067a4:	4b6c      	ldr	r3, [pc, #432]	; (8006958 <xTaskIncrementTick+0x1c8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80067ac:	4a6a      	ldr	r2, [pc, #424]	; (8006958 <xTaskIncrementTick+0x1c8>)
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d120      	bne.n	80067fa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80067b8:	4b68      	ldr	r3, [pc, #416]	; (800695c <xTaskIncrementTick+0x1cc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <xTaskIncrementTick+0x48>
        __asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	607b      	str	r3, [r7, #4]
    }
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xTaskIncrementTick+0x46>
 80067d8:	4b60      	ldr	r3, [pc, #384]	; (800695c <xTaskIncrementTick+0x1cc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	4b60      	ldr	r3, [pc, #384]	; (8006960 <xTaskIncrementTick+0x1d0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a5e      	ldr	r2, [pc, #376]	; (800695c <xTaskIncrementTick+0x1cc>)
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4a5e      	ldr	r2, [pc, #376]	; (8006960 <xTaskIncrementTick+0x1d0>)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4b5d      	ldr	r3, [pc, #372]	; (8006964 <xTaskIncrementTick+0x1d4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3301      	adds	r3, #1
 80067f2:	4a5c      	ldr	r2, [pc, #368]	; (8006964 <xTaskIncrementTick+0x1d4>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	f000 fb77 	bl	8006ee8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80067fa:	4b5b      	ldr	r3, [pc, #364]	; (8006968 <xTaskIncrementTick+0x1d8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	429a      	cmp	r2, r3
 8006802:	f0c0 80a2 	bcc.w	800694a <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006806:	4b55      	ldr	r3, [pc, #340]	; (800695c <xTaskIncrementTick+0x1cc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006810:	4b55      	ldr	r3, [pc, #340]	; (8006968 <xTaskIncrementTick+0x1d8>)
 8006812:	f04f 32ff 	mov.w	r2, #4294967295
 8006816:	601a      	str	r2, [r3, #0]
                    break;
 8006818:	e097      	b.n	800694a <xTaskIncrementTick+0x1ba>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800681a:	4b50      	ldr	r3, [pc, #320]	; (800695c <xTaskIncrementTick+0x1cc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800682a:	6a3a      	ldr	r2, [r7, #32]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	429a      	cmp	r2, r3
 8006830:	d203      	bcs.n	800683a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006832:	4a4d      	ldr	r2, [pc, #308]	; (8006968 <xTaskIncrementTick+0x1d8>)
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006838:	e087      	b.n	800694a <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	68d2      	ldr	r2, [r2, #12]
 8006848:	609a      	str	r2, [r3, #8]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	6892      	ldr	r2, [r2, #8]
 8006852:	605a      	str	r2, [r3, #4]
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	3304      	adds	r3, #4
 800685c:	429a      	cmp	r2, r3
 800685e:	d103      	bne.n	8006868 <xTaskIncrementTick+0xd8>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2200      	movs	r2, #0
 800686c:	615a      	str	r2, [r3, #20]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	1e5a      	subs	r2, r3, #1
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01e      	beq.n	80068be <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	6a12      	ldr	r2, [r2, #32]
 800688e:	609a      	str	r2, [r3, #8]
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	69d2      	ldr	r2, [r2, #28]
 8006898:	605a      	str	r2, [r3, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	3318      	adds	r3, #24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d103      	bne.n	80068ae <xTaskIncrementTick+0x11e>
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2200      	movs	r2, #0
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	4b2a      	ldr	r3, [pc, #168]	; (800696c <xTaskIncrementTick+0x1dc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d903      	bls.n	80068d2 <xTaskIncrementTick+0x142>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	4a27      	ldr	r2, [pc, #156]	; (800696c <xTaskIncrementTick+0x1dc>)
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	4926      	ldr	r1, [pc, #152]	; (8006970 <xTaskIncrementTick+0x1e0>)
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	3304      	adds	r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60bb      	str	r3, [r7, #8]
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	609a      	str	r2, [r3, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	3204      	adds	r2, #4
 80068fe:	605a      	str	r2, [r3, #4]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	1d1a      	adds	r2, r3, #4
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4a16      	ldr	r2, [pc, #88]	; (8006970 <xTaskIncrementTick+0x1e0>)
 8006916:	441a      	add	r2, r3
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	615a      	str	r2, [r3, #20]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4913      	ldr	r1, [pc, #76]	; (8006970 <xTaskIncrementTick+0x1e0>)
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	480f      	ldr	r0, [pc, #60]	; (8006970 <xTaskIncrementTick+0x1e0>)
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4403      	add	r3, r0
 800693c:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800693e:	e762      	b.n	8006806 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006940:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <xTaskIncrementTick+0x1e4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <xTaskIncrementTick+0x1e4>)
 8006948:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800694c:	4618      	mov	r0, r3
 800694e:	3728      	adds	r7, #40	; 0x28
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	240006b8 	.word	0x240006b8
 8006958:	24000694 	.word	0x24000694
 800695c:	24000648 	.word	0x24000648
 8006960:	2400064c 	.word	0x2400064c
 8006964:	240006a8 	.word	0x240006a8
 8006968:	240006b0 	.word	0x240006b0
 800696c:	24000698 	.word	0x24000698
 8006970:	240001c0 	.word	0x240001c0
 8006974:	240006a0 	.word	0x240006a0

08006978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800697e:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <vTaskSwitchContext+0xa8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <vTaskSwitchContext+0xac>)
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800698c:	e041      	b.n	8006a12 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 800698e:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <vTaskSwitchContext+0xac>)
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <vTaskSwitchContext+0xb0>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e010      	b.n	80069be <vTaskSwitchContext+0x46>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <vTaskSwitchContext+0x40>
        __asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	607b      	str	r3, [r7, #4]
    }
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <vTaskSwitchContext+0x3e>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	491b      	ldr	r1, [pc, #108]	; (8006a2c <vTaskSwitchContext+0xb4>)
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0e4      	beq.n	800699c <vTaskSwitchContext+0x24>
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <vTaskSwitchContext+0xb4>)
 80069de:	4413      	add	r3, r2
 80069e0:	60bb      	str	r3, [r7, #8]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3308      	adds	r3, #8
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d104      	bne.n	8006a02 <vTaskSwitchContext+0x8a>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <vTaskSwitchContext+0xb8>)
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	4a06      	ldr	r2, [pc, #24]	; (8006a28 <vTaskSwitchContext+0xb0>)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6013      	str	r3, [r2, #0]
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	240006b8 	.word	0x240006b8
 8006a24:	240006a4 	.word	0x240006a4
 8006a28:	24000698 	.word	0x24000698
 8006a2c:	240001c0 	.word	0x240001c0
 8006a30:	240001bc 	.word	0x240001bc

08006a34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	60fb      	str	r3, [r7, #12]
    }
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <vTaskPlaceOnEventList+0x44>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3318      	adds	r3, #24
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff f89f 	bl	8005ba6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a68:	2101      	movs	r1, #1
 8006a6a:	6838      	ldr	r0, [r7, #0]
 8006a6c:	f000 fa76 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	240001bc 	.word	0x240001bc

08006a7c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	613b      	str	r3, [r7, #16]
    }
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <vTaskPlaceOnEventListRestricted+0x88>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	61da      	str	r2, [r3, #28]
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <vTaskPlaceOnEventListRestricted+0x88>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	6892      	ldr	r2, [r2, #8]
 8006aba:	621a      	str	r2, [r3, #32]
 8006abc:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <vTaskPlaceOnEventListRestricted+0x88>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	3218      	adds	r2, #24
 8006ac6:	605a      	str	r2, [r3, #4]
 8006ac8:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <vTaskPlaceOnEventListRestricted+0x88>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f103 0218 	add.w	r2, r3, #24
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <vTaskPlaceOnEventListRestricted+0x88>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295
 8006af0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	68b8      	ldr	r0, [r7, #8]
 8006af6:	f000 fa31 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
    }
 8006afa:	bf00      	nop
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	240001bc 	.word	0x240001bc

08006b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b08b      	sub	sp, #44	; 0x2c
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60fb      	str	r3, [r7, #12]
    }
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	6a3a      	ldr	r2, [r7, #32]
 8006b40:	6a12      	ldr	r2, [r2, #32]
 8006b42:	609a      	str	r2, [r3, #8]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	69d2      	ldr	r2, [r2, #28]
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	3318      	adds	r3, #24
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d103      	bne.n	8006b62 <xTaskRemoveFromEventList+0x5a>
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	6a1a      	ldr	r2, [r3, #32]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2200      	movs	r2, #0
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	1e5a      	subs	r2, r3, #1
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b72:	4b4b      	ldr	r3, [pc, #300]	; (8006ca0 <xTaskRemoveFromEventList+0x198>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d15f      	bne.n	8006c3a <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	68d2      	ldr	r2, [r2, #12]
 8006b88:	609a      	str	r2, [r3, #8]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	6a3a      	ldr	r2, [r7, #32]
 8006b90:	6892      	ldr	r2, [r2, #8]
 8006b92:	605a      	str	r2, [r3, #4]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d103      	bne.n	8006ba8 <xTaskRemoveFromEventList+0xa0>
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	605a      	str	r2, [r3, #4]
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	2200      	movs	r2, #0
 8006bac:	615a      	str	r2, [r3, #20]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	1e5a      	subs	r2, r3, #1
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	4b39      	ldr	r3, [pc, #228]	; (8006ca4 <xTaskRemoveFromEventList+0x19c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d903      	bls.n	8006bcc <xTaskRemoveFromEventList+0xc4>
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4a36      	ldr	r2, [pc, #216]	; (8006ca4 <xTaskRemoveFromEventList+0x19c>)
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	4935      	ldr	r1, [pc, #212]	; (8006ca8 <xTaskRemoveFromEventList+0x1a0>)
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	3304      	adds	r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	609a      	str	r2, [r3, #8]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	60da      	str	r2, [r3, #12]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	3204      	adds	r2, #4
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	609a      	str	r2, [r3, #8]
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <xTaskRemoveFromEventList+0x1a0>)
 8006c10:	441a      	add	r2, r3
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	615a      	str	r2, [r3, #20]
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1a:	4923      	ldr	r1, [pc, #140]	; (8006ca8 <xTaskRemoveFromEventList+0x1a0>)
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	1c59      	adds	r1, r3, #1
 8006c2a:	481f      	ldr	r0, [pc, #124]	; (8006ca8 <xTaskRemoveFromEventList+0x1a0>)
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4403      	add	r3, r0
 8006c36:	6019      	str	r1, [r3, #0]
 8006c38:	e01b      	b.n	8006c72 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c3a:	4b1c      	ldr	r3, [pc, #112]	; (8006cac <xTaskRemoveFromEventList+0x1a4>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	61da      	str	r2, [r3, #28]
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	621a      	str	r2, [r3, #32]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	3218      	adds	r2, #24
 8006c56:	605a      	str	r2, [r3, #4]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	f103 0218 	add.w	r2, r3, #24
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	609a      	str	r2, [r3, #8]
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	4a11      	ldr	r2, [pc, #68]	; (8006cac <xTaskRemoveFromEventList+0x1a4>)
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28
 8006c68:	4b10      	ldr	r3, [pc, #64]	; (8006cac <xTaskRemoveFromEventList+0x1a4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	4a0f      	ldr	r2, [pc, #60]	; (8006cac <xTaskRemoveFromEventList+0x1a4>)
 8006c70:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c76:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <xTaskRemoveFromEventList+0x1a8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d905      	bls.n	8006c8c <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <xTaskRemoveFromEventList+0x1ac>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	e001      	b.n	8006c90 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	372c      	adds	r7, #44	; 0x2c
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	240006b8 	.word	0x240006b8
 8006ca4:	24000698 	.word	0x24000698
 8006ca8:	240001c0 	.word	0x240001c0
 8006cac:	24000650 	.word	0x24000650
 8006cb0:	240001bc 	.word	0x240001bc
 8006cb4:	240006a4 	.word	0x240006a4

08006cb8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cc0:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <vTaskInternalSetTimeOutState+0x24>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <vTaskInternalSetTimeOutState+0x28>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	605a      	str	r2, [r3, #4]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	240006a8 	.word	0x240006a8
 8006ce0:	24000694 	.word	0x24000694

08006ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	613b      	str	r3, [r7, #16]
    }
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
    }
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006d26:	f000 fd57 	bl	80077d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006d2a:	4b1f      	ldr	r3, [pc, #124]	; (8006da8 <xTaskCheckForTimeOut+0xc4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d102      	bne.n	8006d4a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	e026      	b.n	8006d98 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	4b17      	ldr	r3, [pc, #92]	; (8006dac <xTaskCheckForTimeOut+0xc8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d00a      	beq.n	8006d6c <xTaskCheckForTimeOut+0x88>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d305      	bcc.n	8006d6c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006d60:	2301      	movs	r3, #1
 8006d62:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e015      	b.n	8006d98 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d20b      	bcs.n	8006d8e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	1ad2      	subs	r2, r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff ff98 	bl	8006cb8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	e004      	b.n	8006d98 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006d98:	f000 fd4e 	bl	8007838 <vPortExitCritical>

    return xReturn;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3720      	adds	r7, #32
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	24000694 	.word	0x24000694
 8006dac:	240006a8 	.word	0x240006a8

08006db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006db4:	4b03      	ldr	r3, [pc, #12]	; (8006dc4 <vTaskMissedYield+0x14>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
}
 8006dba:	bf00      	nop
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	240006a4 	.word	0x240006a4

08006dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006dd0:	f000 f84c 	bl	8006e6c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8006dd4:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <prvIdleTask+0x20>)
 8006dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006de4:	e7f4      	b.n	8006dd0 <prvIdleTask+0x8>
 8006de6:	bf00      	nop
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006df2:	2300      	movs	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	e00c      	b.n	8006e12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4a12      	ldr	r2, [pc, #72]	; (8006e4c <prvInitialiseTaskLists+0x60>)
 8006e04:	4413      	add	r3, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fea0 	bl	8005b4c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b37      	cmp	r3, #55	; 0x37
 8006e16:	d9ef      	bls.n	8006df8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006e18:	480d      	ldr	r0, [pc, #52]	; (8006e50 <prvInitialiseTaskLists+0x64>)
 8006e1a:	f7fe fe97 	bl	8005b4c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006e1e:	480d      	ldr	r0, [pc, #52]	; (8006e54 <prvInitialiseTaskLists+0x68>)
 8006e20:	f7fe fe94 	bl	8005b4c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006e24:	480c      	ldr	r0, [pc, #48]	; (8006e58 <prvInitialiseTaskLists+0x6c>)
 8006e26:	f7fe fe91 	bl	8005b4c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006e2a:	480c      	ldr	r0, [pc, #48]	; (8006e5c <prvInitialiseTaskLists+0x70>)
 8006e2c:	f7fe fe8e 	bl	8005b4c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006e30:	480b      	ldr	r0, [pc, #44]	; (8006e60 <prvInitialiseTaskLists+0x74>)
 8006e32:	f7fe fe8b 	bl	8005b4c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <prvInitialiseTaskLists+0x78>)
 8006e38:	4a05      	ldr	r2, [pc, #20]	; (8006e50 <prvInitialiseTaskLists+0x64>)
 8006e3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <prvInitialiseTaskLists+0x7c>)
 8006e3e:	4a05      	ldr	r2, [pc, #20]	; (8006e54 <prvInitialiseTaskLists+0x68>)
 8006e40:	601a      	str	r2, [r3, #0]
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	240001c0 	.word	0x240001c0
 8006e50:	24000620 	.word	0x24000620
 8006e54:	24000634 	.word	0x24000634
 8006e58:	24000650 	.word	0x24000650
 8006e5c:	24000664 	.word	0x24000664
 8006e60:	2400067c 	.word	0x2400067c
 8006e64:	24000648 	.word	0x24000648
 8006e68:	2400064c 	.word	0x2400064c

08006e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e72:	e019      	b.n	8006ea8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006e74:	f000 fcb0 	bl	80077d8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e78:	4b10      	ldr	r3, [pc, #64]	; (8006ebc <prvCheckTasksWaitingTermination+0x50>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fec7 	bl	8005c18 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <prvCheckTasksWaitingTermination+0x54>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <prvCheckTasksWaitingTermination+0x54>)
 8006e92:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <prvCheckTasksWaitingTermination+0x58>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <prvCheckTasksWaitingTermination+0x58>)
 8006e9c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006e9e:	f000 fccb 	bl	8007838 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f810 	bl	8006ec8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <prvCheckTasksWaitingTermination+0x58>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e1      	bne.n	8006e74 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	24000664 	.word	0x24000664
 8006ec0:	24000690 	.word	0x24000690
 8006ec4:	24000678 	.word	0x24000678

08006ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe1b 	bl	8007b10 <vPortFree>
            vPortFree( pxTCB );
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fe18 	bl	8007b10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <prvResetNextTaskUnblockTime+0x30>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d104      	bne.n	8006f00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <prvResetNextTaskUnblockTime+0x34>)
 8006ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8006efc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006efe:	e005      	b.n	8006f0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <prvResetNextTaskUnblockTime+0x30>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a04      	ldr	r2, [pc, #16]	; (8006f1c <prvResetNextTaskUnblockTime+0x34>)
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	24000648 	.word	0x24000648
 8006f1c:	240006b0 	.word	0x240006b0

08006f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <xTaskGetSchedulerState+0x34>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e008      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f34:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <xTaskGetSchedulerState+0x38>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e001      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006f46:	687b      	ldr	r3, [r7, #4]
    }
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	2400069c 	.word	0x2400069c
 8006f58:	240006b8 	.word	0x240006b8

08006f5c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006f66:	4b2e      	ldr	r3, [pc, #184]	; (8007020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f6c:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fe50 	bl	8005c18 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d124      	bne.n	8006fca <prvAddCurrentTaskToDelayedList+0x6e>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d021      	beq.n	8006fca <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f86:	4b28      	ldr	r3, [pc, #160]	; (8007028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	4b25      	ldr	r3, [pc, #148]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	4b23      	ldr	r3, [pc, #140]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	6892      	ldr	r2, [r2, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	4b21      	ldr	r3, [pc, #132]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	3204      	adds	r2, #4
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	4b1e      	ldr	r3, [pc, #120]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	609a      	str	r2, [r3, #8]
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1b      	ldr	r2, [pc, #108]	; (8007028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006fba:	615a      	str	r2, [r3, #20]
 8006fbc:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	4a19      	ldr	r2, [pc, #100]	; (8007028 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006fc8:	e026      	b.n	8007018 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d209      	bcs.n	8006ff6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <prvAddCurrentTaskToDelayedList+0xd0>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f7fe fdd9 	bl	8005ba6 <vListInsert>
}
 8006ff4:	e010      	b.n	8007018 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <prvAddCurrentTaskToDelayedList+0xd4>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7fe fdcf 	bl	8005ba6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <prvAddCurrentTaskToDelayedList+0xd8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	429a      	cmp	r2, r3
 8007010:	d202      	bcs.n	8007018 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8007012:	4a08      	ldr	r2, [pc, #32]	; (8007034 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6013      	str	r3, [r2, #0]
}
 8007018:	bf00      	nop
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	24000694 	.word	0x24000694
 8007024:	240001bc 	.word	0x240001bc
 8007028:	2400067c 	.word	0x2400067c
 800702c:	2400064c 	.word	0x2400064c
 8007030:	24000648 	.word	0x24000648
 8007034:	240006b0 	.word	0x240006b0

08007038 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800703e:	2300      	movs	r3, #0
 8007040:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007042:	f000 fa63 	bl	800750c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <xTimerCreateTimerTask+0x54>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800704e:	4b10      	ldr	r3, [pc, #64]	; (8007090 <xTimerCreateTimerTask+0x58>)
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	2302      	movs	r3, #2
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	2300      	movs	r3, #0
 8007058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800705c:	490d      	ldr	r1, [pc, #52]	; (8007094 <xTimerCreateTimerTask+0x5c>)
 800705e:	480e      	ldr	r0, [pc, #56]	; (8007098 <xTimerCreateTimerTask+0x60>)
 8007060:	f7ff f8dc 	bl	800621c <xTaskCreate>
 8007064:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	603b      	str	r3, [r7, #0]
    }
 800707e:	bf00      	nop
 8007080:	e7fe      	b.n	8007080 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007082:	687b      	ldr	r3, [r7, #4]
    }
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	240006ec 	.word	0x240006ec
 8007090:	240006f0 	.word	0x240006f0
 8007094:	08008820 	.word	0x08008820
 8007098:	08007141 	.word	0x08007141

0800709c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80070a8:	e008      	b.n	80070bc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4413      	add	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	699a      	ldr	r2, [r3, #24]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	18d1      	adds	r1, r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f8dd 	bl	8007288 <prvInsertTimerInActiveList>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1ea      	bne.n	80070aa <prvReloadTimer+0xe>
        }
    }
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <prvProcessExpiredTimer+0x5c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fd8d 	bl	8005c18 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff ffc3 	bl	800709c <prvReloadTimer>
 8007116:	e008      	b.n	800712a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800711e:	f023 0301 	bic.w	r3, r3, #1
 8007122:	b2da      	uxtb	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	4798      	blx	r3
    }
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	240006e4 	.word	0x240006e4

08007140 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f857 	bl	8007200 <prvGetNextExpireTime>
 8007152:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4619      	mov	r1, r3
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f803 	bl	8007164 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800715e:	f000 f8d5 	bl	800730c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007162:	e7f1      	b.n	8007148 <prvTimerTask+0x8>

08007164 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800716e:	f7ff fa03 	bl	8006578 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f866 	bl	8007248 <prvSampleTimeNow>
 800717c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d130      	bne.n	80071e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10a      	bne.n	80071a0 <prvProcessTimerOrBlockTask+0x3c>
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	429a      	cmp	r2, r3
 8007190:	d806      	bhi.n	80071a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007192:	f7ff f9ff 	bl	8006594 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ffa1 	bl	80070e0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800719e:	e024      	b.n	80071ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <prvProcessTimerOrBlockTask+0x90>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <prvProcessTimerOrBlockTask+0x50>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x52>
 80071b4:	2300      	movs	r3, #0
 80071b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071b8:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <prvProcessTimerOrBlockTask+0x94>)
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4619      	mov	r1, r3
 80071c6:	f7fe fff5 	bl	80061b4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80071ca:	f7ff f9e3 	bl	8006594 <xTaskResumeAll>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80071d4:	4b09      	ldr	r3, [pc, #36]	; (80071fc <prvProcessTimerOrBlockTask+0x98>)
 80071d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	f3bf 8f6f 	isb	sy
    }
 80071e4:	e001      	b.n	80071ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80071e6:	f7ff f9d5 	bl	8006594 <xTaskResumeAll>
    }
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	240006e8 	.word	0x240006e8
 80071f8:	240006ec 	.word	0x240006ec
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <prvGetNextExpireTime+0x44>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <prvGetNextExpireTime+0x16>
 8007212:	2201      	movs	r2, #1
 8007214:	e000      	b.n	8007218 <prvGetNextExpireTime+0x18>
 8007216:	2200      	movs	r2, #0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007224:	4b07      	ldr	r3, [pc, #28]	; (8007244 <prvGetNextExpireTime+0x44>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e001      	b.n	8007234 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007234:	68fb      	ldr	r3, [r7, #12]
    }
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	240006e4 	.word	0x240006e4

08007248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007250:	f7ff fa8e 	bl	8006770 <xTaskGetTickCount>
 8007254:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <prvSampleTimeNow+0x3c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	429a      	cmp	r2, r3
 800725e:	d205      	bcs.n	800726c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007260:	f000 f92e 	bl	80074c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e002      	b.n	8007272 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007272:	4a04      	ldr	r2, [pc, #16]	; (8007284 <prvSampleTimeNow+0x3c>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007278:	68fb      	ldr	r3, [r7, #12]
    }
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	240006f4 	.word	0x240006f4

08007288 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d812      	bhi.n	80072d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e01b      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072c2:	4b10      	ldr	r3, [pc, #64]	; (8007304 <prvInsertTimerInActiveList+0x7c>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe fc6a 	bl	8005ba6 <vListInsert>
 80072d2:	e012      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d206      	bcs.n	80072ea <prvInsertTimerInActiveList+0x62>
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d302      	bcc.n	80072ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e007      	b.n	80072fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <prvInsertTimerInActiveList+0x80>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f7fe fc56 	bl	8005ba6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80072fa:	697b      	ldr	r3, [r7, #20]
    }
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	240006e8 	.word	0x240006e8
 8007308:	240006e4 	.word	0x240006e4

0800730c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	; 0x28
 8007310:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007312:	e0c2      	b.n	800749a <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da18      	bge.n	800734c <prvProcessReceivedCommands+0x40>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800731a:	1d3b      	adds	r3, r7, #4
 800731c:	3304      	adds	r3, #4
 800731e:	627b      	str	r3, [r7, #36]	; 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <prvProcessReceivedCommands+0x30>
        __asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	61bb      	str	r3, [r7, #24]
    }
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <prvProcessReceivedCommands+0x2e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007342:	6850      	ldr	r0, [r2, #4]
 8007344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007346:	6892      	ldr	r2, [r2, #8]
 8007348:	4611      	mov	r1, r2
 800734a:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f2c0 80a2 	blt.w	8007498 <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	3304      	adds	r3, #4
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fc57 	bl	8005c18 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736a:	463b      	mov	r3, r7
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff ff6b 	bl	8007248 <prvSampleTimeNow>
 8007372:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3b01      	subs	r3, #1
 8007378:	2b08      	cmp	r3, #8
 800737a:	f200 808e 	bhi.w	800749a <prvProcessReceivedCommands+0x18e>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <prvProcessReceivedCommands+0x78>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073a9 	.word	0x080073a9
 800738c:	08007411 	.word	0x08007411
 8007390:	08007425 	.word	0x08007425
 8007394:	0800746f 	.word	0x0800746f
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073a9 	.word	0x080073a9
 80073a0:	08007411 	.word	0x08007411
 80073a4:	08007425 	.word	0x08007425
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	18d1      	adds	r1, r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	6a38      	ldr	r0, [r7, #32]
 80073c8:	f7ff ff5e 	bl	8007288 <prvInsertTimerInActiveList>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d063      	beq.n	800749a <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d009      	beq.n	80073f4 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	4413      	add	r3, r2
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6a38      	ldr	r0, [r7, #32]
 80073ee:	f7ff fe55 	bl	800709c <prvReloadTimer>
 80073f2:	e008      	b.n	8007406 <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	6a38      	ldr	r0, [r7, #32]
 800740c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800740e:	e044      	b.n	800749a <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	b2da      	uxtb	r2, r3
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007422:	e03a      	b.n	800749a <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <prvProcessReceivedCommands+0x14e>
        __asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	617b      	str	r3, [r7, #20]
    }
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	18d1      	adds	r1, r2, r3
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	6a38      	ldr	r0, [r7, #32]
 8007468:	f7ff ff0e 	bl	8007288 <prvInsertTimerInActiveList>
                        break;
 800746c:	e015      	b.n	800749a <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <prvProcessReceivedCommands+0x178>
                            {
                                vPortFree( pxTimer );
 800747c:	6a38      	ldr	r0, [r7, #32]
 800747e:	f000 fb47 	bl	8007b10 <vPortFree>
 8007482:	e00a      	b.n	800749a <prvProcessReceivedCommands+0x18e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	b2da      	uxtb	r2, r3
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007496:	e000      	b.n	800749a <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007498:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800749a:	4b08      	ldr	r3, [pc, #32]	; (80074bc <prvProcessReceivedCommands+0x1b0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	1d39      	adds	r1, r7, #4
 80074a0:	2200      	movs	r2, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fcd6 	bl	8005e54 <xQueueReceive>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f47f af32 	bne.w	8007314 <prvProcessReceivedCommands+0x8>
        }
    }
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	3728      	adds	r7, #40	; 0x28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	240006ec 	.word	0x240006ec

080074c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074c6:	e009      	b.n	80074dc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074c8:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <prvSwitchTimerLists+0x44>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80074d2:	f04f 31ff 	mov.w	r1, #4294967295
 80074d6:	6838      	ldr	r0, [r7, #0]
 80074d8:	f7ff fe02 	bl	80070e0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <prvSwitchTimerLists+0x44>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80074e6:	4b07      	ldr	r3, [pc, #28]	; (8007504 <prvSwitchTimerLists+0x44>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <prvSwitchTimerLists+0x48>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a04      	ldr	r2, [pc, #16]	; (8007504 <prvSwitchTimerLists+0x44>)
 80074f2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80074f4:	4a04      	ldr	r2, [pc, #16]	; (8007508 <prvSwitchTimerLists+0x48>)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6013      	str	r3, [r2, #0]
    }
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	240006e4 	.word	0x240006e4
 8007508:	240006e8 	.word	0x240006e8

0800750c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007510:	f000 f962 	bl	80077d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007514:	4b12      	ldr	r3, [pc, #72]	; (8007560 <prvCheckForValidListAndQueue+0x54>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11d      	bne.n	8007558 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800751c:	4811      	ldr	r0, [pc, #68]	; (8007564 <prvCheckForValidListAndQueue+0x58>)
 800751e:	f7fe fb15 	bl	8005b4c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007522:	4811      	ldr	r0, [pc, #68]	; (8007568 <prvCheckForValidListAndQueue+0x5c>)
 8007524:	f7fe fb12 	bl	8005b4c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007528:	4b10      	ldr	r3, [pc, #64]	; (800756c <prvCheckForValidListAndQueue+0x60>)
 800752a:	4a0e      	ldr	r2, [pc, #56]	; (8007564 <prvCheckForValidListAndQueue+0x58>)
 800752c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <prvCheckForValidListAndQueue+0x64>)
 8007530:	4a0d      	ldr	r2, [pc, #52]	; (8007568 <prvCheckForValidListAndQueue+0x5c>)
 8007532:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007534:	2200      	movs	r2, #0
 8007536:	2110      	movs	r1, #16
 8007538:	200a      	movs	r0, #10
 800753a:	f7fe fc19 	bl	8005d70 <xQueueGenericCreate>
 800753e:	4603      	mov	r3, r0
 8007540:	4a07      	ldr	r2, [pc, #28]	; (8007560 <prvCheckForValidListAndQueue+0x54>)
 8007542:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <prvCheckForValidListAndQueue+0x54>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <prvCheckForValidListAndQueue+0x54>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4908      	ldr	r1, [pc, #32]	; (8007574 <prvCheckForValidListAndQueue+0x68>)
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fde0 	bl	8006118 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007558:	f000 f96e 	bl	8007838 <vPortExitCritical>
    }
 800755c:	bf00      	nop
 800755e:	bd80      	pop	{r7, pc}
 8007560:	240006ec 	.word	0x240006ec
 8007564:	240006bc 	.word	0x240006bc
 8007568:	240006d0 	.word	0x240006d0
 800756c:	240006e4 	.word	0x240006e4
 8007570:	240006e8 	.word	0x240006e8
 8007574:	08008828 	.word	0x08008828

08007578 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b04      	subs	r3, #4
 8007588:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007590:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3b04      	subs	r3, #4
 8007596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f023 0201 	bic.w	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80075a8:	4a0c      	ldr	r2, [pc, #48]	; (80075dc <pxPortInitialiseStack+0x64>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3b14      	subs	r3, #20
 80075b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b04      	subs	r3, #4
 80075be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f06f 0202 	mvn.w	r2, #2
 80075c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3b20      	subs	r3, #32
 80075cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80075ce:	68fb      	ldr	r3, [r7, #12]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	080075e1 	.word	0x080075e1

080075e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80075ea:	4b12      	ldr	r3, [pc, #72]	; (8007634 <prvTaskExitError+0x54>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d00a      	beq.n	800760a <prvTaskExitError+0x2a>
        __asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	60fb      	str	r3, [r7, #12]
    }
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <prvTaskExitError+0x28>
        __asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	60bb      	str	r3, [r7, #8]
    }
 800761c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800761e:	bf00      	nop
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0fc      	beq.n	8007620 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	24000014 	.word	0x24000014
	...

08007640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007640:	4b07      	ldr	r3, [pc, #28]	; (8007660 <pxCurrentTCBConst2>)
 8007642:	6819      	ldr	r1, [r3, #0]
 8007644:	6808      	ldr	r0, [r1, #0]
 8007646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764a:	f380 8809 	msr	PSP, r0
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f04f 0000 	mov.w	r0, #0
 8007656:	f380 8811 	msr	BASEPRI, r0
 800765a:	4770      	bx	lr
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst2>:
 8007660:	240001bc 	.word	0x240001bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop

08007668 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007668:	4808      	ldr	r0, [pc, #32]	; (800768c <prvPortStartFirstTask+0x24>)
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	6800      	ldr	r0, [r0, #0]
 800766e:	f380 8808 	msr	MSP, r0
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f380 8814 	msr	CONTROL, r0
 800767a:	b662      	cpsie	i
 800767c:	b661      	cpsie	f
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	df00      	svc	0
 8007688:	bf00      	nop
 800768a:	0000      	.short	0x0000
 800768c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop

08007694 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800769a:	4b46      	ldr	r3, [pc, #280]	; (80077b4 <xPortStartScheduler+0x120>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a46      	ldr	r2, [pc, #280]	; (80077b8 <xPortStartScheduler+0x124>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d10a      	bne.n	80076ba <xPortStartScheduler+0x26>
        __asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	613b      	str	r3, [r7, #16]
    }
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076ba:	4b3e      	ldr	r3, [pc, #248]	; (80077b4 <xPortStartScheduler+0x120>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a3f      	ldr	r2, [pc, #252]	; (80077bc <xPortStartScheduler+0x128>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d10a      	bne.n	80076da <xPortStartScheduler+0x46>
        __asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	60fb      	str	r3, [r7, #12]
    }
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076da:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <xPortStartScheduler+0x12c>)
 80076dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	22ff      	movs	r2, #255	; 0xff
 80076ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	4b31      	ldr	r3, [pc, #196]	; (80077c4 <xPortStartScheduler+0x130>)
 8007700:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007702:	4b31      	ldr	r3, [pc, #196]	; (80077c8 <xPortStartScheduler+0x134>)
 8007704:	2207      	movs	r2, #7
 8007706:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007708:	e009      	b.n	800771e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800770a:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <xPortStartScheduler+0x134>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3b01      	subs	r3, #1
 8007710:	4a2d      	ldr	r2, [pc, #180]	; (80077c8 <xPortStartScheduler+0x134>)
 8007712:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	b2db      	uxtb	r3, r3
 800771c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b80      	cmp	r3, #128	; 0x80
 8007728:	d0ef      	beq.n	800770a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800772a:	4b27      	ldr	r3, [pc, #156]	; (80077c8 <xPortStartScheduler+0x134>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f1c3 0307 	rsb	r3, r3, #7
 8007732:	2b04      	cmp	r3, #4
 8007734:	d00a      	beq.n	800774c <xPortStartScheduler+0xb8>
        __asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60bb      	str	r3, [r7, #8]
    }
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800774c:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <xPortStartScheduler+0x134>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	4a1d      	ldr	r2, [pc, #116]	; (80077c8 <xPortStartScheduler+0x134>)
 8007754:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007756:	4b1c      	ldr	r3, [pc, #112]	; (80077c8 <xPortStartScheduler+0x134>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800775e:	4a1a      	ldr	r2, [pc, #104]	; (80077c8 <xPortStartScheduler+0x134>)
 8007760:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800776a:	4b18      	ldr	r3, [pc, #96]	; (80077cc <xPortStartScheduler+0x138>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a17      	ldr	r2, [pc, #92]	; (80077cc <xPortStartScheduler+0x138>)
 8007770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007774:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <xPortStartScheduler+0x138>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a14      	ldr	r2, [pc, #80]	; (80077cc <xPortStartScheduler+0x138>)
 800777c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007780:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007782:	f000 f8db 	bl	800793c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007786:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <xPortStartScheduler+0x13c>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800778c:	f000 f8fa 	bl	8007984 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007790:	4b10      	ldr	r3, [pc, #64]	; (80077d4 <xPortStartScheduler+0x140>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a0f      	ldr	r2, [pc, #60]	; (80077d4 <xPortStartScheduler+0x140>)
 8007796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800779a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800779c:	f7ff ff64 	bl	8007668 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80077a0:	f7ff f8ea 	bl	8006978 <vTaskSwitchContext>
    prvTaskExitError();
 80077a4:	f7ff ff1c 	bl	80075e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	e000ed00 	.word	0xe000ed00
 80077b8:	410fc271 	.word	0x410fc271
 80077bc:	410fc270 	.word	0x410fc270
 80077c0:	e000e400 	.word	0xe000e400
 80077c4:	240006f8 	.word	0x240006f8
 80077c8:	240006fc 	.word	0x240006fc
 80077cc:	e000ed20 	.word	0xe000ed20
 80077d0:	24000014 	.word	0x24000014
 80077d4:	e000ef34 	.word	0xe000ef34

080077d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
        __asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	607b      	str	r3, [r7, #4]
    }
 80077f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <vPortEnterCritical+0x58>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a0d      	ldr	r2, [pc, #52]	; (8007830 <vPortEnterCritical+0x58>)
 80077fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <vPortEnterCritical+0x58>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10f      	bne.n	8007824 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007804:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <vPortEnterCritical+0x5c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <vPortEnterCritical+0x4c>
        __asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	603b      	str	r3, [r7, #0]
    }
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <vPortEnterCritical+0x4a>
    }
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	24000014 	.word	0x24000014
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <vPortExitCritical+0x50>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <vPortExitCritical+0x24>
        __asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	607b      	str	r3, [r7, #4]
    }
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <vPortExitCritical+0x50>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3b01      	subs	r3, #1
 8007862:	4a09      	ldr	r2, [pc, #36]	; (8007888 <vPortExitCritical+0x50>)
 8007864:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007866:	4b08      	ldr	r3, [pc, #32]	; (8007888 <vPortExitCritical+0x50>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <vPortExitCritical+0x42>
 800786e:	2300      	movs	r3, #0
 8007870:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007878:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	24000014 	.word	0x24000014
 800788c:	00000000 	.word	0x00000000

08007890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007890:	f3ef 8009 	mrs	r0, PSP
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <pxCurrentTCBConst>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	f01e 0f10 	tst.w	lr, #16
 80078a0:	bf08      	it	eq
 80078a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	6010      	str	r0, [r2, #0]
 80078ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078b4:	f380 8811 	msr	BASEPRI, r0
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f7ff f85a 	bl	8006978 <vTaskSwitchContext>
 80078c4:	f04f 0000 	mov.w	r0, #0
 80078c8:	f380 8811 	msr	BASEPRI, r0
 80078cc:	bc09      	pop	{r0, r3}
 80078ce:	6819      	ldr	r1, [r3, #0]
 80078d0:	6808      	ldr	r0, [r1, #0]
 80078d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d6:	f01e 0f10 	tst.w	lr, #16
 80078da:	bf08      	it	eq
 80078dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078e0:	f380 8809 	msr	PSP, r0
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	f3af 8000 	nop.w

080078f0 <pxCurrentTCBConst>:
 80078f0:	240001bc 	.word	0x240001bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
        __asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	607b      	str	r3, [r7, #4]
    }
 8007910:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007912:	f7fe ff3d 	bl	8006790 <xTaskIncrementTick>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <SysTick_Handler+0x40>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f383 8811 	msr	BASEPRI, r3
    }
 800792e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <vPortSetupTimerInterrupt+0x34>)
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <vPortSetupTimerInterrupt+0x38>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <vPortSetupTimerInterrupt+0x3c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0a      	ldr	r2, [pc, #40]	; (800797c <vPortSetupTimerInterrupt+0x40>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	099b      	lsrs	r3, r3, #6
 8007958:	4a09      	ldr	r2, [pc, #36]	; (8007980 <vPortSetupTimerInterrupt+0x44>)
 800795a:	3b01      	subs	r3, #1
 800795c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800795e:	4b04      	ldr	r3, [pc, #16]	; (8007970 <vPortSetupTimerInterrupt+0x34>)
 8007960:	2207      	movs	r2, #7
 8007962:	601a      	str	r2, [r3, #0]
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	e000e010 	.word	0xe000e010
 8007974:	e000e018 	.word	0xe000e018
 8007978:	24000000 	.word	0x24000000
 800797c:	10624dd3 	.word	0x10624dd3
 8007980:	e000e014 	.word	0xe000e014

08007984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007994 <vPortEnableVFP+0x10>
 8007988:	6801      	ldr	r1, [r0, #0]
 800798a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800798e:	6001      	str	r1, [r0, #0]
 8007990:	4770      	bx	lr
 8007992:	0000      	.short	0x0000
 8007994:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop

0800799c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80079a8:	f7fe fde6 	bl	8006578 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80079ac:	4b53      	ldr	r3, [pc, #332]	; (8007afc <pvPortMalloc+0x160>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80079b4:	f000 f908 	bl	8007bc8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d012      	beq.n	80079e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80079be:	2208      	movs	r2, #8
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	3308      	adds	r3, #8
 80079ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	43db      	mvns	r3, r3
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d804      	bhi.n	80079e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	4413      	add	r3, r2
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	e001      	b.n	80079e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	db70      	blt.n	8007acc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d06d      	beq.n	8007acc <pvPortMalloc+0x130>
 80079f0:	4b43      	ldr	r3, [pc, #268]	; (8007b00 <pvPortMalloc+0x164>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d868      	bhi.n	8007acc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80079fa:	4b42      	ldr	r3, [pc, #264]	; (8007b04 <pvPortMalloc+0x168>)
 80079fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80079fe:	4b41      	ldr	r3, [pc, #260]	; (8007b04 <pvPortMalloc+0x168>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a04:	e004      	b.n	8007a10 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d903      	bls.n	8007a22 <pvPortMalloc+0x86>
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f1      	bne.n	8007a06 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007a22:	4b36      	ldr	r3, [pc, #216]	; (8007afc <pvPortMalloc+0x160>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d04f      	beq.n	8007acc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2208      	movs	r2, #8
 8007a32:	4413      	add	r3, r2
 8007a34:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	1ad2      	subs	r2, r2, r3
 8007a46:	2308      	movs	r3, #8
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d91f      	bls.n	8007a8e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <pvPortMalloc+0xda>
        __asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	613b      	str	r3, [r7, #16]
    }
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a88:	6978      	ldr	r0, [r7, #20]
 8007a8a:	f000 f8f9 	bl	8007c80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a8e:	4b1c      	ldr	r3, [pc, #112]	; (8007b00 <pvPortMalloc+0x164>)
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	4a19      	ldr	r2, [pc, #100]	; (8007b00 <pvPortMalloc+0x164>)
 8007a9a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a9c:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <pvPortMalloc+0x164>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4b19      	ldr	r3, [pc, #100]	; (8007b08 <pvPortMalloc+0x16c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d203      	bcs.n	8007ab0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <pvPortMalloc+0x164>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a16      	ldr	r2, [pc, #88]	; (8007b08 <pvPortMalloc+0x16c>)
 8007aae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <pvPortMalloc+0x170>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a10      	ldr	r2, [pc, #64]	; (8007b0c <pvPortMalloc+0x170>)
 8007aca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007acc:	f7fe fd62 	bl	8006594 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <pvPortMalloc+0x154>
        __asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	60fb      	str	r3, [r7, #12]
    }
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <pvPortMalloc+0x152>
    return pvReturn;
 8007af0:	69fb      	ldr	r3, [r7, #28]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3728      	adds	r7, #40	; 0x28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	24004308 	.word	0x24004308
 8007b00:	2400430c 	.word	0x2400430c
 8007b04:	24004300 	.word	0x24004300
 8007b08:	24004310 	.word	0x24004310
 8007b0c:	24004314 	.word	0x24004314

08007b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d049      	beq.n	8007bb6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007b22:	2308      	movs	r3, #8
 8007b24:	425b      	negs	r3, r3
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	4413      	add	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	db0a      	blt.n	8007b4e <vPortFree+0x3e>
        __asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	60fb      	str	r3, [r7, #12]
    }
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <vPortFree+0x5c>
        __asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
    }
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	0fdb      	lsrs	r3, r3, #31
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01c      	beq.n	8007bb6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d118      	bne.n	8007bb6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007b90:	f7fe fcf2 	bl	8006578 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <vPortFree+0xb0>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4a08      	ldr	r2, [pc, #32]	; (8007bc0 <vPortFree+0xb0>)
 8007ba0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ba2:	6938      	ldr	r0, [r7, #16]
 8007ba4:	f000 f86c 	bl	8007c80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007ba8:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <vPortFree+0xb4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3301      	adds	r3, #1
 8007bae:	4a05      	ldr	r2, [pc, #20]	; (8007bc4 <vPortFree+0xb4>)
 8007bb0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007bb2:	f7fe fcef 	bl	8006594 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007bb6:	bf00      	nop
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	2400430c 	.word	0x2400430c
 8007bc4:	24004318 	.word	0x24004318

08007bc8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007bd2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007bd4:	4b25      	ldr	r3, [pc, #148]	; (8007c6c <prvHeapInit+0xa4>)
 8007bd6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00c      	beq.n	8007bfc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3307      	adds	r3, #7
 8007be6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0307 	bic.w	r3, r3, #7
 8007bee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	4a1d      	ldr	r2, [pc, #116]	; (8007c6c <prvHeapInit+0xa4>)
 8007bf8:	4413      	add	r3, r2
 8007bfa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <prvHeapInit+0xa8>)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007c06:	4b1a      	ldr	r3, [pc, #104]	; (8007c70 <prvHeapInit+0xa8>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	4413      	add	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007c14:	2208      	movs	r2, #8
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 0307 	bic.w	r3, r3, #7
 8007c22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4a13      	ldr	r2, [pc, #76]	; (8007c74 <prvHeapInit+0xac>)
 8007c28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007c2a:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <prvHeapInit+0xac>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007c32:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <prvHeapInit+0xac>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	1ad2      	subs	r2, r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <prvHeapInit+0xac>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4a08      	ldr	r2, [pc, #32]	; (8007c78 <prvHeapInit+0xb0>)
 8007c56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4a07      	ldr	r2, [pc, #28]	; (8007c7c <prvHeapInit+0xb4>)
 8007c5e:	6013      	str	r3, [r2, #0]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	24000700 	.word	0x24000700
 8007c70:	24004300 	.word	0x24004300
 8007c74:	24004308 	.word	0x24004308
 8007c78:	24004310 	.word	0x24004310
 8007c7c:	2400430c 	.word	0x2400430c

08007c80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c88:	4b28      	ldr	r3, [pc, #160]	; (8007d2c <prvInsertBlockIntoFreeList+0xac>)
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e002      	b.n	8007c94 <prvInsertBlockIntoFreeList+0x14>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d8f7      	bhi.n	8007c8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	4413      	add	r3, r2
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d108      	bne.n	8007cc2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	441a      	add	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	441a      	add	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d118      	bne.n	8007d08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <prvInsertBlockIntoFreeList+0xb0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d00d      	beq.n	8007cfe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	441a      	add	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	e008      	b.n	8007d10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <prvInsertBlockIntoFreeList+0xb0>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e003      	b.n	8007d10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d002      	beq.n	8007d1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007d1e:	bf00      	nop
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	24004300 	.word	0x24004300
 8007d30:	24004308 	.word	0x24004308

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	; (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	; (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	; (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	; (8007d78 <__libc_init_array+0x44>)
 8007d48:	f000 fd3a 	bl	80087c0 <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	080088d4 	.word	0x080088d4
 8007d70:	080088d4 	.word	0x080088d4
 8007d74:	080088d4 	.word	0x080088d4
 8007d78:	080088d8 	.word	0x080088d8

08007d7c <memcpy>:
 8007d7c:	440a      	add	r2, r1
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d84:	d100      	bne.n	8007d88 <memcpy+0xc>
 8007d86:	4770      	bx	lr
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d92:	4291      	cmp	r1, r2
 8007d94:	d1f9      	bne.n	8007d8a <memcpy+0xe>
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <memset>:
 8007d98:	4402      	add	r2, r0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d100      	bne.n	8007da2 <memset+0xa>
 8007da0:	4770      	bx	lr
 8007da2:	f803 1b01 	strb.w	r1, [r3], #1
 8007da6:	e7f9      	b.n	8007d9c <memset+0x4>

08007da8 <_puts_r>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	460e      	mov	r6, r1
 8007dac:	4605      	mov	r5, r0
 8007dae:	b118      	cbz	r0, 8007db8 <_puts_r+0x10>
 8007db0:	6983      	ldr	r3, [r0, #24]
 8007db2:	b90b      	cbnz	r3, 8007db8 <_puts_r+0x10>
 8007db4:	f000 fa48 	bl	8008248 <__sinit>
 8007db8:	69ab      	ldr	r3, [r5, #24]
 8007dba:	68ac      	ldr	r4, [r5, #8]
 8007dbc:	b913      	cbnz	r3, 8007dc4 <_puts_r+0x1c>
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f000 fa42 	bl	8008248 <__sinit>
 8007dc4:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <_puts_r+0xd0>)
 8007dc6:	429c      	cmp	r4, r3
 8007dc8:	d120      	bne.n	8007e0c <_puts_r+0x64>
 8007dca:	686c      	ldr	r4, [r5, #4]
 8007dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dce:	07db      	lsls	r3, r3, #31
 8007dd0:	d405      	bmi.n	8007dde <_puts_r+0x36>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	0598      	lsls	r0, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_puts_r+0x36>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dda:	f000 fad3 	bl	8008384 <__retarget_lock_acquire_recursive>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	0719      	lsls	r1, r3, #28
 8007de2:	d51d      	bpl.n	8007e20 <_puts_r+0x78>
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	b1db      	cbz	r3, 8007e20 <_puts_r+0x78>
 8007de8:	3e01      	subs	r6, #1
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007df0:	3b01      	subs	r3, #1
 8007df2:	60a3      	str	r3, [r4, #8]
 8007df4:	bb39      	cbnz	r1, 8007e46 <_puts_r+0x9e>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da38      	bge.n	8007e6c <_puts_r+0xc4>
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	210a      	movs	r1, #10
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 f848 	bl	8007e94 <__swbuf_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d011      	beq.n	8007e2c <_puts_r+0x84>
 8007e08:	250a      	movs	r5, #10
 8007e0a:	e011      	b.n	8007e30 <_puts_r+0x88>
 8007e0c:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <_puts_r+0xd4>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d101      	bne.n	8007e16 <_puts_r+0x6e>
 8007e12:	68ac      	ldr	r4, [r5, #8]
 8007e14:	e7da      	b.n	8007dcc <_puts_r+0x24>
 8007e16:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <_puts_r+0xd8>)
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	bf08      	it	eq
 8007e1c:	68ec      	ldreq	r4, [r5, #12]
 8007e1e:	e7d5      	b.n	8007dcc <_puts_r+0x24>
 8007e20:	4621      	mov	r1, r4
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 f888 	bl	8007f38 <__swsetup_r>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d0dd      	beq.n	8007de8 <_puts_r+0x40>
 8007e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e32:	07da      	lsls	r2, r3, #31
 8007e34:	d405      	bmi.n	8007e42 <_puts_r+0x9a>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	059b      	lsls	r3, r3, #22
 8007e3a:	d402      	bmi.n	8007e42 <_puts_r+0x9a>
 8007e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e3e:	f000 faa2 	bl	8008386 <__retarget_lock_release_recursive>
 8007e42:	4628      	mov	r0, r5
 8007e44:	bd70      	pop	{r4, r5, r6, pc}
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	da04      	bge.n	8007e54 <_puts_r+0xac>
 8007e4a:	69a2      	ldr	r2, [r4, #24]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	dc06      	bgt.n	8007e5e <_puts_r+0xb6>
 8007e50:	290a      	cmp	r1, #10
 8007e52:	d004      	beq.n	8007e5e <_puts_r+0xb6>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	6022      	str	r2, [r4, #0]
 8007e5a:	7019      	strb	r1, [r3, #0]
 8007e5c:	e7c5      	b.n	8007dea <_puts_r+0x42>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 f817 	bl	8007e94 <__swbuf_r>
 8007e66:	3001      	adds	r0, #1
 8007e68:	d1bf      	bne.n	8007dea <_puts_r+0x42>
 8007e6a:	e7df      	b.n	8007e2c <_puts_r+0x84>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	250a      	movs	r5, #10
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	6022      	str	r2, [r4, #0]
 8007e74:	701d      	strb	r5, [r3, #0]
 8007e76:	e7db      	b.n	8007e30 <_puts_r+0x88>
 8007e78:	0800888c 	.word	0x0800888c
 8007e7c:	080088ac 	.word	0x080088ac
 8007e80:	0800886c 	.word	0x0800886c

08007e84 <puts>:
 8007e84:	4b02      	ldr	r3, [pc, #8]	; (8007e90 <puts+0xc>)
 8007e86:	4601      	mov	r1, r0
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	f7ff bf8d 	b.w	8007da8 <_puts_r>
 8007e8e:	bf00      	nop
 8007e90:	24000018 	.word	0x24000018

08007e94 <__swbuf_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	460e      	mov	r6, r1
 8007e98:	4614      	mov	r4, r2
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	b118      	cbz	r0, 8007ea6 <__swbuf_r+0x12>
 8007e9e:	6983      	ldr	r3, [r0, #24]
 8007ea0:	b90b      	cbnz	r3, 8007ea6 <__swbuf_r+0x12>
 8007ea2:	f000 f9d1 	bl	8008248 <__sinit>
 8007ea6:	4b21      	ldr	r3, [pc, #132]	; (8007f2c <__swbuf_r+0x98>)
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	d12b      	bne.n	8007f04 <__swbuf_r+0x70>
 8007eac:	686c      	ldr	r4, [r5, #4]
 8007eae:	69a3      	ldr	r3, [r4, #24]
 8007eb0:	60a3      	str	r3, [r4, #8]
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	071a      	lsls	r2, r3, #28
 8007eb6:	d52f      	bpl.n	8007f18 <__swbuf_r+0x84>
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	b36b      	cbz	r3, 8007f18 <__swbuf_r+0x84>
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	6820      	ldr	r0, [r4, #0]
 8007ec0:	1ac0      	subs	r0, r0, r3
 8007ec2:	6963      	ldr	r3, [r4, #20]
 8007ec4:	b2f6      	uxtb	r6, r6
 8007ec6:	4283      	cmp	r3, r0
 8007ec8:	4637      	mov	r7, r6
 8007eca:	dc04      	bgt.n	8007ed6 <__swbuf_r+0x42>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f000 f926 	bl	8008120 <_fflush_r>
 8007ed4:	bb30      	cbnz	r0, 8007f24 <__swbuf_r+0x90>
 8007ed6:	68a3      	ldr	r3, [r4, #8]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	60a3      	str	r3, [r4, #8]
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	6022      	str	r2, [r4, #0]
 8007ee2:	701e      	strb	r6, [r3, #0]
 8007ee4:	6963      	ldr	r3, [r4, #20]
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	4283      	cmp	r3, r0
 8007eea:	d004      	beq.n	8007ef6 <__swbuf_r+0x62>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	07db      	lsls	r3, r3, #31
 8007ef0:	d506      	bpl.n	8007f00 <__swbuf_r+0x6c>
 8007ef2:	2e0a      	cmp	r6, #10
 8007ef4:	d104      	bne.n	8007f00 <__swbuf_r+0x6c>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 f911 	bl	8008120 <_fflush_r>
 8007efe:	b988      	cbnz	r0, 8007f24 <__swbuf_r+0x90>
 8007f00:	4638      	mov	r0, r7
 8007f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f04:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <__swbuf_r+0x9c>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	d101      	bne.n	8007f0e <__swbuf_r+0x7a>
 8007f0a:	68ac      	ldr	r4, [r5, #8]
 8007f0c:	e7cf      	b.n	8007eae <__swbuf_r+0x1a>
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <__swbuf_r+0xa0>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	bf08      	it	eq
 8007f14:	68ec      	ldreq	r4, [r5, #12]
 8007f16:	e7ca      	b.n	8007eae <__swbuf_r+0x1a>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 f80c 	bl	8007f38 <__swsetup_r>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d0cb      	beq.n	8007ebc <__swbuf_r+0x28>
 8007f24:	f04f 37ff 	mov.w	r7, #4294967295
 8007f28:	e7ea      	b.n	8007f00 <__swbuf_r+0x6c>
 8007f2a:	bf00      	nop
 8007f2c:	0800888c 	.word	0x0800888c
 8007f30:	080088ac 	.word	0x080088ac
 8007f34:	0800886c 	.word	0x0800886c

08007f38 <__swsetup_r>:
 8007f38:	4b32      	ldr	r3, [pc, #200]	; (8008004 <__swsetup_r+0xcc>)
 8007f3a:	b570      	push	{r4, r5, r6, lr}
 8007f3c:	681d      	ldr	r5, [r3, #0]
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460c      	mov	r4, r1
 8007f42:	b125      	cbz	r5, 8007f4e <__swsetup_r+0x16>
 8007f44:	69ab      	ldr	r3, [r5, #24]
 8007f46:	b913      	cbnz	r3, 8007f4e <__swsetup_r+0x16>
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 f97d 	bl	8008248 <__sinit>
 8007f4e:	4b2e      	ldr	r3, [pc, #184]	; (8008008 <__swsetup_r+0xd0>)
 8007f50:	429c      	cmp	r4, r3
 8007f52:	d10f      	bne.n	8007f74 <__swsetup_r+0x3c>
 8007f54:	686c      	ldr	r4, [r5, #4]
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f5c:	0719      	lsls	r1, r3, #28
 8007f5e:	d42c      	bmi.n	8007fba <__swsetup_r+0x82>
 8007f60:	06dd      	lsls	r5, r3, #27
 8007f62:	d411      	bmi.n	8007f88 <__swsetup_r+0x50>
 8007f64:	2309      	movs	r3, #9
 8007f66:	6033      	str	r3, [r6, #0]
 8007f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f72:	e03e      	b.n	8007ff2 <__swsetup_r+0xba>
 8007f74:	4b25      	ldr	r3, [pc, #148]	; (800800c <__swsetup_r+0xd4>)
 8007f76:	429c      	cmp	r4, r3
 8007f78:	d101      	bne.n	8007f7e <__swsetup_r+0x46>
 8007f7a:	68ac      	ldr	r4, [r5, #8]
 8007f7c:	e7eb      	b.n	8007f56 <__swsetup_r+0x1e>
 8007f7e:	4b24      	ldr	r3, [pc, #144]	; (8008010 <__swsetup_r+0xd8>)
 8007f80:	429c      	cmp	r4, r3
 8007f82:	bf08      	it	eq
 8007f84:	68ec      	ldreq	r4, [r5, #12]
 8007f86:	e7e6      	b.n	8007f56 <__swsetup_r+0x1e>
 8007f88:	0758      	lsls	r0, r3, #29
 8007f8a:	d512      	bpl.n	8007fb2 <__swsetup_r+0x7a>
 8007f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f8e:	b141      	cbz	r1, 8007fa2 <__swsetup_r+0x6a>
 8007f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f94:	4299      	cmp	r1, r3
 8007f96:	d002      	beq.n	8007f9e <__swsetup_r+0x66>
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 fa5b 	bl	8008454 <_free_r>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	2300      	movs	r3, #0
 8007fac:	6063      	str	r3, [r4, #4]
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f043 0308 	orr.w	r3, r3, #8
 8007fb8:	81a3      	strh	r3, [r4, #12]
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	b94b      	cbnz	r3, 8007fd2 <__swsetup_r+0x9a>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc8:	d003      	beq.n	8007fd2 <__swsetup_r+0x9a>
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f000 fa01 	bl	80083d4 <__smakebuf_r>
 8007fd2:	89a0      	ldrh	r0, [r4, #12]
 8007fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fd8:	f010 0301 	ands.w	r3, r0, #1
 8007fdc:	d00a      	beq.n	8007ff4 <__swsetup_r+0xbc>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60a3      	str	r3, [r4, #8]
 8007fe2:	6963      	ldr	r3, [r4, #20]
 8007fe4:	425b      	negs	r3, r3
 8007fe6:	61a3      	str	r3, [r4, #24]
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	b943      	cbnz	r3, 8007ffe <__swsetup_r+0xc6>
 8007fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ff0:	d1ba      	bne.n	8007f68 <__swsetup_r+0x30>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	0781      	lsls	r1, r0, #30
 8007ff6:	bf58      	it	pl
 8007ff8:	6963      	ldrpl	r3, [r4, #20]
 8007ffa:	60a3      	str	r3, [r4, #8]
 8007ffc:	e7f4      	b.n	8007fe8 <__swsetup_r+0xb0>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e7f7      	b.n	8007ff2 <__swsetup_r+0xba>
 8008002:	bf00      	nop
 8008004:	24000018 	.word	0x24000018
 8008008:	0800888c 	.word	0x0800888c
 800800c:	080088ac 	.word	0x080088ac
 8008010:	0800886c 	.word	0x0800886c

08008014 <__sflush_r>:
 8008014:	898a      	ldrh	r2, [r1, #12]
 8008016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801a:	4605      	mov	r5, r0
 800801c:	0710      	lsls	r0, r2, #28
 800801e:	460c      	mov	r4, r1
 8008020:	d458      	bmi.n	80080d4 <__sflush_r+0xc0>
 8008022:	684b      	ldr	r3, [r1, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	dc05      	bgt.n	8008034 <__sflush_r+0x20>
 8008028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800802a:	2b00      	cmp	r3, #0
 800802c:	dc02      	bgt.n	8008034 <__sflush_r+0x20>
 800802e:	2000      	movs	r0, #0
 8008030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008036:	2e00      	cmp	r6, #0
 8008038:	d0f9      	beq.n	800802e <__sflush_r+0x1a>
 800803a:	2300      	movs	r3, #0
 800803c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008040:	682f      	ldr	r7, [r5, #0]
 8008042:	602b      	str	r3, [r5, #0]
 8008044:	d032      	beq.n	80080ac <__sflush_r+0x98>
 8008046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	075a      	lsls	r2, r3, #29
 800804c:	d505      	bpl.n	800805a <__sflush_r+0x46>
 800804e:	6863      	ldr	r3, [r4, #4]
 8008050:	1ac0      	subs	r0, r0, r3
 8008052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008054:	b10b      	cbz	r3, 800805a <__sflush_r+0x46>
 8008056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008058:	1ac0      	subs	r0, r0, r3
 800805a:	2300      	movs	r3, #0
 800805c:	4602      	mov	r2, r0
 800805e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008060:	6a21      	ldr	r1, [r4, #32]
 8008062:	4628      	mov	r0, r5
 8008064:	47b0      	blx	r6
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	d106      	bne.n	800807a <__sflush_r+0x66>
 800806c:	6829      	ldr	r1, [r5, #0]
 800806e:	291d      	cmp	r1, #29
 8008070:	d82c      	bhi.n	80080cc <__sflush_r+0xb8>
 8008072:	4a2a      	ldr	r2, [pc, #168]	; (800811c <__sflush_r+0x108>)
 8008074:	40ca      	lsrs	r2, r1
 8008076:	07d6      	lsls	r6, r2, #31
 8008078:	d528      	bpl.n	80080cc <__sflush_r+0xb8>
 800807a:	2200      	movs	r2, #0
 800807c:	6062      	str	r2, [r4, #4]
 800807e:	04d9      	lsls	r1, r3, #19
 8008080:	6922      	ldr	r2, [r4, #16]
 8008082:	6022      	str	r2, [r4, #0]
 8008084:	d504      	bpl.n	8008090 <__sflush_r+0x7c>
 8008086:	1c42      	adds	r2, r0, #1
 8008088:	d101      	bne.n	800808e <__sflush_r+0x7a>
 800808a:	682b      	ldr	r3, [r5, #0]
 800808c:	b903      	cbnz	r3, 8008090 <__sflush_r+0x7c>
 800808e:	6560      	str	r0, [r4, #84]	; 0x54
 8008090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008092:	602f      	str	r7, [r5, #0]
 8008094:	2900      	cmp	r1, #0
 8008096:	d0ca      	beq.n	800802e <__sflush_r+0x1a>
 8008098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800809c:	4299      	cmp	r1, r3
 800809e:	d002      	beq.n	80080a6 <__sflush_r+0x92>
 80080a0:	4628      	mov	r0, r5
 80080a2:	f000 f9d7 	bl	8008454 <_free_r>
 80080a6:	2000      	movs	r0, #0
 80080a8:	6360      	str	r0, [r4, #52]	; 0x34
 80080aa:	e7c1      	b.n	8008030 <__sflush_r+0x1c>
 80080ac:	6a21      	ldr	r1, [r4, #32]
 80080ae:	2301      	movs	r3, #1
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b0      	blx	r6
 80080b4:	1c41      	adds	r1, r0, #1
 80080b6:	d1c7      	bne.n	8008048 <__sflush_r+0x34>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0c4      	beq.n	8008048 <__sflush_r+0x34>
 80080be:	2b1d      	cmp	r3, #29
 80080c0:	d001      	beq.n	80080c6 <__sflush_r+0xb2>
 80080c2:	2b16      	cmp	r3, #22
 80080c4:	d101      	bne.n	80080ca <__sflush_r+0xb6>
 80080c6:	602f      	str	r7, [r5, #0]
 80080c8:	e7b1      	b.n	800802e <__sflush_r+0x1a>
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	e7ad      	b.n	8008030 <__sflush_r+0x1c>
 80080d4:	690f      	ldr	r7, [r1, #16]
 80080d6:	2f00      	cmp	r7, #0
 80080d8:	d0a9      	beq.n	800802e <__sflush_r+0x1a>
 80080da:	0793      	lsls	r3, r2, #30
 80080dc:	680e      	ldr	r6, [r1, #0]
 80080de:	bf08      	it	eq
 80080e0:	694b      	ldreq	r3, [r1, #20]
 80080e2:	600f      	str	r7, [r1, #0]
 80080e4:	bf18      	it	ne
 80080e6:	2300      	movne	r3, #0
 80080e8:	eba6 0807 	sub.w	r8, r6, r7
 80080ec:	608b      	str	r3, [r1, #8]
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	dd9c      	ble.n	800802e <__sflush_r+0x1a>
 80080f4:	6a21      	ldr	r1, [r4, #32]
 80080f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080f8:	4643      	mov	r3, r8
 80080fa:	463a      	mov	r2, r7
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b0      	blx	r6
 8008100:	2800      	cmp	r0, #0
 8008102:	dc06      	bgt.n	8008112 <__sflush_r+0xfe>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	e78e      	b.n	8008030 <__sflush_r+0x1c>
 8008112:	4407      	add	r7, r0
 8008114:	eba8 0800 	sub.w	r8, r8, r0
 8008118:	e7e9      	b.n	80080ee <__sflush_r+0xda>
 800811a:	bf00      	nop
 800811c:	20400001 	.word	0x20400001

08008120 <_fflush_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	690b      	ldr	r3, [r1, #16]
 8008124:	4605      	mov	r5, r0
 8008126:	460c      	mov	r4, r1
 8008128:	b913      	cbnz	r3, 8008130 <_fflush_r+0x10>
 800812a:	2500      	movs	r5, #0
 800812c:	4628      	mov	r0, r5
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	b118      	cbz	r0, 800813a <_fflush_r+0x1a>
 8008132:	6983      	ldr	r3, [r0, #24]
 8008134:	b90b      	cbnz	r3, 800813a <_fflush_r+0x1a>
 8008136:	f000 f887 	bl	8008248 <__sinit>
 800813a:	4b14      	ldr	r3, [pc, #80]	; (800818c <_fflush_r+0x6c>)
 800813c:	429c      	cmp	r4, r3
 800813e:	d11b      	bne.n	8008178 <_fflush_r+0x58>
 8008140:	686c      	ldr	r4, [r5, #4]
 8008142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0ef      	beq.n	800812a <_fflush_r+0xa>
 800814a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800814c:	07d0      	lsls	r0, r2, #31
 800814e:	d404      	bmi.n	800815a <_fflush_r+0x3a>
 8008150:	0599      	lsls	r1, r3, #22
 8008152:	d402      	bmi.n	800815a <_fflush_r+0x3a>
 8008154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008156:	f000 f915 	bl	8008384 <__retarget_lock_acquire_recursive>
 800815a:	4628      	mov	r0, r5
 800815c:	4621      	mov	r1, r4
 800815e:	f7ff ff59 	bl	8008014 <__sflush_r>
 8008162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008164:	07da      	lsls	r2, r3, #31
 8008166:	4605      	mov	r5, r0
 8008168:	d4e0      	bmi.n	800812c <_fflush_r+0xc>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	059b      	lsls	r3, r3, #22
 800816e:	d4dd      	bmi.n	800812c <_fflush_r+0xc>
 8008170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008172:	f000 f908 	bl	8008386 <__retarget_lock_release_recursive>
 8008176:	e7d9      	b.n	800812c <_fflush_r+0xc>
 8008178:	4b05      	ldr	r3, [pc, #20]	; (8008190 <_fflush_r+0x70>)
 800817a:	429c      	cmp	r4, r3
 800817c:	d101      	bne.n	8008182 <_fflush_r+0x62>
 800817e:	68ac      	ldr	r4, [r5, #8]
 8008180:	e7df      	b.n	8008142 <_fflush_r+0x22>
 8008182:	4b04      	ldr	r3, [pc, #16]	; (8008194 <_fflush_r+0x74>)
 8008184:	429c      	cmp	r4, r3
 8008186:	bf08      	it	eq
 8008188:	68ec      	ldreq	r4, [r5, #12]
 800818a:	e7da      	b.n	8008142 <_fflush_r+0x22>
 800818c:	0800888c 	.word	0x0800888c
 8008190:	080088ac 	.word	0x080088ac
 8008194:	0800886c 	.word	0x0800886c

08008198 <std>:
 8008198:	2300      	movs	r3, #0
 800819a:	b510      	push	{r4, lr}
 800819c:	4604      	mov	r4, r0
 800819e:	e9c0 3300 	strd	r3, r3, [r0]
 80081a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081a6:	6083      	str	r3, [r0, #8]
 80081a8:	8181      	strh	r1, [r0, #12]
 80081aa:	6643      	str	r3, [r0, #100]	; 0x64
 80081ac:	81c2      	strh	r2, [r0, #14]
 80081ae:	6183      	str	r3, [r0, #24]
 80081b0:	4619      	mov	r1, r3
 80081b2:	2208      	movs	r2, #8
 80081b4:	305c      	adds	r0, #92	; 0x5c
 80081b6:	f7ff fdef 	bl	8007d98 <memset>
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <std+0x38>)
 80081bc:	6263      	str	r3, [r4, #36]	; 0x24
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <std+0x3c>)
 80081c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <std+0x40>)
 80081c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <std+0x44>)
 80081c8:	6224      	str	r4, [r4, #32]
 80081ca:	6323      	str	r3, [r4, #48]	; 0x30
 80081cc:	bd10      	pop	{r4, pc}
 80081ce:	bf00      	nop
 80081d0:	08008635 	.word	0x08008635
 80081d4:	08008657 	.word	0x08008657
 80081d8:	0800868f 	.word	0x0800868f
 80081dc:	080086b3 	.word	0x080086b3

080081e0 <_cleanup_r>:
 80081e0:	4901      	ldr	r1, [pc, #4]	; (80081e8 <_cleanup_r+0x8>)
 80081e2:	f000 b8af 	b.w	8008344 <_fwalk_reent>
 80081e6:	bf00      	nop
 80081e8:	08008121 	.word	0x08008121

080081ec <__sfmoreglue>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	2268      	movs	r2, #104	; 0x68
 80081f0:	1e4d      	subs	r5, r1, #1
 80081f2:	4355      	muls	r5, r2
 80081f4:	460e      	mov	r6, r1
 80081f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081fa:	f000 f997 	bl	800852c <_malloc_r>
 80081fe:	4604      	mov	r4, r0
 8008200:	b140      	cbz	r0, 8008214 <__sfmoreglue+0x28>
 8008202:	2100      	movs	r1, #0
 8008204:	e9c0 1600 	strd	r1, r6, [r0]
 8008208:	300c      	adds	r0, #12
 800820a:	60a0      	str	r0, [r4, #8]
 800820c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008210:	f7ff fdc2 	bl	8007d98 <memset>
 8008214:	4620      	mov	r0, r4
 8008216:	bd70      	pop	{r4, r5, r6, pc}

08008218 <__sfp_lock_acquire>:
 8008218:	4801      	ldr	r0, [pc, #4]	; (8008220 <__sfp_lock_acquire+0x8>)
 800821a:	f000 b8b3 	b.w	8008384 <__retarget_lock_acquire_recursive>
 800821e:	bf00      	nop
 8008220:	2400431d 	.word	0x2400431d

08008224 <__sfp_lock_release>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__sfp_lock_release+0x8>)
 8008226:	f000 b8ae 	b.w	8008386 <__retarget_lock_release_recursive>
 800822a:	bf00      	nop
 800822c:	2400431d 	.word	0x2400431d

08008230 <__sinit_lock_acquire>:
 8008230:	4801      	ldr	r0, [pc, #4]	; (8008238 <__sinit_lock_acquire+0x8>)
 8008232:	f000 b8a7 	b.w	8008384 <__retarget_lock_acquire_recursive>
 8008236:	bf00      	nop
 8008238:	2400431e 	.word	0x2400431e

0800823c <__sinit_lock_release>:
 800823c:	4801      	ldr	r0, [pc, #4]	; (8008244 <__sinit_lock_release+0x8>)
 800823e:	f000 b8a2 	b.w	8008386 <__retarget_lock_release_recursive>
 8008242:	bf00      	nop
 8008244:	2400431e 	.word	0x2400431e

08008248 <__sinit>:
 8008248:	b510      	push	{r4, lr}
 800824a:	4604      	mov	r4, r0
 800824c:	f7ff fff0 	bl	8008230 <__sinit_lock_acquire>
 8008250:	69a3      	ldr	r3, [r4, #24]
 8008252:	b11b      	cbz	r3, 800825c <__sinit+0x14>
 8008254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008258:	f7ff bff0 	b.w	800823c <__sinit_lock_release>
 800825c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008260:	6523      	str	r3, [r4, #80]	; 0x50
 8008262:	4b13      	ldr	r3, [pc, #76]	; (80082b0 <__sinit+0x68>)
 8008264:	4a13      	ldr	r2, [pc, #76]	; (80082b4 <__sinit+0x6c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	62a2      	str	r2, [r4, #40]	; 0x28
 800826a:	42a3      	cmp	r3, r4
 800826c:	bf04      	itt	eq
 800826e:	2301      	moveq	r3, #1
 8008270:	61a3      	streq	r3, [r4, #24]
 8008272:	4620      	mov	r0, r4
 8008274:	f000 f820 	bl	80082b8 <__sfp>
 8008278:	6060      	str	r0, [r4, #4]
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f81c 	bl	80082b8 <__sfp>
 8008280:	60a0      	str	r0, [r4, #8]
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f818 	bl	80082b8 <__sfp>
 8008288:	2200      	movs	r2, #0
 800828a:	60e0      	str	r0, [r4, #12]
 800828c:	2104      	movs	r1, #4
 800828e:	6860      	ldr	r0, [r4, #4]
 8008290:	f7ff ff82 	bl	8008198 <std>
 8008294:	68a0      	ldr	r0, [r4, #8]
 8008296:	2201      	movs	r2, #1
 8008298:	2109      	movs	r1, #9
 800829a:	f7ff ff7d 	bl	8008198 <std>
 800829e:	68e0      	ldr	r0, [r4, #12]
 80082a0:	2202      	movs	r2, #2
 80082a2:	2112      	movs	r1, #18
 80082a4:	f7ff ff78 	bl	8008198 <std>
 80082a8:	2301      	movs	r3, #1
 80082aa:	61a3      	str	r3, [r4, #24]
 80082ac:	e7d2      	b.n	8008254 <__sinit+0xc>
 80082ae:	bf00      	nop
 80082b0:	08008868 	.word	0x08008868
 80082b4:	080081e1 	.word	0x080081e1

080082b8 <__sfp>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	4607      	mov	r7, r0
 80082bc:	f7ff ffac 	bl	8008218 <__sfp_lock_acquire>
 80082c0:	4b1e      	ldr	r3, [pc, #120]	; (800833c <__sfp+0x84>)
 80082c2:	681e      	ldr	r6, [r3, #0]
 80082c4:	69b3      	ldr	r3, [r6, #24]
 80082c6:	b913      	cbnz	r3, 80082ce <__sfp+0x16>
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff ffbd 	bl	8008248 <__sinit>
 80082ce:	3648      	adds	r6, #72	; 0x48
 80082d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	d503      	bpl.n	80082e0 <__sfp+0x28>
 80082d8:	6833      	ldr	r3, [r6, #0]
 80082da:	b30b      	cbz	r3, 8008320 <__sfp+0x68>
 80082dc:	6836      	ldr	r6, [r6, #0]
 80082de:	e7f7      	b.n	80082d0 <__sfp+0x18>
 80082e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082e4:	b9d5      	cbnz	r5, 800831c <__sfp+0x64>
 80082e6:	4b16      	ldr	r3, [pc, #88]	; (8008340 <__sfp+0x88>)
 80082e8:	60e3      	str	r3, [r4, #12]
 80082ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082ee:	6665      	str	r5, [r4, #100]	; 0x64
 80082f0:	f000 f847 	bl	8008382 <__retarget_lock_init_recursive>
 80082f4:	f7ff ff96 	bl	8008224 <__sfp_lock_release>
 80082f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008300:	6025      	str	r5, [r4, #0]
 8008302:	61a5      	str	r5, [r4, #24]
 8008304:	2208      	movs	r2, #8
 8008306:	4629      	mov	r1, r5
 8008308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800830c:	f7ff fd44 	bl	8007d98 <memset>
 8008310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008318:	4620      	mov	r0, r4
 800831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831c:	3468      	adds	r4, #104	; 0x68
 800831e:	e7d9      	b.n	80082d4 <__sfp+0x1c>
 8008320:	2104      	movs	r1, #4
 8008322:	4638      	mov	r0, r7
 8008324:	f7ff ff62 	bl	80081ec <__sfmoreglue>
 8008328:	4604      	mov	r4, r0
 800832a:	6030      	str	r0, [r6, #0]
 800832c:	2800      	cmp	r0, #0
 800832e:	d1d5      	bne.n	80082dc <__sfp+0x24>
 8008330:	f7ff ff78 	bl	8008224 <__sfp_lock_release>
 8008334:	230c      	movs	r3, #12
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	e7ee      	b.n	8008318 <__sfp+0x60>
 800833a:	bf00      	nop
 800833c:	08008868 	.word	0x08008868
 8008340:	ffff0001 	.word	0xffff0001

08008344 <_fwalk_reent>:
 8008344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008348:	4606      	mov	r6, r0
 800834a:	4688      	mov	r8, r1
 800834c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008350:	2700      	movs	r7, #0
 8008352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008356:	f1b9 0901 	subs.w	r9, r9, #1
 800835a:	d505      	bpl.n	8008368 <_fwalk_reent+0x24>
 800835c:	6824      	ldr	r4, [r4, #0]
 800835e:	2c00      	cmp	r4, #0
 8008360:	d1f7      	bne.n	8008352 <_fwalk_reent+0xe>
 8008362:	4638      	mov	r0, r7
 8008364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008368:	89ab      	ldrh	r3, [r5, #12]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d907      	bls.n	800837e <_fwalk_reent+0x3a>
 800836e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008372:	3301      	adds	r3, #1
 8008374:	d003      	beq.n	800837e <_fwalk_reent+0x3a>
 8008376:	4629      	mov	r1, r5
 8008378:	4630      	mov	r0, r6
 800837a:	47c0      	blx	r8
 800837c:	4307      	orrs	r7, r0
 800837e:	3568      	adds	r5, #104	; 0x68
 8008380:	e7e9      	b.n	8008356 <_fwalk_reent+0x12>

08008382 <__retarget_lock_init_recursive>:
 8008382:	4770      	bx	lr

08008384 <__retarget_lock_acquire_recursive>:
 8008384:	4770      	bx	lr

08008386 <__retarget_lock_release_recursive>:
 8008386:	4770      	bx	lr

08008388 <__swhatbuf_r>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	460e      	mov	r6, r1
 800838c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008390:	2900      	cmp	r1, #0
 8008392:	b096      	sub	sp, #88	; 0x58
 8008394:	4614      	mov	r4, r2
 8008396:	461d      	mov	r5, r3
 8008398:	da08      	bge.n	80083ac <__swhatbuf_r+0x24>
 800839a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	061a      	lsls	r2, r3, #24
 80083a4:	d410      	bmi.n	80083c8 <__swhatbuf_r+0x40>
 80083a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083aa:	e00e      	b.n	80083ca <__swhatbuf_r+0x42>
 80083ac:	466a      	mov	r2, sp
 80083ae:	f000 f9a7 	bl	8008700 <_fstat_r>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	dbf1      	blt.n	800839a <__swhatbuf_r+0x12>
 80083b6:	9a01      	ldr	r2, [sp, #4]
 80083b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083c0:	425a      	negs	r2, r3
 80083c2:	415a      	adcs	r2, r3
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	e7ee      	b.n	80083a6 <__swhatbuf_r+0x1e>
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	2000      	movs	r0, #0
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	b016      	add	sp, #88	; 0x58
 80083d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080083d4 <__smakebuf_r>:
 80083d4:	898b      	ldrh	r3, [r1, #12]
 80083d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083d8:	079d      	lsls	r5, r3, #30
 80083da:	4606      	mov	r6, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	d507      	bpl.n	80083f0 <__smakebuf_r+0x1c>
 80083e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	2301      	movs	r3, #1
 80083ea:	6163      	str	r3, [r4, #20]
 80083ec:	b002      	add	sp, #8
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	ab01      	add	r3, sp, #4
 80083f2:	466a      	mov	r2, sp
 80083f4:	f7ff ffc8 	bl	8008388 <__swhatbuf_r>
 80083f8:	9900      	ldr	r1, [sp, #0]
 80083fa:	4605      	mov	r5, r0
 80083fc:	4630      	mov	r0, r6
 80083fe:	f000 f895 	bl	800852c <_malloc_r>
 8008402:	b948      	cbnz	r0, 8008418 <__smakebuf_r+0x44>
 8008404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008408:	059a      	lsls	r2, r3, #22
 800840a:	d4ef      	bmi.n	80083ec <__smakebuf_r+0x18>
 800840c:	f023 0303 	bic.w	r3, r3, #3
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	e7e3      	b.n	80083e0 <__smakebuf_r+0xc>
 8008418:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <__smakebuf_r+0x7c>)
 800841a:	62b3      	str	r3, [r6, #40]	; 0x28
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	6020      	str	r0, [r4, #0]
 8008420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	6163      	str	r3, [r4, #20]
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	6120      	str	r0, [r4, #16]
 800842e:	b15b      	cbz	r3, 8008448 <__smakebuf_r+0x74>
 8008430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008434:	4630      	mov	r0, r6
 8008436:	f000 f975 	bl	8008724 <_isatty_r>
 800843a:	b128      	cbz	r0, 8008448 <__smakebuf_r+0x74>
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f023 0303 	bic.w	r3, r3, #3
 8008442:	f043 0301 	orr.w	r3, r3, #1
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	89a0      	ldrh	r0, [r4, #12]
 800844a:	4305      	orrs	r5, r0
 800844c:	81a5      	strh	r5, [r4, #12]
 800844e:	e7cd      	b.n	80083ec <__smakebuf_r+0x18>
 8008450:	080081e1 	.word	0x080081e1

08008454 <_free_r>:
 8008454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008456:	2900      	cmp	r1, #0
 8008458:	d044      	beq.n	80084e4 <_free_r+0x90>
 800845a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845e:	9001      	str	r0, [sp, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f1a1 0404 	sub.w	r4, r1, #4
 8008466:	bfb8      	it	lt
 8008468:	18e4      	addlt	r4, r4, r3
 800846a:	f000 f97d 	bl	8008768 <__malloc_lock>
 800846e:	4a1e      	ldr	r2, [pc, #120]	; (80084e8 <_free_r+0x94>)
 8008470:	9801      	ldr	r0, [sp, #4]
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	b933      	cbnz	r3, 8008484 <_free_r+0x30>
 8008476:	6063      	str	r3, [r4, #4]
 8008478:	6014      	str	r4, [r2, #0]
 800847a:	b003      	add	sp, #12
 800847c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008480:	f000 b978 	b.w	8008774 <__malloc_unlock>
 8008484:	42a3      	cmp	r3, r4
 8008486:	d908      	bls.n	800849a <_free_r+0x46>
 8008488:	6825      	ldr	r5, [r4, #0]
 800848a:	1961      	adds	r1, r4, r5
 800848c:	428b      	cmp	r3, r1
 800848e:	bf01      	itttt	eq
 8008490:	6819      	ldreq	r1, [r3, #0]
 8008492:	685b      	ldreq	r3, [r3, #4]
 8008494:	1949      	addeq	r1, r1, r5
 8008496:	6021      	streq	r1, [r4, #0]
 8008498:	e7ed      	b.n	8008476 <_free_r+0x22>
 800849a:	461a      	mov	r2, r3
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	b10b      	cbz	r3, 80084a4 <_free_r+0x50>
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d9fa      	bls.n	800849a <_free_r+0x46>
 80084a4:	6811      	ldr	r1, [r2, #0]
 80084a6:	1855      	adds	r5, r2, r1
 80084a8:	42a5      	cmp	r5, r4
 80084aa:	d10b      	bne.n	80084c4 <_free_r+0x70>
 80084ac:	6824      	ldr	r4, [r4, #0]
 80084ae:	4421      	add	r1, r4
 80084b0:	1854      	adds	r4, r2, r1
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	6011      	str	r1, [r2, #0]
 80084b6:	d1e0      	bne.n	800847a <_free_r+0x26>
 80084b8:	681c      	ldr	r4, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	6053      	str	r3, [r2, #4]
 80084be:	4421      	add	r1, r4
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	e7da      	b.n	800847a <_free_r+0x26>
 80084c4:	d902      	bls.n	80084cc <_free_r+0x78>
 80084c6:	230c      	movs	r3, #12
 80084c8:	6003      	str	r3, [r0, #0]
 80084ca:	e7d6      	b.n	800847a <_free_r+0x26>
 80084cc:	6825      	ldr	r5, [r4, #0]
 80084ce:	1961      	adds	r1, r4, r5
 80084d0:	428b      	cmp	r3, r1
 80084d2:	bf04      	itt	eq
 80084d4:	6819      	ldreq	r1, [r3, #0]
 80084d6:	685b      	ldreq	r3, [r3, #4]
 80084d8:	6063      	str	r3, [r4, #4]
 80084da:	bf04      	itt	eq
 80084dc:	1949      	addeq	r1, r1, r5
 80084de:	6021      	streq	r1, [r4, #0]
 80084e0:	6054      	str	r4, [r2, #4]
 80084e2:	e7ca      	b.n	800847a <_free_r+0x26>
 80084e4:	b003      	add	sp, #12
 80084e6:	bd30      	pop	{r4, r5, pc}
 80084e8:	24004320 	.word	0x24004320

080084ec <sbrk_aligned>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	4e0e      	ldr	r6, [pc, #56]	; (8008528 <sbrk_aligned+0x3c>)
 80084f0:	460c      	mov	r4, r1
 80084f2:	6831      	ldr	r1, [r6, #0]
 80084f4:	4605      	mov	r5, r0
 80084f6:	b911      	cbnz	r1, 80084fe <sbrk_aligned+0x12>
 80084f8:	f000 f88c 	bl	8008614 <_sbrk_r>
 80084fc:	6030      	str	r0, [r6, #0]
 80084fe:	4621      	mov	r1, r4
 8008500:	4628      	mov	r0, r5
 8008502:	f000 f887 	bl	8008614 <_sbrk_r>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d00a      	beq.n	8008520 <sbrk_aligned+0x34>
 800850a:	1cc4      	adds	r4, r0, #3
 800850c:	f024 0403 	bic.w	r4, r4, #3
 8008510:	42a0      	cmp	r0, r4
 8008512:	d007      	beq.n	8008524 <sbrk_aligned+0x38>
 8008514:	1a21      	subs	r1, r4, r0
 8008516:	4628      	mov	r0, r5
 8008518:	f000 f87c 	bl	8008614 <_sbrk_r>
 800851c:	3001      	adds	r0, #1
 800851e:	d101      	bne.n	8008524 <sbrk_aligned+0x38>
 8008520:	f04f 34ff 	mov.w	r4, #4294967295
 8008524:	4620      	mov	r0, r4
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	24004324 	.word	0x24004324

0800852c <_malloc_r>:
 800852c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008530:	1ccd      	adds	r5, r1, #3
 8008532:	f025 0503 	bic.w	r5, r5, #3
 8008536:	3508      	adds	r5, #8
 8008538:	2d0c      	cmp	r5, #12
 800853a:	bf38      	it	cc
 800853c:	250c      	movcc	r5, #12
 800853e:	2d00      	cmp	r5, #0
 8008540:	4607      	mov	r7, r0
 8008542:	db01      	blt.n	8008548 <_malloc_r+0x1c>
 8008544:	42a9      	cmp	r1, r5
 8008546:	d905      	bls.n	8008554 <_malloc_r+0x28>
 8008548:	230c      	movs	r3, #12
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	2600      	movs	r6, #0
 800854e:	4630      	mov	r0, r6
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	4e2e      	ldr	r6, [pc, #184]	; (8008610 <_malloc_r+0xe4>)
 8008556:	f000 f907 	bl	8008768 <__malloc_lock>
 800855a:	6833      	ldr	r3, [r6, #0]
 800855c:	461c      	mov	r4, r3
 800855e:	bb34      	cbnz	r4, 80085ae <_malloc_r+0x82>
 8008560:	4629      	mov	r1, r5
 8008562:	4638      	mov	r0, r7
 8008564:	f7ff ffc2 	bl	80084ec <sbrk_aligned>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	4604      	mov	r4, r0
 800856c:	d14d      	bne.n	800860a <_malloc_r+0xde>
 800856e:	6834      	ldr	r4, [r6, #0]
 8008570:	4626      	mov	r6, r4
 8008572:	2e00      	cmp	r6, #0
 8008574:	d140      	bne.n	80085f8 <_malloc_r+0xcc>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	4631      	mov	r1, r6
 800857a:	4638      	mov	r0, r7
 800857c:	eb04 0803 	add.w	r8, r4, r3
 8008580:	f000 f848 	bl	8008614 <_sbrk_r>
 8008584:	4580      	cmp	r8, r0
 8008586:	d13a      	bne.n	80085fe <_malloc_r+0xd2>
 8008588:	6821      	ldr	r1, [r4, #0]
 800858a:	3503      	adds	r5, #3
 800858c:	1a6d      	subs	r5, r5, r1
 800858e:	f025 0503 	bic.w	r5, r5, #3
 8008592:	3508      	adds	r5, #8
 8008594:	2d0c      	cmp	r5, #12
 8008596:	bf38      	it	cc
 8008598:	250c      	movcc	r5, #12
 800859a:	4629      	mov	r1, r5
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff ffa5 	bl	80084ec <sbrk_aligned>
 80085a2:	3001      	adds	r0, #1
 80085a4:	d02b      	beq.n	80085fe <_malloc_r+0xd2>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	442b      	add	r3, r5
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	e00e      	b.n	80085cc <_malloc_r+0xa0>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	1b52      	subs	r2, r2, r5
 80085b2:	d41e      	bmi.n	80085f2 <_malloc_r+0xc6>
 80085b4:	2a0b      	cmp	r2, #11
 80085b6:	d916      	bls.n	80085e6 <_malloc_r+0xba>
 80085b8:	1961      	adds	r1, r4, r5
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	6025      	str	r5, [r4, #0]
 80085be:	bf18      	it	ne
 80085c0:	6059      	strne	r1, [r3, #4]
 80085c2:	6863      	ldr	r3, [r4, #4]
 80085c4:	bf08      	it	eq
 80085c6:	6031      	streq	r1, [r6, #0]
 80085c8:	5162      	str	r2, [r4, r5]
 80085ca:	604b      	str	r3, [r1, #4]
 80085cc:	4638      	mov	r0, r7
 80085ce:	f104 060b 	add.w	r6, r4, #11
 80085d2:	f000 f8cf 	bl	8008774 <__malloc_unlock>
 80085d6:	f026 0607 	bic.w	r6, r6, #7
 80085da:	1d23      	adds	r3, r4, #4
 80085dc:	1af2      	subs	r2, r6, r3
 80085de:	d0b6      	beq.n	800854e <_malloc_r+0x22>
 80085e0:	1b9b      	subs	r3, r3, r6
 80085e2:	50a3      	str	r3, [r4, r2]
 80085e4:	e7b3      	b.n	800854e <_malloc_r+0x22>
 80085e6:	6862      	ldr	r2, [r4, #4]
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	bf0c      	ite	eq
 80085ec:	6032      	streq	r2, [r6, #0]
 80085ee:	605a      	strne	r2, [r3, #4]
 80085f0:	e7ec      	b.n	80085cc <_malloc_r+0xa0>
 80085f2:	4623      	mov	r3, r4
 80085f4:	6864      	ldr	r4, [r4, #4]
 80085f6:	e7b2      	b.n	800855e <_malloc_r+0x32>
 80085f8:	4634      	mov	r4, r6
 80085fa:	6876      	ldr	r6, [r6, #4]
 80085fc:	e7b9      	b.n	8008572 <_malloc_r+0x46>
 80085fe:	230c      	movs	r3, #12
 8008600:	603b      	str	r3, [r7, #0]
 8008602:	4638      	mov	r0, r7
 8008604:	f000 f8b6 	bl	8008774 <__malloc_unlock>
 8008608:	e7a1      	b.n	800854e <_malloc_r+0x22>
 800860a:	6025      	str	r5, [r4, #0]
 800860c:	e7de      	b.n	80085cc <_malloc_r+0xa0>
 800860e:	bf00      	nop
 8008610:	24004320 	.word	0x24004320

08008614 <_sbrk_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4d06      	ldr	r5, [pc, #24]	; (8008630 <_sbrk_r+0x1c>)
 8008618:	2300      	movs	r3, #0
 800861a:	4604      	mov	r4, r0
 800861c:	4608      	mov	r0, r1
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	f000 f8c0 	bl	80087a4 <_sbrk>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d102      	bne.n	800862e <_sbrk_r+0x1a>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b103      	cbz	r3, 800862e <_sbrk_r+0x1a>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	24004328 	.word	0x24004328

08008634 <__sread>:
 8008634:	b510      	push	{r4, lr}
 8008636:	460c      	mov	r4, r1
 8008638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863c:	f000 f8a0 	bl	8008780 <_read_r>
 8008640:	2800      	cmp	r0, #0
 8008642:	bfab      	itete	ge
 8008644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008646:	89a3      	ldrhlt	r3, [r4, #12]
 8008648:	181b      	addge	r3, r3, r0
 800864a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800864e:	bfac      	ite	ge
 8008650:	6563      	strge	r3, [r4, #84]	; 0x54
 8008652:	81a3      	strhlt	r3, [r4, #12]
 8008654:	bd10      	pop	{r4, pc}

08008656 <__swrite>:
 8008656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865a:	461f      	mov	r7, r3
 800865c:	898b      	ldrh	r3, [r1, #12]
 800865e:	05db      	lsls	r3, r3, #23
 8008660:	4605      	mov	r5, r0
 8008662:	460c      	mov	r4, r1
 8008664:	4616      	mov	r6, r2
 8008666:	d505      	bpl.n	8008674 <__swrite+0x1e>
 8008668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866c:	2302      	movs	r3, #2
 800866e:	2200      	movs	r2, #0
 8008670:	f000 f868 	bl	8008744 <_lseek_r>
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	4632      	mov	r2, r6
 8008682:	463b      	mov	r3, r7
 8008684:	4628      	mov	r0, r5
 8008686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800868a:	f000 b817 	b.w	80086bc <_write_r>

0800868e <__sseek>:
 800868e:	b510      	push	{r4, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008696:	f000 f855 	bl	8008744 <_lseek_r>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	bf15      	itete	ne
 80086a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086aa:	81a3      	strheq	r3, [r4, #12]
 80086ac:	bf18      	it	ne
 80086ae:	81a3      	strhne	r3, [r4, #12]
 80086b0:	bd10      	pop	{r4, pc}

080086b2 <__sclose>:
 80086b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b6:	f000 b813 	b.w	80086e0 <_close_r>
	...

080086bc <_write_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d07      	ldr	r5, [pc, #28]	; (80086dc <_write_r+0x20>)
 80086c0:	4604      	mov	r4, r0
 80086c2:	4608      	mov	r0, r1
 80086c4:	4611      	mov	r1, r2
 80086c6:	2200      	movs	r2, #0
 80086c8:	602a      	str	r2, [r5, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f7f8 fb57 	bl	8000d7e <_write>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_write_r+0x1e>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_write_r+0x1e>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	24004328 	.word	0x24004328

080086e0 <_close_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d06      	ldr	r5, [pc, #24]	; (80086fc <_close_r+0x1c>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7f8 fb63 	bl	8000db6 <_close>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_close_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_close_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	24004328 	.word	0x24004328

08008700 <_fstat_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d07      	ldr	r5, [pc, #28]	; (8008720 <_fstat_r+0x20>)
 8008704:	2300      	movs	r3, #0
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	4611      	mov	r1, r2
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	f7f8 fb5e 	bl	8000dce <_fstat>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	d102      	bne.n	800871c <_fstat_r+0x1c>
 8008716:	682b      	ldr	r3, [r5, #0]
 8008718:	b103      	cbz	r3, 800871c <_fstat_r+0x1c>
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	bd38      	pop	{r3, r4, r5, pc}
 800871e:	bf00      	nop
 8008720:	24004328 	.word	0x24004328

08008724 <_isatty_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4d06      	ldr	r5, [pc, #24]	; (8008740 <_isatty_r+0x1c>)
 8008728:	2300      	movs	r3, #0
 800872a:	4604      	mov	r4, r0
 800872c:	4608      	mov	r0, r1
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	f7f8 fb5d 	bl	8000dee <_isatty>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_isatty_r+0x1a>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_isatty_r+0x1a>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	24004328 	.word	0x24004328

08008744 <_lseek_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	; (8008764 <_lseek_r+0x20>)
 8008748:	4604      	mov	r4, r0
 800874a:	4608      	mov	r0, r1
 800874c:	4611      	mov	r1, r2
 800874e:	2200      	movs	r2, #0
 8008750:	602a      	str	r2, [r5, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	f7f8 fb56 	bl	8000e04 <_lseek>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_lseek_r+0x1e>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_lseek_r+0x1e>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	24004328 	.word	0x24004328

08008768 <__malloc_lock>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__malloc_lock+0x8>)
 800876a:	f7ff be0b 	b.w	8008384 <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	2400431c 	.word	0x2400431c

08008774 <__malloc_unlock>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__malloc_unlock+0x8>)
 8008776:	f7ff be06 	b.w	8008386 <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	2400431c 	.word	0x2400431c

08008780 <_read_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d07      	ldr	r5, [pc, #28]	; (80087a0 <_read_r+0x20>)
 8008784:	4604      	mov	r4, r0
 8008786:	4608      	mov	r0, r1
 8008788:	4611      	mov	r1, r2
 800878a:	2200      	movs	r2, #0
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7f8 fad8 	bl	8000d44 <_read>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_read_r+0x1e>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_read_r+0x1e>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	24004328 	.word	0x24004328

080087a4 <_sbrk>:
 80087a4:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <_sbrk+0x14>)
 80087a6:	6811      	ldr	r1, [r2, #0]
 80087a8:	4603      	mov	r3, r0
 80087aa:	b909      	cbnz	r1, 80087b0 <_sbrk+0xc>
 80087ac:	4903      	ldr	r1, [pc, #12]	; (80087bc <_sbrk+0x18>)
 80087ae:	6011      	str	r1, [r2, #0]
 80087b0:	6810      	ldr	r0, [r2, #0]
 80087b2:	4403      	add	r3, r0
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	4770      	bx	lr
 80087b8:	2400432c 	.word	0x2400432c
 80087bc:	24004330 	.word	0x24004330

080087c0 <_init>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr

080087cc <_fini>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr
